{
  "version": 3,
  "sources": [
    "../transpiled/qx/ui/form/validation/AsyncValidator.js",
    "../transpiled/qx/data/controller/ISelection.js"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;AAAC,EAAA,EAAC,CAAC,SAAF,CAAY,oBAAZ,CAAiC,aAAjC;;AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,EAAA,EAAC,CAAC,KAAF,CAAQ,MAAR,CAAe,sCAAf,EACA;AACC,IAAA,MAAM,EAAG,EAAE,CAAC,IAAH,CAAQ,MADlB;;AAGC;;;;AAIA,IAAA,SAAS,EAAG,mBAAS,SAAT,EACZ;AACE,4CADF,CAEE;;AACA,WAAK,mBAAL,GAA2B,SAA3B;AACD,KAZF;AAcC,IAAA,OAAO,EACP;AACE,MAAA,mBAAmB,EAAG,IADxB;AAEE,MAAA,MAAM,EAAG,IAFX;AAGE,MAAA,SAAS,EAAG,IAHd;AAIE,MAAA,aAAa,EAAG,IAJlB;;AAME;;;;;;;;;;;;;;;;AAgBA,MAAA,QAAQ,EAAE,kBAAS,IAAT,EAAe,KAAf,EAAsB,OAAtB,EAA+B,OAA/B,EAAwC;AAChD;AACA,aAAK,aAAL,GAAqB,KAArB,CAFgD,CAGhD;;AACA,aAAK,MAAL,GAAc,IAAd;AACA,aAAK,SAAL,GAAiB,OAAjB,CALgD,CAMhD;;AACA,aAAK,mBAAL,CAAyB,IAAzB,CAA8B,OAAO,IAAI,IAAzC,EAA+C,IAA/C,EAAqD,KAArD;AACD,OA9BH;;AAiCE;;;;;;;;;;;;;;;AAeA,MAAA,YAAY,EAAG,sBAAS,KAAT,EAAgB,OAAhB,EAAyB,OAAzB,EAAkC;AAC/C,aAAK,aAAL,GAAqB,IAArB;AACA,aAAK,SAAL,GAAiB,OAAjB;;AACA,aAAK,mBAAL,CAAyB,IAAzB,CAA8B,OAA9B,EAAuC,KAAvC,EAA8C,IAA9C;AACD,OApDH;;AAuDE;;;;;;;AAOA,MAAA,QAAQ,EAAE,kBAAS,KAAT,EAAgB,OAAhB,EAAyB;AACjC;AACA,YAAI,KAAK,aAAT,EAAwB;AACtB;AACA,cAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,iBAAK,SAAL,CAAe,iBAAf,CAAiC,OAAjC;AACD;;AACD,eAAK,SAAL,CAAe,YAAf,CAA4B,KAA5B;AACD,SAND,MAMO;AACL;AACA,cAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,iBAAK,MAAL,CAAY,iBAAZ,CAA8B,OAA9B;AACD;;AACD,eAAK,SAAL,CAAe,YAAf,CAA4B,KAAK,MAAjC,EAAyC,KAAzC;AACD;AACF;AA7EH,KAfD;;AAgGC;;;;;AAMA,IAAA,QAAQ,EAAG,oBAAW;AACpB,WAAK,SAAL,GAAiB,KAAK,MAAL,GAAc,IAA/B;AACD;AAxGF,GADA;AA1CA,EAAA,EAAC,CAAC,EAAF,CAAK,IAAL,CAAU,UAAV,CAAqB,cAArB,CAAoC,aAApC,GAAoD,aAApD;;;;;;;;;;;;;ACAA,EAAA,EAAC,CAAC,SAAF,CAAY,oBAAZ,CAAiC,aAAjC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AAGA,EAAA,EAAC,CAAC,SAAF,CAAY,MAAZ,CAAmB,+BAAnB,EACA;AACC,IAAA,OAAO,EACP;AACE;;;;AAIA,MAAA,YAAY,EAAG,sBAAS,KAAT,EAAgB,CAAE,CALnC;;AAQE;;;;AAIA,MAAA,YAAY,EAAG,wBAAW,CAAE,CAZ9B;;AAeE;;;AAGA,MAAA,cAAc,EAAG,0BAAW,CAAE;AAlBhC;AAFD,GADA;AArBA,EAAA,EAAC,CAAC,IAAF,CAAO,UAAP,CAAkB,UAAlB,CAA6B,aAA7B,GAA6C,aAA7C",
  "file": "build-output/qxapp/part-boot-bundle-28.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * This class is responsible for validation in all asynchronous cases and\n * should always be used with {@link qx.ui.form.validation.Manager}.\n *\n *\n * It acts like a wrapper for asynchronous validation functions. These\n * validation function must be set in the constructor. The form manager will\n * invoke the validation and the validator function will be called with two\n * arguments:\n * <ul>\n *  <li>asyncValidator: A reference to the corresponding validator.</li>\n *  <li>value: The value of the assigned input field.</li>\n * </ul>\n * These two parameters are needed to set the validation status of the current\n * validator. {@link #setValid} is responsible for doing that.\n *\n *\n * *Warning:* Instances of this class can only be used with one input\n * field at a time. Multi usage is not supported!\n *\n * *Warning:* Calling {@link #setValid} synchronously does not work. If you\n * have an synchronous validator, please check\n * {@link qx.ui.form.validation.Manager#add}. If you have both cases, you have\n * to wrap the synchronous call in a timeout to make it asynchronous.\n */\nqx.Class.define(\"qx.ui.form.validation.AsyncValidator\",\n{\n  extend : qx.core.Object,\n\n  /**\n   * @param validator {Function} The validator function, which has to be\n   *   asynchronous.\n   */\n  construct : function(validator)\n  {\n    this.base(arguments);\n    // save the validator function\n    this.__validatorFunction = validator;\n  },\n\n  members :\n  {\n    __validatorFunction : null,\n    __item : null,\n    __manager : null,\n    __usedForForm : null,\n\n    /**\n     * The validate function should only be called by\n     * {@link qx.ui.form.validation.Manager}.\n     *\n     * It stores the given information and calls the validation function set in\n     * the constructor. The method is used for form fields only. Validating a\n     * form itself will be invokes with {@link #validateForm}.\n     *\n     * @param item {qx.ui.core.Widget} The form item which should be validated.\n     * @param value {var} The value of the form item.\n     * @param manager {qx.ui.form.validation.Manager} A reference to the form\n     *   manager.\n     * @param context {var?null} The context of the validator.\n     *\n     * @internal\n     */\n    validate: function(item, value, manager, context) {\n      // mark as item validator\n      this.__usedForForm = false;\n      // store the item and the manager\n      this.__item = item;\n      this.__manager = manager;\n      // invoke the user set validator function\n      this.__validatorFunction.call(context || this, this, value);\n    },\n\n\n    /**\n     * The validateForm function should only be called by\n     * {@link qx.ui.form.validation.Manager}.\n     *\n     * It stores the given information and calls the validation function set in\n     * the constructor. The method is used for forms only. Validating a\n     * form item will be invokes with {@link #validate}.\n     *\n     * @param items {qx.ui.core.Widget[]} All form items of the form manager.\n     * @param manager {qx.ui.form.validation.Manager} A reference to the form\n     *   manager.\n     * @param context {var?null} The context of the validator.\n     *\n     * @internal\n     */\n    validateForm : function(items, manager, context) {\n      this.__usedForForm = true;\n      this.__manager = manager;\n      this.__validatorFunction.call(context, items, this);\n    },\n\n\n    /**\n     * This method should be called within the asynchronous callback to tell the\n     * validator the result of the validation.\n     *\n     * @param valid {Boolean} The boolean state of the validation.\n     * @param message {String?} The invalidMessage of the validation.\n     */\n    setValid: function(valid, message) {\n      // valid processing\n      if (this.__usedForForm) {\n        // message processing\n        if (message !== undefined) {\n          this.__manager.setInvalidMessage(message);\n        }\n        this.__manager.setFormValid(valid);\n      } else {\n        // message processing\n        if (message !== undefined) {\n          this.__item.setInvalidMessage(message);\n        }\n        this.__manager.setItemValid(this.__item, valid);\n      }\n    }\n  },\n\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function() {\n    this.__manager = this.__item = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Interface for data binding classes offering a selection.\n */\nqx.Interface.define(\"qx.data.controller.ISelection\",\n{\n  members :\n  {\n    /**\n     * Setter for the selection.\n     * @param value {qx.data.IListData} The data of the selection.\n     */\n    setSelection : function(value) {},\n\n\n    /**\n     * Getter for the selection list.\n     * @return {qx.data.IListData} The current selection.\n     */\n    getSelection : function() {},\n\n\n    /**\n     * Resets the selection to its default value.\n     */\n    resetSelection : function() {}\n  }\n});"
  ]
}