{
  "version": 3,
  "sources": [
    "../transpiled/qx/ui/table/ITableModel.js",
    "../transpiled/qx/ui/table/model/Abstract.js",
    "../transpiled/qx/ui/table/model/Remote.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/qxapp/part-boot-bundle-48.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * The data model of a table.\n */\nqx.Interface.define(\"qx.ui.table.ITableModel\",\n{\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events : {\n    /**\n     * Fired when the table data changed (the stuff shown in the table body).\n     * The data property of the event may be null or a map having the following attributes:\n     * <ul>\n     *   <li>firstRow: The index of the first row that has changed.</li>\n     *   <li>lastRow: The index of the last row that has changed.</li>\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\n     * </ul>\n     */\n    \"dataChanged\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the meta data changed (the stuff shown in the table header).\n     */\n    \"metaDataChanged\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired after the table is sorted (but before the metaDataChanged event)\n     */\n    \"sorted\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Returns the number of rows in the model.\n     *\n     * @abstract\n     * @return {Integer} the number of rows.\n     */\n    getRowCount : function() {},\n\n\n    /**\n     *\n     * Returns the data of one row. This function may be overridden by models which hold\n     * all data of a row in one object. By using this function, clients have a way of\n     * quickly retrieving the entire row data.\n     *\n     * <b>Important:</b>Models which do not have their row data accessible in one object\n     * may return null.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Object} the row data as an object or null if the model does not support row data\n     *                    objects. The details on the object returned are determined by the model\n     *                    implementation only.\n     */\n    getRowData : function(rowIndex) {},\n\n\n    /**\n     * Returns the number of columns in the model.\n     *\n     * @abstract\n     * @return {Integer} the number of columns.\n     */\n    getColumnCount : function() {},\n\n\n    /**\n     * Returns the ID of column. The ID may be used to identify columns\n     * independent from their index in the model. E.g. for being aware of added\n     * columns when saving the width of a column.\n     *\n     * @abstract\n     * @param columnIndex {Integer} the index of the column.\n     * @return {String} the ID of the column.\n     */\n    getColumnId : function(columnIndex) {},\n\n\n    /**\n     * Returns the index of a column.\n     *\n     * @abstract\n     * @param columnId {String} the ID of the column.\n     * @return {Integer} the index of the column.\n     */\n    getColumnIndexById : function(columnId) {},\n\n\n    /**\n     * Returns the name of a column. This name will be shown to the user in the\n     * table header.\n     *\n     * @abstract\n     * @param columnIndex {Integer} the index of the column.\n     * @return {String} the name of the column.\n     */\n    getColumnName : function(columnIndex) {},\n\n\n    /**\n     * Returns whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column to check.\n     * @return {Boolean} whether the column is editable.\n     */\n    isColumnEditable : function(columnIndex) {},\n\n\n    /**\n     * Returns whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column to check.\n     * @return {Boolean} whether the column is sortable.\n     */\n    isColumnSortable : function(columnIndex) {},\n\n\n    /**\n     * Sorts the model by a column.\n     *\n     * @param columnIndex {Integer} the column to sort by.\n     * @param ascending {Boolean} whether to sort ascending.\n     */\n    sortByColumn : function(columnIndex, ascending) {},\n\n\n    /**\n     * Returns the column index the model is sorted by. If the model is not sorted\n     * -1 is returned.\n     *\n     * @return {Integer} the column index the model is sorted by.\n     */\n    getSortColumnIndex : function() {},\n\n\n    /**\n     * Returns whether the model is sorted ascending.\n     *\n     * @return {Boolean} whether the model is sorted ascending.\n     */\n    isSortAscending : function() {},\n\n\n    /**\n     * Prefetches some rows. This is a hint to the model that the specified rows\n     * will be read soon.\n     *\n     * @param firstRowIndex {Integer} the index of first row.\n     * @param lastRowIndex {Integer} the index of last row.\n     */\n    prefetchRows : function(firstRowIndex, lastRowIndex) {},\n\n\n    /**\n     * Returns a cell value by column index.\n     *\n     * @abstract\n     * @param columnIndex {Integer} the index of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @return {var} The value of the cell.\n     * @see #getValueById\n     */\n    getValue : function(columnIndex, rowIndex) {},\n\n\n    /**\n     * Returns a cell value by column ID.\n     *\n     * Whenever you have the choice, use {@link #getValue()} instead,\n     * because this should be faster.\n     *\n     * @param columnId {String} the ID of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @return {var} the value of the cell.\n     */\n    getValueById : function(columnId, rowIndex) {},\n\n\n    /**\n     * Sets a cell value by column index.\n     *\n     * @abstract\n     * @param columnIndex {Integer} The index of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @param value {var} The new value.\n     * @see #setValueById\n     */\n    setValue : function(columnIndex, rowIndex, value) {},\n\n\n    /**\n     * Sets a cell value by column ID.\n     *\n     * Whenever you have the choice, use {@link #setValue()} instead,\n     * because this should be faster.\n     *\n     * @param columnId {String} The ID of the column.\n     * @param rowIndex {Integer} The index of the row.\n     * @param value {var} The new value.\n     */\n    setValueById : function(columnId, rowIndex, value) {}\n  }\n});",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * An abstract table model that performs the column handling, so subclasses only\n * need to care for row handling.\n */\nqx.Class.define(\"qx.ui.table.model.Abstract\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n  implement : qx.ui.table.ITableModel,\n\n\n  events :\n  {\n    /**\n     * Fired when the table data changed (the stuff shown in the table body).\n     * The data property of the event will be a map having the following\n     * attributes:\n     * <ul>\n     *   <li>firstRow: The index of the first row that has changed.</li>\n     *   <li>lastRow: The index of the last row that has changed.</li>\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\n     * </ul>\n     *\n     * Additionally, if the data changed as a result of rows being removed\n     * from the data model, then these additional attributes will be in the\n     * data:\n     * <ul>\n     *   <li>removeStart: The model index of the first row that was removed.</li>\n     *   <li>removeCount: The number of rows that were removed.</li>\n     * </ul>\n     */\n    \"dataChanged\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the meta data changed (the stuff shown in the table header).\n     */\n    \"metaDataChanged\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired after the table is sorted (but before the metaDataChanged event)\n     */\n    \"sorted\" : \"qx.event.type.Data\"\n  },\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__columnIdArr = [];\n    this.__columnNameArr = [];\n    this.__columnIndexMap = {};\n  },\n\n\n  members :\n  {\n    __columnIdArr : null,\n    __columnNameArr : null,\n    __columnIndexMap : null,\n    __internalChange : null,\n\n\n    /**\n     * Initialize the table model <--> table interaction. The table model is\n     * passed to the table constructor, but the table model doesn't otherwise\n     * know anything about the table nor can it operate on table\n     * properties. This function provides the capability for the table model\n     * to specify characteristics of the table. It is called when the table\n     * model is applied to the table.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this model is attached\n     */\n    init : function(table) {\n      // default implementation has nothing to do\n    },\n\n    /**\n     * Abstract method\n     * @throws {Error} An error if this method is called.\n     */\n    getRowCount : function() {\n      throw new Error(\"getRowCount is abstract\");\n    },\n\n    getRowData : function(rowIndex) {\n      return null;\n    },\n\n    isColumnEditable : function(columnIndex) {\n      return false;\n    },\n\n    isColumnSortable : function(columnIndex) {\n      return false;\n    },\n\n    sortByColumn : function(columnIndex, ascending) {\n    },\n\n    getSortColumnIndex : function() {\n      return -1;\n    },\n\n    isSortAscending : function() {\n      return true;\n    },\n\n    prefetchRows : function(firstRowIndex, lastRowIndex) {\n    },\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} the index of the column\n     * @param rowIndex {Integer} the index of the row\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    getValue : function(columnIndex, rowIndex) {\n      throw new Error(\"getValue is abstract\");\n    },\n\n    getValueById : function(columnId, rowIndex) {\n      return this.getValue(this.getColumnIndexById(columnId), rowIndex);\n    },\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} index of the column\n     * @param rowIndex {Integer} index of the row\n     * @param value {var} Value to be set\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    setValue : function(columnIndex, rowIndex, value) {\n      throw new Error(\"setValue is abstract\");\n    },\n\n    setValueById : function(columnId, rowIndex, value) {\n      this.setValue(this.getColumnIndexById(columnId), rowIndex, value);\n    },\n\n    // overridden\n    getColumnCount : function() {\n      return this.__columnIdArr.length;\n    },\n\n    // overridden\n    getColumnIndexById : function(columnId) {\n      return this.__columnIndexMap[columnId];\n    },\n\n    // overridden\n    getColumnId : function(columnIndex) {\n      return this.__columnIdArr[columnIndex];\n    },\n\n    // overridden\n    getColumnName : function(columnIndex) {\n      return this.__columnNameArr[columnIndex];\n    },\n\n\n    /**\n     * Sets the column IDs. These IDs may be used internally to identify a\n     * column.\n     *\n     * Note: This will clear previously set column names.\n     *\n     *\n     * @param columnIdArr {String[]} the IDs of the columns.\n     * @see #setColumns\n     */\n    setColumnIds : function(columnIdArr)\n    {\n      this.__columnIdArr = columnIdArr;\n\n      // Create the reverse map\n      this.__columnIndexMap = {};\n\n      for (var i=0; i<columnIdArr.length; i++) {\n        this.__columnIndexMap[columnIdArr[i]] = i;\n      }\n\n      this.__columnNameArr = new Array(columnIdArr.length);\n\n      // Inform the listeners\n      if (!this.__internalChange) {\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameArr {String[]} the names of the columns.\n     * @throws {Error} If the amount of given columns is different from the table.\n     * @see #setColumnIds\n     */\n    setColumnNamesByIndex : function(columnNameArr)\n    {\n      if (this.__columnIdArr.length != columnNameArr.length) {\n        throw new Error(\"this.__columnIdArr and columnNameArr have different length: \" + this.__columnIdArr.length + \" != \" + columnNameArr.length);\n      }\n\n      this.__columnNameArr = columnNameArr;\n\n      // Inform the listeners\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameMap {Map} a map containing the column IDs as keys and the\n     *          column name as values.\n     * @see #setColumnIds\n     */\n    setColumnNamesById : function(columnNameMap)\n    {\n      this.__columnNameArr = new Array(this.__columnIdArr.length);\n\n      for (var i=0; i<this.__columnIdArr.length; ++i) {\n        this.__columnNameArr[i] = columnNameMap[this.__columnIdArr[i]];\n      }\n    },\n\n\n    /**\n     * Sets the column names (and optionally IDs)\n     *\n     * Note: You can not change the _number_ of columns this way.  The number\n     *       of columns is highly intertwined in the entire table operation,\n     *       and dynamically changing it would require as much work as just\n     *       recreating your table.  If you must change the number of columns\n     *       in a table then you should remove the table and add a new one.\n     *\n     * @param columnNameArr {String[]}\n     *   The column names. These names will be shown to the user.\n     *\n     * @param columnIdArr {String[] ? null}\n     *   The column IDs. These IDs may be used internally to identify a\n     *   column. If null, the column names are used as IDs unless ID values\n     *   have already been set. If ID values have already been set, they will\n     *   continue to be used if no ID values are explicitly provided here.\n     *\n     * @throws {Error} If the amount of given columns is different from the table.\n     *\n     */\n    setColumns : function(columnNameArr, columnIdArr)\n    {\n      var bSetIds = this.__columnIdArr.length == 0 || columnIdArr;\n\n      if (columnIdArr == null) {\n        if (this.__columnIdArr.length == 0) {\n          columnIdArr = columnNameArr;\n        } else {\n          columnIdArr = this.__columnIdArr;\n        }\n      }\n\n      if (columnIdArr.length != columnNameArr.length) {\n        throw new Error(\"columnIdArr and columnNameArr have different length: \" + columnIdArr.length + \" != \" + columnNameArr.length);\n      }\n\n      if (bSetIds)\n      {\n        this.__internalChange = true;\n        this.setColumnIds(columnIdArr);\n        this.__internalChange = false;\n      }\n\n      this.setColumnNamesByIndex(columnNameArr);\n    }\n  },\n\n\n  destruct : function() {\n    this.__columnIdArr = this.__columnNameArr = this.__columnIndexMap = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A table model that loads its data from a backend.\n * <p>\n * Only a subset of the available rows, those which are within or near the\n * currently visible area, are loaded. If a quick scroll operation occurs,\n * rows will soon be displayed using asynchronous loading in the background.\n * All loaded data is managed through a cache which automatically removes\n * the oldest used rows when it gets full.\n * <p>\n * This class is abstract: The actual loading of row data must be done by\n * subclasses.\n */\nqx.Class.define(\"qx.ui.table.model.Remote\",\n{\n  type : \"abstract\",\n  extend : qx.ui.table.model.Abstract,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this._sortColumnIndex = -1;\n    this._sortAscending = true;\n    this._rowCount = -1;\n\n    this._lruCounter = 0;\n\n    // Holds the index of the first block that is currently loading.\n    // Is -1 if there is currently no request on its way.\n    this._firstLoadingBlock = -1;\n\n    // Holds the index of the first row that should be loaded when the response of\n    // the current request arrives. Is -1 we need no following request.\n    this._firstRowToLoad = -1;\n\n    // Counterpart to _firstRowToLoad\n    this._lastRowToLoad = -1;\n\n    // Holds whether the current request will bring obsolete data. When true the\n    // response of the current request will be ignored.\n    this._ignoreCurrentRequest = false;\n\n    this._rowBlockCache = {};\n    this._rowBlockCount = 0;\n\n    this._sortableColArr = null;\n    this._editableColArr = null;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /** The number of rows that are stored in one cache block. */\n    blockSize :\n    {\n      check : \"Integer\",\n      init : 50\n    },\n\n    /** The maximum number of row blocks kept in the cache. */\n    maxCachedBlockCount :\n    {\n      check : \"Integer\",\n      init : 15\n    },\n\n\n    /**\n     * Whether to clear the cache when some rows are removed.\n     * If true the rows are removed locally in the cache.\n     */\n    clearCacheOnRemove :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n    /**\n     * Whether to block remote requests for the row count while a request for\n     * the row count is pending. Row counts are requested at various times and\n     * from various parts of the code, resulting in numerous requests to the\n     * user-provided _loadRowCount() method, often while other requests are\n     * already pending. The default behavior now ignores requests to load a\n     * new row count if such a request is already pending. It is therefore now\n     * conceivable that the row count changes between an initial request for\n     * the row count and a later (ignored) request. Since the chance of this\n     * is low, the desirability of reducing the server requests outweighs the\n     * slight possibility of an altered count (which will, by the way, be\n     * detected soon thereafter upon the next request for the row count). If\n     * the old behavior is desired, set this property to false.\n     */\n    blockConcurrentLoadRowCount:\n    {\n      check : \"Boolean\",\n      init  : true\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    _rowCount : null,\n    _ignoreCurrentRequest : null,\n\n    _lruCounter : null,\n    _firstLoadingBlock : null,\n    _firstRowToLoad : null,\n    _lastRowToLoad : null,\n    _rowBlockCache : null,\n    _rowBlockCount : null,\n\n    _sortColumnIndex : null,\n    _sortAscending : null,\n\n    _editableColArr : null,\n    _sortableColArr : null,\n\n    _loadRowCountRequestRunning : false,\n\n    _clearCache : false,\n\n\n    /**\n     * Returns whether the current request is ignored by the model.\n     *\n     * @return {Boolean} true when the current request is ignored by the model.\n     */\n    _getIgnoreCurrentRequest : function()\n    {\n      return this._ignoreCurrentRequest;\n    },\n\n\n    // overridden\n    getRowCount : function()\n    {\n      if (this._rowCount == -1)\n      {\n        if (! this._loadRowCountRequestRunning ||\n            ! this.getBlockConcurrentLoadRowCount())\n        {\n          this._loadRowCountRequestRunning = true;\n          this._loadRowCount();\n        }\n\n        // NOTE: _loadRowCount may set this._rowCount\n        return (this._rowCount == -1) ? 0 : this._rowCount;\n      }\n      else\n      {\n        return this._rowCount;\n      }\n    },\n\n\n    /**\n     * Implementing classes have to call {@link #_onRowCountLoaded} when the\n     * server response arrived. That method has to be called! Even when there\n     * was an error.\n     *\n     * @abstract\n     * @throws {Error} the abstract function warning.\n     */\n    _loadRowCount : function() {\n      throw new Error(\"_loadRowCount is abstract\");\n    },\n\n\n    /**\n     * Sets the row count.\n     *\n     * Has to be called by {@link #_loadRowCount}.\n     *\n     * @param rowCount {Integer} the number of rows in this model or null if loading.\n     */\n    _onRowCountLoaded : function(rowCount)\n    {\n      if (this.getBlockConcurrentLoadRowCount())\n      {\n        // There's no longer a loadRowCount() in progress\n        this._loadRowCountRequestRunning = false;\n      }\n\n      // this.debug(\"row count loaded: \" + rowCount);\n      if (rowCount == null || rowCount < 0) {\n        rowCount = 0;\n      }\n\n      this._rowCount = Number(rowCount);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : 0,\n        lastRow     : rowCount - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n    },\n\n\n    /**\n     * Reloads the model and clears the local cache.\n     *\n     */\n    reloadData : function()\n    {\n      // If there is currently a request on its way, then this request will bring\n      // obsolete data -> Ignore it\n      if (this._firstLoadingBlock != -1) {\n        var cancelingSucceed = this._cancelCurrentRequest();\n        if (cancelingSucceed) {\n          // The request was canceled -> We're not loading any blocks any more\n          this._firstLoadingBlock = -1;\n          this._ignoreCurrentRequest = false;\n        } else {\n          // The request was not canceled -> Ignore it\n          this._ignoreCurrentRequest = true;\n        }\n      }\n\n      // Force clearing row cache, because of reloading data.\n      this._clearCache = true;\n\n      // Forget a possibly outstanding request\n      // (_loadRowCount will tell the listeners anyway, that the whole table\n      // changed)\n      //\n      // NOTE: This will inform the listeners as soon as the new row count is\n      // known\n      this._firstRowToLoad = -1;\n      this._lastRowToLoad = -1;\n      this._loadRowCountRequestRunning = true;\n      this._loadRowCount();\n    },\n\n\n    /**\n     * Clears the cache.\n     *\n     */\n    clearCache : function()\n    {\n      this._rowBlockCache = {};\n      this._rowBlockCount = 0;\n    },\n\n\n    /**\n     * Returns the current state of the cache.\n     * <p>\n     * Do not change anything in the returned data. This breaks the model state.\n     * Use this method only together with {@link #restoreCacheContent} for backing\n     * up state for a later restore.\n     *\n     * @return {Map} the current cache state.\n     */\n    getCacheContent : function() {\n      return {\n        sortColumnIndex : this._sortColumnIndex,\n        sortAscending   : this._sortAscending,\n        rowCount        : this._rowCount,\n        lruCounter      : this._lruCounter,\n        rowBlockCache   : this._rowBlockCache,\n        rowBlockCount   : this._rowBlockCount\n      };\n    },\n\n\n    /**\n     * Restores a cache state created by {@link #getCacheContent}.\n     *\n     * @param cacheContent {Map} An old cache state.\n     */\n    restoreCacheContent : function(cacheContent)\n    {\n      // If there is currently a request on its way, then this request will bring\n      // obsolete data -> Ignore it\n      if (this._firstLoadingBlock != -1)\n      {\n        // Try to cancel the current request\n        var cancelingSucceed = this._cancelCurrentRequest();\n\n        if (cancelingSucceed)\n        {\n          // The request was canceled -> We're not loading any blocks any more\n          this._firstLoadingBlock = -1;\n          this._ignoreCurrentRequest = false;\n        }\n        else\n        {\n          // The request was not canceled -> Ignore it\n          this._ignoreCurrentRequest = true;\n        }\n      }\n\n      // Restore the cache content\n      this._sortColumnIndex = cacheContent.sortColumnIndex;\n      this._sortAscending = cacheContent.sortAscending;\n      this._rowCount = cacheContent.rowCount;\n      this._lruCounter = cacheContent.lruCounter;\n      this._rowBlockCache = cacheContent.rowBlockCache;\n      this._rowBlockCount = cacheContent.rowBlockCount;\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : 0,\n        lastRow     : this._rowCount - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n    },\n\n\n    /**\n     * Cancels the current request if possible.\n     *\n     * Should be overridden by subclasses if they are able to cancel requests. This\n     * allows sending a new request directly after a call of {@link #reloadData}.\n     *\n     * @return {Boolean} whether the request was canceled.\n     */\n    _cancelCurrentRequest : function() {\n      return false;\n    },\n\n\n    /**\n     * Iterates through all cached rows.\n     *\n     * The iterator will be called for each cached row with two parameters: The row\n     * index of the current row (Integer) and the row data of that row (var[]). If\n     * the iterator returns something this will be used as new row data.\n     *\n     * The iterator is called in the same order as the rows are in the model\n     * (the row index is always ascending).\n     *\n     * @param iterator {Function} The iterator function to call.\n     * @param object {Object} context of the iterator\n     */\n    iterateCachedRows : function(iterator, object)\n    {\n      var blockSize = this.getBlockSize();\n      var blockCount = Math.ceil(this.getRowCount() / blockSize);\n\n      // Remove the row and move the rows of all following blocks\n      for (var block=0; block<=blockCount; block++)\n      {\n        var blockData = this._rowBlockCache[block];\n\n        if (blockData != null)\n        {\n          var rowOffset = block * blockSize;\n          var rowDataArr = blockData.rowDataArr;\n\n          for (var relRow=0; relRow<rowDataArr.length; relRow++)\n          {\n            // Call the iterator for this row\n            var rowData = rowDataArr[relRow];\n            var newRowData = iterator.call(object, rowOffset + relRow, rowData);\n\n            if (newRowData != null) {\n              rowDataArr[relRow] = newRowData;\n            }\n          }\n        }\n      }\n    },\n\n    // overridden\n    prefetchRows : function(firstRowIndex, lastRowIndex)\n    {\n      // this.debug(\"Prefetch wanted: \" + firstRowIndex + \"..\" + lastRowIndex);\n      if (this._firstLoadingBlock == -1)\n      {\n        var blockSize = this.getBlockSize();\n        var totalBlockCount = Math.ceil(this._rowCount / blockSize);\n\n        // There is currently no request running -> Start a new one\n        // NOTE: We load one more block above and below to have a smooth\n        //       scrolling into the next block without blank cells\n        var firstBlock = parseInt(firstRowIndex / blockSize, 10) - 1;\n\n        if (firstBlock < 0) {\n          firstBlock = 0;\n        }\n\n        var lastBlock = parseInt(lastRowIndex / blockSize, 10) + 1;\n\n        if (lastBlock >= totalBlockCount) {\n          lastBlock = totalBlockCount - 1;\n        }\n\n        // Check which blocks we have to load\n        var firstBlockToLoad = -1;\n        var lastBlockToLoad = -1;\n\n        for (var block=firstBlock; block<=lastBlock; block++)\n        {\n          if ((this._clearCache && !this._loadRowCountRequestRunning)|| this._rowBlockCache[block] == null || this._rowBlockCache[block].isDirty)\n          {\n            // We don't have this block\n            if (firstBlockToLoad == -1) {\n              firstBlockToLoad = block;\n            }\n\n            lastBlockToLoad = block;\n          }\n        }\n\n        // Load the blocks\n        if (firstBlockToLoad != -1)\n        {\n          this._firstRowToLoad = -1;\n          this._lastRowToLoad = -1;\n\n          this._firstLoadingBlock = firstBlockToLoad;\n\n          // this.debug(\"Starting server request. rows: \" + firstRowIndex + \"..\" + lastRowIndex + \", blocks: \" + firstBlockToLoad + \"..\" + lastBlockToLoad);\n          this._loadRowData(firstBlockToLoad * blockSize, (lastBlockToLoad + 1) * blockSize - 1);\n        }\n      }\n      else\n      {\n        // There is already a request running -> Remember this request\n        // so it can be executed after the current one is finished.\n        this._firstRowToLoad = firstRowIndex;\n        this._lastRowToLoad = lastRowIndex;\n      }\n    },\n\n\n    /**\n     * Loads some row data from the server.\n     *\n     * Implementing classes have to call {@link #_onRowDataLoaded} when the server\n     * response arrived. That method has to be called! Even when there was an error.\n     *\n     * @abstract\n     * @param firstRow {Integer} The index of the first row to load.\n     * @param lastRow {Integer} The index of the last row to load.\n     * @throws {Error} the abstract function warning.\n     */\n    _loadRowData : function(firstRow, lastRow) {\n      throw new Error(\"_loadRowData is abstract\");\n    },\n\n\n    /**\n     * Sets row data.\n     *\n     * Has to be called by {@link #_loadRowData}.\n     *\n     * @param rowDataArr {Map[]} the loaded row data or null if there was an error.\n     */\n    _onRowDataLoaded : function(rowDataArr)\n    {\n      // Clear cache if function was called because of a reload.\n      if (this._clearCache) {\n        this.clearCache();\n        this._clearCache = false;\n      }\n\n      if (rowDataArr != null && !this._ignoreCurrentRequest)\n      {\n        var blockSize = this.getBlockSize();\n        var blockCount = Math.ceil(rowDataArr.length / blockSize);\n\n        if (blockCount == 1)\n        {\n          // We got one block -> Use the rowData directly\n          this._setRowBlockData(this._firstLoadingBlock, rowDataArr);\n        }\n        else\n        {\n          // We got more than one block -> We've to split the rowData\n          for (var i=0; i<blockCount; i++)\n          {\n            var rowOffset = i * blockSize;\n            var blockRowData = [];\n            var mailCount = Math.min(blockSize, rowDataArr.length - rowOffset);\n\n            for (var row=0; row<mailCount; row++) {\n              blockRowData.push(rowDataArr[rowOffset + row]);\n            }\n\n            this._setRowBlockData(this._firstLoadingBlock + i, blockRowData);\n          }\n        }\n\n        // this.debug(\"Got server answer. blocks: \" + this._firstLoadingBlock + \"..\" + (this._firstLoadingBlock + blockCount - 1) + \". mail count: \" + rowDataArr.length + \" block count:\" + blockCount);\n        // Inform the listeners\n        var data =\n        {\n          firstRow    : this._firstLoadingBlock * blockSize,\n          lastRow     : (this._firstLoadingBlock + blockCount + 1) * blockSize - 1,\n          firstColumn : 0,\n          lastColumn  : this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n\n      // We're not loading any blocks any more\n      this._firstLoadingBlock = -1;\n      this._ignoreCurrentRequest = false;\n\n      // Check whether we have to start a new request\n      if (this._firstRowToLoad != -1) {\n        this.prefetchRows(this._firstRowToLoad, this._lastRowToLoad);\n      }\n    },\n\n\n    /**\n     * Sets the data of one block.\n     *\n     * @param block {Integer} the index of the block.\n     * @param rowDataArr {var[][]} the data to set.\n     */\n    _setRowBlockData : function(block, rowDataArr)\n    {\n      if (this._rowBlockCache[block] == null)\n      {\n\n        // This is a new block -> Check whether we have to remove another block first\n        this._rowBlockCount++;\n\n        while (this._rowBlockCount > this.getMaxCachedBlockCount())\n        {\n          // Find the last recently used block\n          // NOTE: We never remove block 0 and 1\n          var lruBlock;\n          var minLru = this._lruCounter;\n\n          for (var currBlock in this._rowBlockCache)\n          {\n            var currLru = this._rowBlockCache[currBlock].lru;\n\n            if (currLru < minLru && currBlock > 1)\n            {\n              minLru = currLru;\n              lruBlock = currBlock;\n            }\n          }\n\n          // Remove that block\n          // this.debug(\"Removing block: \" + lruBlock + \". current LRU: \" + this._lruCounter);\n          delete this._rowBlockCache[lruBlock];\n          this._rowBlockCount--;\n        }\n      }\n\n      this._rowBlockCache[block] =\n      {\n        lru        : ++this._lruCounter,\n        rowDataArr : rowDataArr\n      };\n    },\n\n\n    /**\n     * Removes a row from the model.\n     *\n     * @param rowIndex {Integer} the index of the row to remove.\n     */\n    removeRow : function(rowIndex)\n    {\n      if (this.getClearCacheOnRemove())\n      {\n        this.clearCache();\n\n        // Inform the listeners\n        var data =\n        {\n          firstRow    : 0,\n          lastRow     : this.getRowCount() - 1,\n          firstColumn : 0,\n          lastColumn  : this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n      else\n      {\n        var blockSize = this.getBlockSize();\n        var blockCount = Math.ceil(this.getRowCount() / blockSize);\n        var startBlock = parseInt(rowIndex / blockSize, 10);\n\n        // Remove the row and move the rows of all following blocks\n        for (var block=startBlock; block<=blockCount; block++)\n        {\n          var blockData = this._rowBlockCache[block];\n\n          if (blockData != null)\n          {\n            // Remove the row in the start block\n            // NOTE: In the other blocks the first row is removed\n            //       (This is the row that was)\n            var removeIndex = 0;\n\n            if (block == startBlock) {\n              removeIndex = rowIndex - block * blockSize;\n            }\n\n            blockData.rowDataArr.splice(removeIndex, 1);\n\n            if (block == blockCount - 1)\n            {\n              // This is the last block\n              if (blockData.rowDataArr.length == 0)\n              {\n                // It is empty now -> Remove it\n                delete this._rowBlockCache[block];\n              }\n            }\n            else\n            {\n              // Try to copy the first row of the next block to the end of this block\n              // so this block can stays clean\n              var nextBlockData = this._rowBlockCache[block + 1];\n\n              if (nextBlockData != null) {\n                blockData.rowDataArr.push(nextBlockData.rowDataArr[0]);\n              }\n              else\n              {\n                // There is no row to move -> Mark this block as dirty\n                blockData.isDirty = true;\n              }\n            }\n          }\n        }\n\n        if (this._rowCount != -1) {\n          this._rowCount--;\n        }\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\"))\n        {\n          var data =\n          {\n            firstRow    : rowIndex,\n            lastRow     : this.getRowCount() - 1,\n            firstColumn : 0,\n            lastColumn  : this.getColumnCount() - 1\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n      }\n    },\n\n\n    /**\n     *\n     * See overridden method for details.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Object} Map containing a value for each column.\n     */\n    getRowData : function(rowIndex)\n    {\n      var blockSize = this.getBlockSize();\n      var block = parseInt(rowIndex / blockSize, 10);\n      var blockData = this._rowBlockCache[block];\n\n      if (blockData == null)\n      {\n        // This block is not (yet) loaded\n        return null;\n      }\n      else\n      {\n        var rowData = blockData.rowDataArr[rowIndex - (block * blockSize)];\n\n        // Update the last recently used counter\n        if (blockData.lru != this._lruCounter) {\n          blockData.lru = ++this._lruCounter;\n        }\n\n        return rowData;\n      }\n    },\n\n    // overridden\n    getValue : function(columnIndex, rowIndex)\n    {\n      var rowData = this.getRowData(rowIndex);\n\n      if (rowData == null) {\n        return null;\n      }\n      else\n      {\n        var columnId = this.getColumnId(columnIndex);\n        return rowData[columnId];\n      }\n    },\n\n    // overridden\n    setValue : function(columnIndex, rowIndex, value)\n    {\n      var rowData = this.getRowData(rowIndex);\n\n      if (rowData == null) {\n        // row has not yet been loaded or does not exist\n        return;\n      }\n      else\n      {\n        var columnId = this.getColumnId(columnIndex);\n        rowData[columnId] = value;\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\"))\n        {\n          var data =\n          {\n            firstRow    : rowIndex,\n            lastRow     : rowIndex,\n            firstColumn : columnIndex,\n            lastColumn  : columnIndex\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n      }\n    },\n\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean} whether all columns are editable.\n     */\n    setEditable : function(editable)\n    {\n      this._editableColArr = [];\n\n      for (var col=0; col<this.getColumnCount(); col++) {\n        this._editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column of which to set the editable state.\n     * @param editable {Boolean} whether the column should be editable.\n     */\n    setColumnEditable : function(columnIndex, editable)\n    {\n      if (editable != this.isColumnEditable(columnIndex))\n      {\n        if (this._editableColArr == null) {\n          this._editableColArr = [];\n        }\n\n        this._editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable : function(columnIndex)\n    {\n      return (this._editableColArr\n              ? (this._editableColArr[columnIndex] == true)\n              : false);\n    },\n\n   /**\n     * Sets whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column of which to set the sortable state.\n     * @param sortable {Boolean} whether the column should be sortable.\n     */\n    setColumnSortable : function(columnIndex, sortable)\n    {\n      if (sortable != this.isColumnSortable(columnIndex))\n      {\n        if (this._sortableColArr == null) {\n          this._sortableColArr = [];\n        }\n\n        this._sortableColArr[columnIndex] = sortable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnSortable : function(columnIndex)\n    {\n      return (\n        this._sortableColArr\n        ? (this._sortableColArr[columnIndex] !== false)\n        : true\n      );\n    },\n\n    // overridden\n    sortByColumn : function(columnIndex, ascending)\n    {\n      if (this._sortColumnIndex != columnIndex || this._sortAscending != ascending)\n      {\n        this._sortColumnIndex = columnIndex;\n        this._sortAscending = ascending;\n\n        this.clearCache();\n\n        // Inform the listeners\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    getSortColumnIndex : function() {\n      return this._sortColumnIndex;\n    },\n\n    // overridden\n    isSortAscending : function() {\n      return this._sortAscending;\n    },\n\n    /**\n     * Sets the sorted column without sorting the data.\n     * Use this method, if you want to mark the column as the sorted column,\n     * (e.g. for appearance reason), but the sorting of the data will be done\n     * in another step.\n     *\n     * @param sortColumnIndex {Integer} the column, which shall be marked as the sorted column.\n     */\n    setSortColumnIndexWithoutSortingData : function(sortColumnIndex)\n    {\n      this._sortColumnIndex = sortColumnIndex;\n    },\n\n    /**\n     * Sets the direction of the sorting without sorting the data.\n     * Use this method, if you want to set the direction of sorting, (e.g\n     * for appearance reason), but the sorting of the data will be done in\n     * another step.\n     *\n     * @param sortAscending {Boolean} whether the sorting direction is ascending\n     *        (true) or not (false).\n     */\n    setSortAscendingWithoutSortingData : function (sortAscending)\n    {\n      this._sortAscending = sortAscending;\n    }\n\n  },\n\n  destruct : function() {\n    this._sortableColArr = this._editableColArr = this._rowBlockCache = null;\n  }\n});\n"
  ]
}