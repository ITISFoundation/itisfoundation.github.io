{
  "version": 3,
  "sources": [
    "../transpiled/qx/dev/FakeServer.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/qxapp/part-boot-bundle-5.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * A wrapper around Sinon.JS's FakeXMLHttpRequest and FakeServer features that\n * allows quick and simple configuration of mock HTTP backends for testing and\n * development.\n * Automatically creates URL filtering rules to ensure that only configured\n * requests are faked while others will be processed normally by the browser's\n * XHR implementation.\n *\n * The following example shows how to configure mock responses for two different\n * requests:\n * <pre class=\"javascript\">\n *   var responseData = [\n *     {\n *       method: \"GET\",\n *       url: /\\/api\\/resource\\/\\d+/,\n *       response : function(request) {\n *         var status = 200;\n *         var headers = { \"Content-Type\": \"application/json\" };\n *         var responseData = {\n *           description: \"Mock REST response for resource \" + request.url\n *         };\n *         var body = qx.lang.Json.stringify(responseData);\n *         request.respond(status, headers, body);\n *       }\n *     },\n *     {\n *       method: \"GET\",\n *       url: \"/users/{userId}\",\n *       response: [\n *         200,\n *         { \"Content-Type\": \"application/json\" },\n *         qx.lang.Json.stringify({userId: 'someUser'})\n *       ]\n *     }\n *   ];\n *\n *   qx.dev.FakeServer.getInstance().configure(responseData);\n * </pre>\n */\nqx.Bootstrap.define(\"qx.dev.FakeServer\", {\n\n  extend : Object,\n\n  construct : function() {\n    var clazz = qx.dev.FakeServer;\n\n    if (!clazz.$$allowconstruct) {\n        var msg = clazz+\" is a singleton! It is not possible to instantiate it directly.\" +\n                  \"Use the static getInstance() method instead.\";\n        throw new Error(msg);\n    }\n\n    this.getFakeServer();\n    this.__responses = [];\n  },\n\n  statics : {\n    $$instance : null,\n    $$allowconstruct : false,\n\n    /**\n     * Helper method to handle singletons\n     *\n     * @internal\n     * @return {Object} The singleton instance\n     */\n    getInstance : function()\n    {\n      if (!this.$$instance)\n      {\n        this.$$allowconstruct = true;\n        this.$$instance = new this();\n        delete this.$$allowconstruct;\n      }\n\n      return this.$$instance;\n    }\n  },\n\n  members :\n  {\n    __sinon : null,\n    __fakeServer : null,\n    __responses : null,\n    __filter : null,\n\n    /**\n     * Configures a set of fake HTTP responses. Each response is defined as a map\n     * that must provide the following keys:\n     * <ul>\n     *   <li><code>method</code> HTTP method to respond to, e.g. <code>PUT</code></li>\n     *   <li><code>url</code> URL used to match requests to fake responses. Can be\n     *   a RegExp or a String. REST-style parameter placeholders in curly braces\n     *   will be replaced with wildcards, e.g. the string \"/resource/{resourceId}\"\n     *   is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n     *   <li><code>response</code> This can be either:\n     *     <ul>\n     *       <li>a string: This will be the response body, status code will be 200</li>\n     *       <li>an array containing the status code, a map of response headers and\n     *         the response text, e.g. <code>[200, { \"Content-Type\": \"text/html\" }, \"OK\"]</code>\n     *       </li>\n     *       <li>a function: This will be called with a FakeXMLHttpRequest object as\n     *       the only argument. Its <code>respond</code> method must be called to send a response.\n     *       See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n     *       </li>\n     *     </ul>\n     *   </li>\n     * </ul>\n     *\n     * @param responseData {Map[]} An array of response description maps.\n     */\n    configure : function(responseData) {\n      responseData.forEach(function(item) {\n        var urlRegExp = item.url instanceof RegExp ? item.url : this._getRegExp(item.url);\n        var response = [item.method, urlRegExp];\n        var hasResponse = false;\n        for (var i=0, l=this.__responses.length; i<l; i++) {\n          var old = this.__responses[i];\n          hasResponse = (old[0] == response[0] && old[1] == response[1]);\n        }\n        if (!hasResponse) {\n          this.__responses.push(response);\n        }\n        this.respondWith(item.method, urlRegExp, item.response);\n      }.bind(this));\n\n      var filter = this.__filter = this.__getCombinedFilter();\n      this.addFilter(filter);\n    },\n\n\n    /**\n     * Adds a URL filtering function to decide whether a request should be handled\n     * by the FakeServer or passed to the regular XMLHttp implementation.\n     * See <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\n     * for details.\n     *\n     * @param filter {Function} URL filter function. Will be called with the\n     * following arguments: <code>method</code>, <code>url</code>, <code>async</code>,\n     * <code>username</code>, <code>password</code>. Must return <code>true</code>\n     * if the request should not be faked.\n     */\n    addFilter : function(filter) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertFunction(filter);\n      }\n\n      this.__sinon.FakeXMLHttpRequest.addFilter(filter);\n    },\n\n\n    /**\n     * Remove a filter that was added with {@link #addFilter}\n     * @param filter {Function} filter function to remove\n     */\n    removeFilter : function(filter) {\n     qx.lang.Array.remove(this.__sinon.FakeXMLHttpRequest.filters, filter);\n    },\n\n\n    /**\n     * Removes a response that was configured with {@link #configure}\n     * @param method {String} HTTP method of the response\n     * @param url {String|RegExp} URL of the response\n     */\n    removeResponse : function(method, url) {\n      qx.lang.Array.remove(this.__sinon.FakeXMLHttpRequest.filters, this.__filter);\n      var urlRegExp = url instanceof RegExp ? url : this._getRegExp(url);\n      this.__responses = this.__responses.filter(function(response) {\n        return (response[0] != method ||\n                response[1].toString() != urlRegExp.toString());\n      });\n      this.__fakeServer.responses = this.__fakeServer.responses.filter(function(response) {\n        return (response.method != method ||\n                response.url.toString() != urlRegExp.toString());\n      });\n      this.removeFilter(this.__filter);\n      this.__filter = this.__getCombinedFilter();\n      this.addFilter(this.__filter);\n    },\n\n\n    /**\n     * Defines a fake XHR response to a matching request.\n     *\n     * @param method {String} HTTP method to respond to, e.g. \"GET\"\n     * @param urlRegExp {RegExp} Request URL must match match this expression\n     * @param response {Function|Array|String} Response to send. See\n     * <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.\n     */\n    respondWith : function(method, urlRegExp, response) {\n      this.getFakeServer().respondWith(method, urlRegExp, response);\n    },\n\n\n    /**\n     * Creates and configures a FakeServer if necessary and returns it.\n\n     * @return {Object} FakeServer object\n     */\n    getFakeServer : function() {\n      if (!this.__fakeServer) {\n        var sinon = this.__sinon = qx.dev.unit.Sinon.getSinon();\n        sinon.FakeXMLHttpRequest.useFilters = true;\n        this.__fakeServer = sinon.sandbox.useFakeServer();\n        this.__fakeServer.autoRespond = true;\n      }\n      return this.__fakeServer;\n    },\n\n\n    /**\n     * Stops the FakeServer and removes all configured responses and/or filters.\n     */\n    restore : function() {\n      this.__responses = [];\n      this.removeFilter(this.__filter);\n      this.__filter = null;\n      this.__fakeServer.restore();\n      this.__fakeServer = null;\n    },\n\n\n    /**\n     * Returns a RegExp using the given pattern. Curly brackets and anything\n     * between are replaced with wildcards (.*?)\n     *\n     * @param pattern {String} RegExp pattern\n     * @return {RegExp} Regular Expression\n     */\n    _getRegExp : function(pattern) {\n      pattern = pattern.replace(/\\{[^\\/]*?\\}/g, \".*?\");\n      return new RegExp(pattern);\n    },\n\n\n    /**\n     * Returns a filter function that ensures only requests matching configured\n     * fake responses will be intercepted.\n     * @return {Function} filter function\n     */\n    __getCombinedFilter : function() {\n      var responses = this.__responses;\n      return function(method, url, async, username, password) {\n        for (var i=0, l=responses.length; i<l; i++) {\n          var filterMethod = responses[i][0];\n          var regExp = responses[i][1];\n          if (method == filterMethod && regExp.test(url)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n  },\n\n  destruct: function() {\n    this.restore();\n    this.__fakeServer = this.__sinon = null;\n  }\n\n});\n"
  ]
}