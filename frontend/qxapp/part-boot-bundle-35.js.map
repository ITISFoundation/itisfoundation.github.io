{
  "version": 3,
  "sources": [
    "../transpiled/qx/data/marshal/IMarshaler.js",
    "../transpiled/qx/data/marshal/Json.js",
    "../transpiled/qx/data/controller/MSelection.js",
    "../transpiled/qx/data/controller/List.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/qxapp/part-boot-bundle-35.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * Defines the methods needed by every marshaler which should work with the\n * qooxdoo data stores.\n */\nqx.Interface.define(\"qx.data.marshal.IMarshaler\",\n{\n  members :\n  {\n    /**\n     * Creates for the given data the needed classes. The classes contain for\n     * every key in the data a property. The classname is always the prefix\n     * <code>qx.data.model</code>. Two objects containing the same keys will not\n     * create two different classes.\n     *\n     * @param data {Object} The object for which classes should be created.\n     * @param includeBubbleEvents {Boolean} Whether the model should support\n     *   the bubbling of change events or not.\n     */\n    toClass : function(data, includeBubbleEvents) {},\n\n\n    /**\n     * Creates for the given data the needed models. Be sure to have the classes\n     * created with {@link #toClass} before calling this method.\n     *\n     * @param data {Object} The object for which models should be created.\n     *\n     * @return {qx.core.Object} The created model object.\n     */\n    toModel : function(data) {}\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This class is responsible for converting json data to class instances\n * including the creation of the classes.\n * To retrieve the native data of created models use the methods\n *   described in {@link qx.util.Serializer}.\n */\nqx.Class.define(\"qx.data.marshal.Json\",\n{\n  extend : qx.core.Object,\n  implement : [qx.data.marshal.IMarshaler],\n\n  /**\n   * @param delegate {Object} An object containing one of the methods described\n   *   in {@link qx.data.marshal.IMarshalerDelegate}.\n   */\n  construct : function(delegate)\n  {\n    this.base(arguments);\n\n    this.__delegate = delegate;\n  },\n\n  statics :\n  {\n    $$instance : null,\n\n    /**\n     * Creates a qooxdoo object based on the given json data. This function\n     * is just a static wrapper. If you want to configure the creation\n     * process of the class, use {@link qx.data.marshal.Json} directly.\n     *\n     * @param data {Object} The object for which classes should be created.\n     * @param includeBubbleEvents {Boolean} Whether the model should support\n     *   the bubbling of change events or not.\n     *\n     * @return {qx.core.Object} An instance of the corresponding class.\n     */\n    createModel : function(data, includeBubbleEvents) {\n      // singleton for the json marshaler\n      if (this.$$instance === null) {\n        this.$$instance = new qx.data.marshal.Json();\n      }\n      // be sure to create the classes first\n      this.$$instance.toClass(data, includeBubbleEvents);\n      // return the model\n      return this.$$instance.toModel(data);\n    },\n    \n    /**\n     * Legacy json hash method used as default in Qooxdoo < v6.0.\n     * You can go back to the old behaviour like this:\n     * \n     * <code>\n     *  var marshaller = new qx.data.marshal.Json({\n     *   getJsonHash: qx.data.marshal.Json.legacyJsonHash\n     *  });\n     * </code>\n     */\n    legacyJsonHash: function (data, includeBubbleEvents) {\n      return Object.keys(data).sort().join('\"')\n        + (includeBubbleEvents===true ? \"♥\" : \"\");\n    }\n  },\n\n\n  members :\n  {\n    __delegate : null,\n\n\n    /**\n     * Converts a given object into a hash which will be used to identify the\n     * classes under the namespace <code>qx.data.model</code>.\n     *\n     * @param data {Object} The JavaScript object from which the hash is\n     *   required.\n     * @param includeBubbleEvents {Boolean?false} Whether the model should\n     *   support the bubbling of change events or not.\n     * @return {String} The hash representation of the given JavaScript object.\n     */\n    __jsonToHash : function (data, includeBubbleEvents)\n    {\n      if (this.__delegate && this.__delegate.getJsonHash) {\n        return this.__delegate.getJsonHash(data, includeBubbleEvents);\n      }\n      return Object.keys(data).sort().join('|')\n           + (includeBubbleEvents===true ? \"♥\" : \"\");\n    },\n\n\n    /**\n     * Get the \"most enhanced\" hash for a given object.  That is the hash for\n     * the class that is most feature rich in respect of the bubble event\n     * feature. If there are two equal classes available (defined), one with\n     * and one without the bubble event feature, this method will return the\n     * hash of the class that includes the bubble event.\n     *\n     * @param data {Object} The JavaScript object from which the hash is\n     *   required.\n     * @param includeBubbleEvents {Boolean} Whether the preferred model should\n     *   support the bubbling of change events or not.\n     *   If <code>null</code>, an automatic selection will take place which\n     *   selects the \"best\" model currently available.\n     * @return {String} The hash representation of the given JavaScript object.\n     */\n    __jsonToBestHash : function (data, includeBubbleEvents)\n    {\n      // forced mode?\n      //\n      if (includeBubbleEvents === true) {\n        return this.__jsonToHash(data, true);\n      }\n      if (includeBubbleEvents === false) {\n        return this.__jsonToHash(data, false);\n      }\n\n      // automatic mode!\n      //\n      var hash = this.__jsonToHash(data); // without bubble event feature\n      var bubbleClassHash = hash + \"♥\";   // with bubble event feature\n      var bubbleClassName = \"qx.data.model.\" + bubbleClassHash;\n\n      // In case there's a class with bubbling, we *always* prefer that one!\n      return qx.Class.isDefined(bubbleClassName) ? bubbleClassHash : hash;\n    },\n\n\n    /**\n     * Creates for the given data the needed classes. The classes contain for\n     * every key in the data a property. The classname is always the prefix\n     * <code>qx.data.model</code> and the hash of the data created by\n     * {@link #__jsonToHash}. Two objects containing the same keys will not\n     * create two different classes. The class creation process also supports\n     * the functions provided by its delegate.\n     *\n     * Important, please keep in mind that only valid JavaScript identifiers\n     * can be used as keys in the data map. For convenience '-' in keys will\n     * be removed (a-b will be ab in the end).\n     *\n     * @see qx.data.store.IStoreDelegate\n     *\n     * @param data {Object} The object for which classes should be created.\n     * @param includeBubbleEvents {Boolean} Whether the model should support\n     *   the bubbling of change events or not.\n     */\n    toClass: function(data, includeBubbleEvents) {\n      this.__toClass(data, includeBubbleEvents, null, 0);\n    },\n\n\n    /**\n     * Implementation of {@link #toClass} used for recursion.\n     *\n     * @param data {Object} The object for which classes should be created.\n     * @param includeBubbleEvents {Boolean} Whether the model should support\n     *   the bubbling of change events or not.\n     * @param parentProperty {String|null} The name of the property the\n     *   data will be stored in.\n     * @param depth {Number} The depth of the data relative to the data's root.\n     */\n    __toClass : function(data, includeBubbleEvents, parentProperty, depth) {\n      // break on all primitive json types and qooxdoo objects\n      if (\n        !qx.lang.Type.isObject(data)\n        || !!data.$$isString // check for localized strings\n        || data instanceof qx.core.Object\n      ) {\n        // check for arrays\n        if (data instanceof Array || qx.Bootstrap.getClass(data) == \"Array\") {\n          for (var i = 0; i < data.length; i++) {\n            this.__toClass(data[i], includeBubbleEvents, parentProperty + \"[\" + i + \"]\", depth+1);\n          }\n        }\n\n        // ignore arrays and primitive types\n        return;\n      }\n\n      var hash = this.__jsonToHash(data, includeBubbleEvents);\n\n      // ignore rules\n      if (this.__ignore(hash, parentProperty, depth)) {\n        return;\n      }\n\n      // check for the possible child classes\n      for (var key in data) {\n        this.__toClass(data[key], includeBubbleEvents, key, depth+1);\n      }\n\n      // class already exists\n      if (qx.Class.isDefined(\"qx.data.model.\" + hash)) {\n        return;\n      }\n\n      // class is defined by the delegate\n      if (\n        this.__delegate\n        && this.__delegate.getModelClass\n        && this.__delegate.getModelClass(hash, data, parentProperty, depth) != null\n      ) {\n        return;\n      }\n\n      // create the properties map\n      var properties = {};\n      // include the disposeItem for the dispose process.\n      var members = {__disposeItem : this.__disposeItem};\n      for (var key in data) {\n        // apply the property names mapping\n        if (this.__delegate && this.__delegate.getPropertyMapping) {\n          key = this.__delegate.getPropertyMapping(key, hash);\n        }\n\n        // strip the unwanted characters\n        key = key.replace(/-|\\.|\\s+/g, \"\");\n        // check for valid JavaScript identifier (leading numbers are ok)\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.assertTrue((/^[$0-9A-Za-z_]*$/).test(key),\n          \"The key '\" + key + \"' is not a valid JavaScript identifier.\");\n        }\n\n        properties[key] = {};\n        properties[key].nullable = true;\n        properties[key].event = \"change\" + qx.lang.String.firstUp(key);\n        // bubble events\n        if (includeBubbleEvents) {\n          properties[key].apply = \"_applyEventPropagation\";\n        }\n        // validation rules\n        if (this.__delegate && this.__delegate.getValidationRule) {\n          var rule = this.__delegate.getValidationRule(hash, key);\n          if (rule) {\n            properties[key].validate = \"_validate\" + key;\n            members[\"_validate\" + key] = rule;\n          }\n        }\n      }\n\n      // try to get the superclass, qx.core.Object as default\n      if (this.__delegate && this.__delegate.getModelSuperClass) {\n        var superClass =\n          this.__delegate.getModelSuperClass(hash, parentProperty, depth) || qx.core.Object;\n      } else {\n        var superClass = qx.core.Object;\n      }\n\n      // try to get the mixins\n      var mixins = [];\n      if (this.__delegate && this.__delegate.getModelMixins) {\n        var delegateMixins = this.__delegate.getModelMixins(hash, parentProperty, depth);\n        // check if its an array\n        if (!qx.lang.Type.isArray(delegateMixins)) {\n          if (delegateMixins != null) {\n            mixins = [delegateMixins];\n          }\n        } else {\n          mixins = delegateMixins;\n        }\n      }\n\n      // include the mixin for the event bubbling\n      if (includeBubbleEvents) {\n        mixins.push(qx.data.marshal.MEventBubbling);\n      }\n\n      // create the map for the class\n      var newClass = {\n        extend : superClass,\n        include : mixins,\n        properties : properties,\n        members : members\n      };\n\n      qx.Class.define(\"qx.data.model.\" + hash, newClass);\n    },\n\n\n    /**\n     * Helper for disposing items of the created class.\n     *\n     * @param item {var} The item to dispose.\n     */\n    __disposeItem : function(item) {\n      if (!(item instanceof qx.core.Object)) {\n        // ignore all non objects\n        return;\n      }\n      // ignore already disposed items (could happen during shutdown)\n      if (item.isDisposed()) {\n        return;\n      }\n      item.dispose();\n    },\n\n\n    /**\n     * Creates an instance for the given data hash.\n     *\n     * @param hash {String} The hash of the data for which an instance should\n     *   be created.\n     * @param parentProperty {String|null} The name of the property the data\n     *   will be stored in.\n     * @param depth {Number} The depth of the object relative to the data root.\n     * @param data {Map} The data for which an instance should be created.\n     * @return {qx.core.Object} An instance of the corresponding class.\n     */\n    __createInstance : function (hash, data, parentProperty, depth)\n    {\n      var delegateClass;\n      // get the class from the delegate\n      if (this.__delegate && this.__delegate.getModelClass) {\n        delegateClass = this.__delegate.getModelClass(hash, data, parentProperty, depth);\n      }\n      if (delegateClass != null) {\n        return (new delegateClass());\n      } else {\n        var className = \"qx.data.model.\" + hash;\n        var clazz = qx.Class.getByName(className);\n        if (!clazz)\n        {\n          // Extra check for possible bubble-event feature inconsistency\n          var noBubbleClassName = className.replace(\"♥\", \"\");\n          if (qx.Class.getByName(noBubbleClassName))\n          {\n            throw new Error( \"Class '\" + noBubbleClassName + \"' found, \" +\n                             \"but it does not support changeBubble event.\" );\n          }\n          throw new Error(\"Class '\" + className + \"' could not be found.\");\n        }\n        return (new clazz());\n      }\n    },\n\n\n    /**\n     * Helper to decide if the delegate decides to ignore a data set.\n     * @param hash {String} The property names.\n     * @param parentProperty {String|null} The name of the property the data\n     *   will be stored in.\n     * @param depth {Number} The depth of the object relative to the data root.\n     * @return {Boolean} <code>true</code> if the set should be ignored\n     */\n    __ignore : function(hash, parentProperty, depth) {\n      var del = this.__delegate;\n      return del && del.ignore && del.ignore(hash, parentProperty, depth);\n    },\n\n\n    /**\n     * Creates for the given data the needed models. Be sure to have the classes\n     * created with {@link #toClass} before calling this method. The creation\n     * of the class itself is delegated to the {@link #__createInstance} method,\n     * which could use the {@link qx.data.store.IStoreDelegate} methods, if\n     * given.\n     *\n     * @param data {Object} The object for which models should be created.\n     * @param includeBubbleEvents {Boolean?null} Whether the model should\n     *   support the bubbling of change events or not.\n     *   If omitted or <code>null</code>, an automatic selection will take place\n     *   which selects the \"best\" model currently available.\n     * @return {qx.core.Object} The created model object.\n     */\n    toModel : function (data, includeBubbleEvents) {\n      return this.__toModel(data, includeBubbleEvents, null, 0);\n    },\n\n\n    /**\n     * Implementation of {@link #toModel} used for recursion.\n     *\n     * @param data {Object} The object for which models should be created.\n     * @param includeBubbleEvents {Boolean|null} Whether the model should\n     *   support the bubbling of change events or not.\n     *   If <code>null</code>, an automatic selection will take place which\n     *   selects the \"best\" model currently available.\n     * @param parentProperty {String|null} The name of the property the\n     *   data will be stored in.\n     * @param depth {Number} The depth of the data relative to the data's root.\n     * @return {qx.core.Object} The created model object.\n     */\n    __toModel : function (data, includeBubbleEvents, parentProperty, depth)\n    {\n      var isObject = qx.lang.Type.isObject(data);\n      var isArray = data instanceof Array || qx.Bootstrap.getClass(data) == \"Array\";\n\n      if (\n        (!isObject && !isArray)\n        || !!data.$$isString // check for localized strings\n        || data instanceof qx.core.Object\n      ) {\n        return data;\n\n      // ignore rules\n      } else if (this.__ignore(this.__jsonToBestHash(data, includeBubbleEvents), parentProperty, depth)) {\n        return data;\n\n      } else if (isArray) {\n        var arrayClass = qx.data.Array;\n        if (this.__delegate && this.__delegate.getArrayClass) {\n          var customArrayClass = this.__delegate.getArrayClass(parentProperty, depth);\n          arrayClass = customArrayClass || arrayClass;\n        }\n\n        var array = new arrayClass();\n        // set the auto dispose for the array\n        array.setAutoDisposeItems(true);\n\n        for (var i = 0; i < data.length; i++) {\n          array.push(this.__toModel(data[i], includeBubbleEvents, parentProperty + \"[\" + i + \"]\", depth+1));\n        }\n        return array;\n\n      } else if (isObject) {\n        // create an instance for the object\n        var hash = this.__jsonToBestHash(data, includeBubbleEvents);\n        var model = this.__createInstance(hash, data, parentProperty, depth);\n\n        // go threw all element in the data\n        for (var key in data) {\n          // apply the property names mapping\n          var propertyName = key;\n          if (this.__delegate && this.__delegate.getPropertyMapping) {\n            propertyName = this.__delegate.getPropertyMapping(key, hash);\n          }\n          var propertyNameReplaced = propertyName.replace(/-|\\.|\\s+/g, \"\");\n          // warn if there has been a replacement\n          if (\n            (qx.core.Environment.get(\"qx.debug\")) &&\n            qx.core.Environment.get(\"qx.debug.databinding\")\n          ) {\n            if (propertyNameReplaced != propertyName) {\n              this.warn(\n                \"The model contained an illegal name: '\" + key +\n                \"'. Replaced it with '\" + propertyName + \"'.\"\n              );\n            }\n          }\n          propertyName = propertyNameReplaced;\n          // only set the properties if they are available [BUG #5909]\n          var setterName = \"set\" + qx.lang.String.firstUp(propertyName);\n          if (model[setterName]) {\n            model[setterName](this.__toModel(data[key], includeBubbleEvents, key, depth+1));\n          }\n        }\n        return model;\n      }\n\n      throw new Error(\"Unsupported type!\");\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Mixin for the selection in the data binding controller.\n * It contains an selection property which can be manipulated.\n * Remember to call the method {@link #_addChangeTargetListener} on every\n * change of the target.\n * It is also important that the elements stored in the target e.g. ListItems\n * do have the corresponding model stored as user data under the \"model\" key.\n */\nqx.Mixin.define(\"qx.data.controller.MSelection\",\n{\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    // check for a target property\n    if (!qx.Class.hasProperty(this.constructor, \"target\")) {\n      throw new Error(\"Target property is needed.\");\n    }\n\n    // create a default selection array\n    if (this.getSelection() == null) {\n      this.__ownSelection = new qx.data.Array();\n      this.setSelection(this.__ownSelection);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties : {\n    /**\n     * Data array containing the selected model objects. This property can be\n     * manipulated directly which means that a push to the selection will also\n     * select the corresponding element in the target.\n     */\n    selection :\n    {\n      check: \"qx.data.Array\",\n      event: \"changeSelection\",\n      apply: \"_applySelection\",\n      init: null\n    }\n  },\n\n\n  events : {\n    /**\n     * This event is fired as soon as the content of the selection property changes, but\n     * this is not equal to the change of the selection of the widget. If the selection\n     * of the widget changes, the content of the array stored in the selection property\n     * changes. This means you have to listen to the change event of the selection array\n     * to get an event as soon as the user changes the selected item.\n     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>\n     */\n    \"changeSelection\" : \"qx.event.type.Data\",\n\n    /** Fires after the value was modified */\n    \"changeValue\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // private members //\n    // set the semaphore-like variable for the selection change\n    _modifingSelection : 0,\n    __selectionListenerId : null,\n    __selectionArrayListenerId : null,\n    __ownSelection : null,\n\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param selection {qx.data.IListData|null} List data to select as value.\n     * @return {null} The status of this operation.\n     */\n    setValue : function(selection) {\n      if (null === selection) {\n        this.resetSelection();\n      } else {\n        this.setSelection(selection);\n      }\n\n      return null;\n    },\n\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @return {qx.data.IListData} The current selection.\n     */\n    getValue : function() {\n      return this.getSelection();\n    },\n\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue : function() {\n      this.resetSelection();\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Apply-method for setting a new selection array. Only the change listener\n     * will be removed from the old array and added to the new.\n     *\n     * @param value {qx.data.Array} The new data array for the selection.\n     * @param old {qx.data.Array|null} The old data array for the selection.\n     */\n    _applySelection: function(value, old) {\n      // remove the old listener if necessary\n      if (this.__selectionArrayListenerId != undefined && old != undefined) {\n        old.removeListenerById(this.__selectionArrayListenerId);\n        this.__selectionArrayListenerId = null;\n      }\n      // add a new change listener to the changeArray\n      if (value) {\n        this.__selectionArrayListenerId = value.addListener(\n          \"change\", this.__changeSelectionArray, this\n        );\n      }\n\n      // apply the new selection\n      this._updateSelection();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the change of the data array holding the selection.\n     * If a change is in the selection array, the selection update will be\n     * invoked.\n     */\n    __changeSelectionArray: function() {\n      this._updateSelection();\n    },\n\n\n    /**\n     * Event handler for a change in the target selection.\n     * If the selection in the target has changed, the selected model objects\n     * will be found and added to the selection array.\n     */\n    _changeTargetSelection: function() {\n      // dont do anything without a target\n      if (this.getTarget() == null) {\n        return;\n      }\n\n      // if a selection API is supported\n      if (!this.__targetSupportsMultiSelection()\n        && !this.__targetSupportsSingleSelection()) {\n        return;\n      }\n\n      // if __changeSelectionArray is currently working, do nothing\n      if (this._inSelectionModification()) {\n        return;\n      }\n\n      // get both selections\n      var targetSelection = this.getTarget().getSelection();\n      var selection = this.getSelection();\n      if (selection == null) {\n        selection = new qx.data.Array();\n        this.__ownSelection = selection;\n        this.setSelection(selection);\n      }\n\n      // go through the target selection\n      var spliceArgs = [0, selection.getLength()];\n      for (var i = 0; i < targetSelection.length; i++) {\n        var model = targetSelection[i].getModel();\n        if (model !== null) {\n          spliceArgs.push(model);\n        }\n      }\n      // use splice to ensure a correct change event [BUG #4728]\n      selection.splice.apply(selection, spliceArgs).dispose();\n\n      // fire the change event manually\n      this.fireDataEvent(\"changeSelection\", this.getSelection());\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       SELECTION\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method which should be called by the classes including this\n     * Mixin when the target changes.\n     *\n     * @param value {qx.ui.core.Widget|null} The new target.\n     * @param old {qx.ui.core.Widget|null} The old target.\n     */\n    _addChangeTargetListener: function(value, old) {\n      // remove the old selection listener\n      if (this.__selectionListenerId != undefined && old != undefined) {\n        old.removeListenerById(this.__selectionListenerId);\n      }\n\n      if (value != null) {\n        // if a selection API is supported\n        if (\n          this.__targetSupportsMultiSelection()\n          || this.__targetSupportsSingleSelection()\n        ) {\n          // add a new selection listener\n          this.__selectionListenerId = value.addListener(\n            \"changeSelection\", this._changeTargetSelection, this\n          );\n        }\n      }\n    },\n\n\n    /**\n     * Method for updating the selection. It checks for the case of single or\n     * multi selection and after that checks if the selection in the selection\n     * array is the same as in the target widget.\n     */\n    _updateSelection: function() {\n      // do not update if no target is given\n      if (!this.getTarget() || !this.getSelection()) {\n        return;\n      }\n      // mark the change process in a flag\n      this._startSelectionModification();\n\n      // if its a multi selection target\n      if (this.__targetSupportsMultiSelection()) {\n\n        var targetSelection = [];\n        // go through the selection array\n        for (var i = 0; i < this.getSelection().length; i++) {\n          // store each item\n          var model = this.getSelection().getItem(i);\n          var selectable = this.__getSelectableForModel(model);\n          if (selectable != null) {\n            targetSelection.push(selectable);\n          }\n        }\n        this.getTarget().setSelection(targetSelection);\n\n        // get the selection of the target\n        targetSelection = this.getTarget().getSelection();\n        // get all items selected in the list\n        var targetSelectionItems = [];\n        for (var i = 0; i < targetSelection.length; i++) {\n          targetSelectionItems[i] = targetSelection[i].getModel();\n        }\n\n        // go through the controller selection\n        for (var i = this.getSelection().length - 1; i >= 0; i--) {\n          // if the item in the controller selection is not selected in the list\n          if (!targetSelectionItems.includes(this.getSelection().getItem(i))) {\n            // remove the current element and get rid of the return array\n            this.getSelection().splice(i, 1).dispose();\n          }\n        }\n\n      // if its a single selection target\n      } else if (this.__targetSupportsSingleSelection()) {\n        // get the model which should be selected\n        var item = this.getSelection().getItem(this.getSelection().length - 1);\n        if (item !== undefined) {\n          // select the last selected item (old selection will be removed anyway)\n          this.__selectItem(item);\n          // remove the other items from the selection data array and get\n          // rid of the return array\n          this.getSelection().splice(\n            0, this.getSelection().getLength() - 1\n          ).dispose();\n        } else {\n          // if there is no item to select (e.g. new model set [BUG #4125]),\n          // reset the selection\n          this.getTarget().resetSelection();\n        }\n\n      }\n\n      // reset the changing flag\n      this._endSelectionModification();\n      this.fireDataEvent(\"changeValue\", this.getSelection());\n    },\n\n\n    /**\n     * Helper-method returning true, if the target supports multi selection.\n     * @return {Boolean} true, if the target supports multi selection.\n     */\n    __targetSupportsMultiSelection: function() {\n      var targetClass = this.getTarget().constructor;\n      return qx.Class.implementsInterface(targetClass, qx.ui.core.IMultiSelection);\n    },\n\n\n    /**\n     * Helper-method returning true, if the target supports single selection.\n     * @return {Boolean} true, if the target supports single selection.\n     */\n    __targetSupportsSingleSelection: function() {\n      var targetClass = this.getTarget().constructor;\n      return qx.Class.implementsInterface(targetClass, qx.ui.core.ISingleSelection);\n    },\n\n\n    /**\n     * Internal helper for selecting an item in the target. The item to select\n     * is defined by a given model item.\n     *\n     * @param item {qx.core.Object} A model element.\n     */\n    __selectItem: function(item) {\n      var selectable = this.__getSelectableForModel(item);\n      // if no selectable could be found, just return\n      if (selectable == null) {\n        return;\n      }\n      // if the target is multi selection able\n      if (this.__targetSupportsMultiSelection()) {\n        // select the item in the target\n        this.getTarget().addToSelection(selectable);\n      // if the target is single selection able\n      } else if (this.__targetSupportsSingleSelection()) {\n        this.getTarget().setSelection([selectable]);\n      }\n    },\n\n\n    /**\n     * Returns the list item storing the given model in its model property.\n     *\n     * @param model {var} The representing model of a selectable.\n     * @return {Object|null} List item or <code>null</code> if none was found\n     */\n    __getSelectableForModel : function(model)\n    {\n      // get all list items\n      var children = this.getTarget().getSelectables(true);\n\n      // go through all children and search for the child to select\n      for (var i = 0; i < children.length; i++) {\n        if (children[i].getModel() == model) {\n          return children[i];\n        }\n      }\n      // if no selectable was found\n      return null;\n    },\n\n\n    /**\n     * Helper-Method signaling that currently the selection of the target is\n     * in change. That will block the change of the internal selection.\n     * {@link #_endSelectionModification}\n     */\n    _startSelectionModification: function() {\n      this._modifingSelection++;\n    },\n\n\n    /**\n     * Helper-Method signaling that the internal changing of the targets\n     * selection is over.\n     * {@link #_startSelectionModification}\n     */\n    _endSelectionModification: function() {\n      this._modifingSelection > 0 ? this._modifingSelection-- : null;\n    },\n\n\n    /**\n     * Helper-Method for checking the state of the selection modification.\n     * {@link #_startSelectionModification}\n     * {@link #_endSelectionModification}\n     * @return {Boolean} <code>true</code> if selection modification is active\n     */\n    _inSelectionModification: function() {\n      return this._modifingSelection > 0;\n    }\n\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (this.__ownSelection) {\n      this.__ownSelection.dispose();\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n\n/**\n * <h2>List Controller</h2>\n *\n * *General idea*\n * The list controller is responsible for synchronizing every list like widget\n * with a data array. It does not matter if the array contains atomic values\n * like strings of complete objects where one property holds the value for\n * the label and another property holds the icon url. You can even use converters\n * that make the label show a text corresponding to the icon, by binding both\n * label and icon to the same model property and converting one of them.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Label and icon are bindable\n * * Takes care of the selection\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n *\n * *Usage*\n *\n * As model, only {@link qx.data.Array}s do work. The currently supported\n * targets are\n *\n * * {@link qx.ui.form.SelectBox}\n * * {@link qx.ui.form.List}\n * * {@link qx.ui.form.ComboBox}\n *\n * All the properties like model, target or any property path is bindable.\n * Especially the model is nice to bind to another selection for example.\n * The controller itself can only work if it has a model and a target set. The\n * rest of the properties may be empty.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.List\",\n{\n  extend : qx.core.Object,\n  include: qx.data.controller.MSelection,\n  implement : qx.data.controller.ISelection,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.data.Array?null} The array containing the data.\n   *\n   * @param target {qx.ui.core.Widget?null} The widget which should show the\n   *   ListItems.\n   *\n   * @param labelPath {String?null} If the model contains objects, the labelPath\n   *   is the path reference to the property in these objects which should be\n   *   shown as label.\n   */\n  construct : function(model, target, labelPath)\n  {\n    this.base(arguments);\n\n    // lookup table for filtering and sorting\n    this.__lookupTable = [];\n\n    // register for bound target properties and onUpdate methods\n    // from the binding options\n    this.__boundProperties = [];\n    this.__boundPropertiesReverse = [];\n    this.__onUpdate = {};\n\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Data array containing the data which should be shown in the list. */\n    model :\n    {\n      check: \"qx.data.IListData\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n\n    /** The target widget which should show the data. */\n    target :\n    {\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as a label. This is only needed if objects are stored in the model.\n     */\n    labelPath :\n    {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon. This is only needed if objects are stored in the model\n     * and if the icon should be shown.\n     */\n    iconPath :\n    {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions :\n    {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions :\n    {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link IControllerDelegate} interface.\n     */\n    delegate :\n    {\n      apply: \"_applyDelegate\",\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    },\n    \n    /**\n     * Whether a special \"null\" value is included in the list\n     */\n    allowNull :\n    {\n      apply: \"_applyAllowNull\",\n      event: \"changeAllowNull\",\n      init: false,\n      nullable: false,\n      check: \"Boolean\"\n    },\n    \n    /**\n     * Title for the special null value entry\n     */\n    nullValueTitle:\n    {\n      apply: \"_applyNullValueTitle\",\n      event: \"changeNullValueTitle\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n    \n    /**\n     * Icon for the special null value entry\n     */\n    nullValueIcon:\n    {\n      apply: \"_applyNullValueIcon\",\n      event: \"changeNullValueIcon\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // private members\n    __changeModelListenerId : null,\n    __lookupTable : null,\n    __onUpdate : null,\n    __boundProperties : null,\n    __boundPropertiesReverse : null,\n    __syncTargetSelection : null,\n    __syncModelSelection : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Updates the filter and the target. This could be used if the filter\n     * uses an additional parameter which changes the filter result.\n     */\n    update: function() {\n      this.__changeModelLength();\n      this.__renewBindings();\n\n      this._updateSelection();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * If a new delegate is set, it applies the stored configuration for the\n     * list items to the already created list items once.\n     *\n     * @param value {qx.core.Object|null} The new delegate.\n     * @param old {qx.core.Object|null} The old delegate.\n     */\n    _applyDelegate: function(value, old) {\n      this._setConfigureItem(value, old);\n      this._setFilter(value, old);\n      this._setCreateItem(value, old);\n      this._setBindItem(value, old);\n    },\n\n\n    /**\n     * Apply-method which will be called if the icon options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new icon options.\n     * @param old {Map|null} The old icon options.\n     */\n    _applyIconOptions: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called if the label options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new label options.\n     * @param old {Map|null} The old label options.\n     */\n    _applyLabelOptions: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called if the icon path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new icon path.\n     * @param old {String|null} The old icon path.\n     */\n    _applyIconPath: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called if the label path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new label path.\n     * @param old {String|null} The old label path.\n     */\n    _applyLabelPath: function(value, old) {\n      this.__renewBindings();\n    },\n\n    \n    /**\n     * Apply method for the `allowNull` property \n     */\n    _applyAllowNull: function(value, oldValue) {\n      this.__refreshModel();\n    },\n    \n    /**\n     * Apply method for the `allowNull` property \n     */\n    _applyNullValueTitle: function(value, oldValue) {\n      this.__refreshModel();\n    },\n    \n    /**\n     * Apply method for the `allowNull` property \n     */\n    _applyNullValueIcon: function(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Refreshes the model, uses when the model and target are not changing but the appearance\n     * and bindings may need to be updated\n     */\n    __refreshModel: function() {\n      if (this.getModel() && this.getTarget()) {\n        this.update();\n      }\n    },\n\n\n    /**\n     * Apply-method which will be called if the model has been changed. It\n     * removes all the listeners from the old model and adds the needed\n     * listeners to the new model. It also invokes the initial filling of the\n     * target widgets if there is a target set.\n     *\n     * @param value {qx.data.Array|null} The new model array.\n     * @param old {qx.data.Array|null} The old model array.\n     */\n    _applyModel: function(value, old) {\n      // remove the old listener\n      if (old != undefined) {\n        if (this.__changeModelListenerId != undefined) {\n          old.removeListenerById(this.__changeModelListenerId);\n        }\n      }\n\n      // erase the selection if there is something selected\n      if (this.getSelection() != undefined && this.getSelection().length > 0) {\n        this.getSelection().splice(0, this.getSelection().length).dispose();\n      }\n\n      // if a model is set\n      if (value != null) {\n        // add a new listener\n        this.__changeModelListenerId =\n          value.addListener(\"change\", this.__changeModel, this);\n\n        // renew the index lookup table\n        this.__buildUpLookupTable();\n        // check for the new length\n        this.__changeModelLength();\n\n        // as we only change the labels of the items, the selection change event\n        // may be missing so we invoke it here\n        if (old == null) {\n          this._changeTargetSelection();\n        } else {\n          // update the selection asynchronously\n          this.__syncTargetSelection = true;\n          qx.ui.core.queue.Widget.add(this);\n        }\n      } else {\n        var target = this.getTarget();\n        // if the model is set to null, we should remove all items in the target\n        if (target != null) {\n          // we need to remove the bindings too so use the controller method\n          // for removing items\n          var length = target.getChildren().length;\n          for (var i = 0; i < length; i++) {\n            this.__removeItem();\n          };\n        }\n      }\n    },\n\n\n    /**\n     * Apply-method which will be called if the target has been changed.\n     * When the target changes, every binding needs to be reset and the old\n     * target needs to be cleaned up. If there is a model, the target will be\n     * filled with the data of the model.\n     *\n     * @param value {qx.ui.core.Widget|null} The new target.\n     * @param old {qx.ui.core.Widget|null} The old target.\n     */\n    _applyTarget: function(value, old) {\n      // add a listener for the target change\n      this._addChangeTargetListener(value, old);\n\n      // if there was an old target\n      if (old != undefined) {\n        // remove all element of the old target\n        var removed = old.removeAll();\n        for (var i=0; i<removed.length; i++) {\n          removed[i].destroy();\n        }\n        // remove all bindings\n        this.removeAllBindings();\n      }\n\n      if (value != null) {\n        if (this.getModel() != null) {\n          // add a binding for all elements in the model\n          for (var i = 0; i < this.__lookupTable.length; i++) {\n            this.__addItem(this.__lookup(i));\n          }\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the change event of the model. If the model changes,\n     * Only the selection needs to be changed. The change of the data will\n     * be done by the binding.\n     */\n    __inChangeModel: false,\n\n    /**\n     * Event handler for the changeModel of the model. Updates the controller.\n     */\n    __changeModel: function() {\n      if (this.__inChangeModel) {\n        return;\n      }\n\n      this.__inChangeModel = true;\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      // this.__syncTargetSelection = true;\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n\n      // update on filtered lists... (bindings need to be renewed)\n      this.update();\n      this.__inChangeModel = false;\n    },\n\n\n    /**\n     * Internal method used to sync the selection. The controller uses the\n     * widget queue to schedule the selection update. An asynchronous handling of\n     * the selection is needed because the bindings (event listeners for the\n     * binding) need to be executed before the selection is updated.\n     * @internal\n     */\n    syncWidget : function()\n    {\n      if (this.__syncTargetSelection) {\n        this._changeTargetSelection();\n      }\n      if (this.__syncModelSelection) {\n        this._updateSelection();\n      }\n      this.__syncModelSelection = this.__syncTargetSelection = null;\n    },\n\n\n    /**\n     * Event handler for the changeLength of the model. If the length changes\n     * of the model, either ListItems need to be removed or added to the target.\n     */\n    __changeModelLength: function() {\n      // only do something if there is a target\n      if (this.getTarget() == null) {\n        return;\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // get the length\n      var newLength = this.__lookupTable.length;\n      var currentLength = this.getTarget().getChildren().length;\n\n      // if there are more item\n      if (newLength > currentLength) {\n        // add the new elements\n        for (var j = currentLength; j < newLength; j++) {\n          this.__addItem(this.__lookup(j));\n        }\n      // if there are less elements\n      } else if (newLength < currentLength) {\n        // remove the unnecessary items\n        for (var j = currentLength; j > newLength; j--) {\n          this.__removeItem();\n        }\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // sync the target selection in case someone deleted a item in\n      // selection mode \"one\" [BUG #4839]\n      this.__syncTargetSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /**\n     * Helper method which removes and adds the change listener of the\n     * controller to the model. This is sometimes necessary to ensure that the\n     * listener of the controller is executed as the last listener of the chain.\n     */\n    __moveChangeListenerAtTheEnd : function() {\n      var model = this.getModel();\n      // it can be that the bindings has been reset without the model so\n      // maybe there is no model in some scenarios\n      if (model != null) {\n        model.removeListenerById(this.__changeModelListenerId);\n        this.__changeModelListenerId =\n          model.addListener(\"change\", this.__changeModel, this);\n      }\n\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       ITEM HANDLING\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Creates a ListItem and delegates the configure method if a delegate is\n     * set and the needed function (configureItem) is available.\n     *\n     * @return {qx.ui.form.ListItem} The created and configured ListItem.\n     */\n    _createItem: function() {\n      var delegate = this.getDelegate();\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        var item = delegate.createItem();\n      } else {\n        var item = new qx.ui.form.ListItem();\n      }\n\n      // if there is a configure method, invoke it\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n      return item;\n    },\n\n\n    /**\n     * Internal helper to add ListItems to the target including the creation\n     * of the binding.\n     *\n     * @param index {Number} The index of the item to add.\n     */\n    __addItem: function(index) {\n      // create a new ListItem\n      var listItem = this._createItem();\n      // set up the binding\n      this._bindListItem(listItem, index);\n      // add the ListItem to the target\n      this.getTarget().add(listItem);\n    },\n\n\n    /**\n     * Internal helper to remove ListItems from the target. Also the binding\n     * will be removed properly.\n     */\n    __removeItem: function() {\n      this._startSelectionModification();\n      var children = this.getTarget().getChildren();\n      // get the last binding id\n      var index = children.length - 1;\n      // get the item\n      var oldItem = children[index];\n      this._removeBindingsFrom(oldItem);\n      // remove the item\n      this.getTarget().removeAt(index);\n      oldItem.destroy();\n      this._endSelectionModification();\n    },\n\n\n    /**\n     * Returns all models currently visible by the list. This method is only\n     * useful if you use the filter via the {@link #delegate}.\n     *\n     * @return {qx.data.Array} A new data array container all the models\n     *   which representation items are currently visible.\n     */\n    getVisibleModels : function()\n    {\n      var visibleModels = [];\n      var target = this.getTarget();\n      if (target != null) {\n        var items = target.getChildren();\n        for (var i = 0; i < items.length; i++) {\n          visibleModels.push(items[i].getModel());\n        };\n      }\n\n      return new qx.data.Array(visibleModels);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       BINDING STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Sets up the binding for the given ListItem and index.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    _bindListItem: function(item, index) {\n      // -1 is the special, \"null\" value item.  Nothing to bind, just fix the display and model\n      if (index < 0) {\n        item.setLabel(this.getNullValueTitle()||\"\");\n        item.setIcon(this.getNullValueIcon());\n        item.setModel(null);\n        return;\n      }\n      var delegate = this.getDelegate();\n      // if a delegate for creating the binding is given, use it\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, item, index);\n      // otherwise, try to bind the listItem by default\n      } else {\n        this.bindDefaultProperties(item, index);\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding the default properties (label, icon and model)\n     * from the model to the target widget.\n     *\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    bindDefaultProperties : function(item, index)\n    {\n      // model\n      this.bindProperty(\n        \"\", \"model\", null, item, index\n      );\n\n      // label\n      this.bindProperty(\n        this.getLabelPath(), \"label\", this.getLabelOptions(), item, index\n      );\n\n      // if the iconPath is set\n      if (this.getIconPath() != null) {\n        this.bindProperty(\n          this.getIconPath(), \"icon\", this.getIconOptions(), item, index\n        );\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetProperty {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options used by\n     *   {@link qx.data.SingleValueBinding#bind} to use for the binding.\n     * @param targetWidget {qx.ui.core.Widget} The target widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindProperty: function(sourcePath, targetProperty, options, targetWidget, index) {\n      // create the options for the binding containing the old options\n      // including the old onUpdate function\n      if (options != null) {\n        var options = qx.lang.Object.clone(options);\n        this.__onUpdate[targetProperty] = options.onUpdate;\n        delete options.onUpdate;\n      } else {\n        options = {};\n        this.__onUpdate[targetProperty] = null;\n      }\n      options.onUpdate =  qx.lang.Function.bind(this._onBindingSet, this, index);\n      options.ignoreConverter = \"model\";\n\n      // build up the path for the binding\n      var bindPath = \"model[\" + index + \"]\";\n      if (sourcePath != null && sourcePath != \"\") {\n        bindPath += \".\" + sourcePath;\n      }\n      // create the binding\n      var id = this.bind(bindPath, targetWidget, targetProperty, options);\n      targetWidget.setUserData(targetProperty + \"BindingId\", id);\n\n      // save the bound property\n      if (!this.__boundProperties.includes(targetProperty)) {\n        this.__boundProperties.push(targetProperty);\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourcePath {String} The name of the property in the target.\n     * @param options {Map | null} The options to use by\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param sourceWidget {qx.ui.core.Widget} The source widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindPropertyReverse: function(\n      targetPath, sourcePath, options, sourceWidget, index\n    ) {\n      // build up the path for the binding\n      var targetBindPath = \"model[\" + index + \"]\";\n      if (targetPath != null && targetPath != \"\") {\n        targetBindPath += \".\" + targetPath;\n      }\n      // create the binding\n      var id = sourceWidget.bind(sourcePath, this, targetBindPath, options);\n      sourceWidget.setUserData(targetPath + \"ReverseBindingId\", id);\n\n      // save the bound property\n      if (!this.__boundPropertiesReverse.includes(targetPath)) {\n        this.__boundPropertiesReverse.push(targetPath);\n      }\n    },\n\n\n    /**\n     * Method which will be called on the invoke of every binding. It takes\n     * care of the selection on the change of the binding.\n     *\n     * @param index {Number} The index of the current binding.\n     * @param sourceObject {qx.core.Object} The source object of the binding.\n     * @param targetObject {qx.core.Object} The target object of the binding.\n     */\n    _onBindingSet: function(index, sourceObject, targetObject) {\n      // ignore the binding set if the model is already set to null\n      if (this.getModel() == null || this._inSelectionModification()) {\n        return;\n      }\n\n      // go through all bound target properties\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        // if there is an onUpdate for one of it, invoke it\n        if (this.__onUpdate[this.__boundProperties[i]] != null) {\n          this.__onUpdate[this.__boundProperties[i]]();\n        }\n      }\n    },\n\n\n    /**\n     * Internal helper method to remove the binding of the given item.\n     *\n     * @param item {Number} The item of which the binding which should\n     *   be removed.\n     */\n    _removeBindingsFrom: function(item) {\n      // go through all bound target properties\n      for (var  i = 0; i < this.__boundProperties.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(this.__boundProperties[i] + \"BindingId\");\n        if (id != null) {\n          this.removeBinding(id);\n          item.setUserData(this.__boundProperties[i] + \"BindingId\", null);\n        }\n      }\n      // go through all reverse bound properties\n      for (var i = 0; i < this.__boundPropertiesReverse.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(this.__boundPropertiesReverse[i] + \"ReverseBindingId\");\n        if (id != null) {\n          item.removeBinding(id);\n          item.getUserData(this.__boundPropertiesReverse[i] + \"ReverseBindingId\", null);\n        }\n      };\n    },\n\n\n    /**\n     * Internal helper method to renew all set bindings.\n     */\n    __renewBindings: function() {\n      // ignore, if no target is set (startup)\n      if (this.getTarget() == null || this.getModel() == null) {\n        return;\n      }\n\n      // get all children of the target\n      var items = this.getTarget().getChildren();\n      // go through all items\n      for (var i = 0; i < items.length; i++) {\n        this._removeBindingsFrom(items[i]);\n        // add the new binding\n        this._bindListItem(items[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       DELEGATE HELPER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for applying the delegate It checks if a configureItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setConfigureItem: function(value, old) {\n      if (value != null && value.configureItem != null && this.getTarget() != null) {\n        var children = this.getTarget().getChildren();\n        for (var i = 0; i < children.length; i++) {\n          value.configureItem(children[i]);\n        }\n      }\n    },\n\n\n    /**\n     * Helper method for applying the delegate It checks if a bindItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setBindItem: function(value, old) {\n      // if a new bindItem function is set\n      if (value != null && value.bindItem != null) {\n        // do nothing if the bindItem function did not change\n        if (old != null && old.bindItem != null && value.bindItem == old.bindItem) {\n          return;\n        }\n        this.__renewBindings();\n      }\n    },\n\n\n    /**\n     * Helper method for applying the delegate It checks if a createItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setCreateItem: function(value, old) {\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.createItem == null\n      ) {\n        return;\n      }\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // remove all elements of the target\n      var removed = this.getTarget().removeAll();\n      for (var i=0; i<removed.length; i++) {\n        removed[i].destroy();\n      }\n\n      // update\n      this.update();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n\n    /**\n     * Apply-Method for setting the filter. It removes all bindings,\n     * check if the length has changed and adds or removes the items in the\n     * target. After that, the bindings will be set up again and the selection\n     * will be updated.\n     *\n     * @param value {Function|null} The new filter function.\n     * @param old {Function|null} The old filter function.\n     */\n    _setFilter: function(value, old) {\n      // update the filter if it has been removed\n      if ((value == null || value.filter == null) &&\n          (old != null && old.filter != null)) {\n        this.__removeFilter();\n      }\n\n      // check if it is necessary to do anything\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.filter == null\n      ) {\n        return;\n      }\n      // if yes, continue\n\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // store the old lookup table\n      var oldTable = this.__lookupTable;\n      // generate a new lookup table\n      this.__buildUpLookupTable();\n\n      // if there are lesser items\n      if (oldTable.length > this.__lookupTable.length) {\n        // remove the unnecessary items\n        for (var j = oldTable.length; j > this.__lookupTable.length; j--) {\n          this.getTarget().removeAt(j - 1).destroy();\n        }\n      // if there are more items\n      } else if (oldTable.length < this.__lookupTable.length) {\n        // add the new elements\n        for (var j = oldTable.length; j < this.__lookupTable.length; j++) {\n          var tempItem = this._createItem();\n          this.getTarget().add(tempItem);\n        }\n      }\n\n      // bind every list item again\n      var listItems = this.getTarget().getChildren();\n      for (var i = 0; i < listItems.length; i++) {\n        this._bindListItem(listItems[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n\n    /**\n     * This helper is responsible for removing the filter and setting the\n     * controller to a valid state without a filtering.\n     */\n    __removeFilter : function()\n    {\n      // renew the index lookup table\n      this.__buildUpLookupTable();\n      // check for the new length\n      this.__changeModelLength();\n      // renew the bindings\n      this.__renewBindings();\n\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       LOOKUP STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper-Method which builds up the index lookup for the filter feature.\n     * If no filter is set, the lookup table will be a 1:1 mapping.\n     */\n    __buildUpLookupTable: function() {\n      var model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      var delegate = this.getDelegate();\n      if (delegate != null) {\n        var filter = delegate.filter;\n      }\n\n      this.__lookupTable = [];\n      \n      // -1 is a special lookup value, to represent the \"null\" option \n      if (this.isAllowNull()) {\n        this.__lookupTable.push(-1);\n      }\n      for (var i = 0; i < model.getLength(); i++) {\n        if (filter == null || filter(model.getItem(i))) {\n          this.__lookupTable.push(i);\n        }\n      }\n    },\n\n\n    /**\n     * Function for accessing the lookup table.\n     *\n     * @param index {Integer} The index of the lookup table.\n     * @return {Number} Item index from lookup table\n     */\n    __lookup: function(index) {\n      return this.__lookupTable[index];\n    }\n  },\n\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n   destruct : function() {\n     this.__lookupTable = this.__onUpdate = this.__boundProperties = null;\n     this.__boundPropertiesReverse = null;\n\n     // remove yourself from the widget queue\n     qx.ui.core.queue.Widget.remove(this);\n   }\n});\n"
  ]
}