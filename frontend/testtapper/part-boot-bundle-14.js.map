{
  "version": 3,
  "sources": [
    "../transpiled/qx/io/rest/Resource.js"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAC,EAAA,EAAC,CAAC,SAAF,CAAY,oBAAZ,CAAiC,aAAjC;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA,EAAA,EAAC,CAAC,KAAF,CAAQ,MAAR,CAAe,qBAAf,EACA;AACC,IAAA,MAAM,EAAE,EAAE,CAAC,IAAH,CAAQ,MADjB;AAEC,IAAA,SAAS,EAAG,CAAE,EAAE,CAAC,IAAH,CAAQ,WAAV,CAFb;;AAIC;;;;;;;;;;;;;;;AAeA,IAAA,SAAS,EAAE,mBAAS,WAAT,EACX;AACE;AAEA,WAAK,kBAAL,GAA0B,EAA1B;AACA,WAAK,YAAL,GAAoB,EAApB;AACA,WAAK,QAAL,GAAgB,EAAhB;AAEA,WAAK,SAAL,GAAiB,KAAK,eAAL,CAAqB,KAAK,YAAL,EAArB,CAAjB;;AAEA,UAAI;AACF,YAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;AACG;AACvC,YAAA,EAAE,CAAC,IAAH,CAAQ,MAAR,CAAe,SAAf,CAAyB,WAAzB;AACD;;AACD,eAAK,oBAAL,CAA0B,WAA1B;AACD;AACF,OAPD,CAOE,OAAM,CAAN,EAAS;AACT,aAAK,OAAL;AACA,cAAM,CAAN;AACD;AACF,KAxCF;AA0CC,IAAA,MAAM,EACN;AACE;;;;;;;;AAQA,iBAAW,oBATb;;AAWE;;;;;;AAMA,uBAAiB,oBAjBnB;;AAmBE;;;;;;;;AAQA,eAAS,oBA3BX;;AA6BE;;;;;AAKA,qBAAe;AAlCjB,KA3CD;AAgFC,IAAA,OAAO,EACP;AACE;;;;AAIA,MAAA,mBAAmB,EAAE,GALvB;;AAOE;;;AAGA,MAAA,mBAAmB,EAAE,EAVvB;;AAYE;;;AAGA,MAAA,QAAQ,EAAE,IAfZ;;AAiBE;;;;;;AAMA,MAAA,mBAAmB,EAAE,6BAAS,GAAT,EAAc;AACjC,eAAO,EAAE,CAAC,GAAH,CAAO,IAAP,CAAY,QAAZ,CAAqB,mBAArB,CAAyC,GAAzC,CAAP;AACD;AAzBH,KAjFD;AA6GC,IAAA,OAAO,EACP;AACE,MAAA,SAAS,EAAE,IADb;AAEE,MAAA,kBAAkB,EAAE,IAFtB;AAGE,MAAA,YAAY,EAAE,IAHhB;AAIE,MAAA,QAAQ,EAAE,IAJZ;;AAME;;;;;;;AAOA,MAAA,YAAY,EAAE,sBAAS,WAAT,EAAsB;AAClC,eAAO,IAAI,EAAE,CAAC,GAAH,CAAO,IAAP,CAAY,QAAhB,CAAyB,WAAzB,CAAP;AACD,OAfH;;AAiBE;;;;;;AAMA,MAAA,eAAe,EAAE,yBAAS,QAAT,EAAmB;AAClC;AACA,QAAA,QAAQ,CAAC,iBAAT,CAA2B,KAAK,WAAhC,EAFkC,CAIlC;;AACA,QAAA,QAAQ,CAAC,iBAAT,CAA2B;AACvB,UAAA,SAAS,EAAE;AACT,YAAA,QAAQ,EAAE,kBAAS,GAAT,EAAc,MAAd,EAAsB;AAC9B,qBAAO,YAAW;AAChB,oBAAI,KAAK,GAAG,CAAC,GAAG,CAAC,WAAJ,EAAD,EAAoB,IAApB,EAA0B,KAA1B,EAAiC,GAAjC,EAAsC,MAAtC,EAA8C,GAAG,CAAC,QAAJ,EAA9C,CAAZ;AACA,qBAAK,SAAL,CAAe,MAAM,GAAG,SAAxB,EAAmC,EAAE,CAAC,KAAH,CAAS,IAAT,CAAc,IAAjD,EAAuD,KAAvD;AACA,qBAAK,SAAL,CAAe,SAAf,EAA0B,EAAE,CAAC,KAAH,CAAS,IAAT,CAAc,IAAxC,EAA8C,KAA9C;AACD,eAJD;AAKD,aAPQ;AAQT,YAAA,OAAO,EAAE;AARA,WADY;AAWvB,UAAA,MAAM,EAAE;AACN,YAAA,QAAQ,EAAE,kBAAS,GAAT,EAAc,MAAd,EAAsB;AAC9B,qBAAO,YAAW;AAChB,oBAAI,KAAK,GAAG,CAAC,GAAG,CAAC,WAAJ,EAAD,EAAoB,IAApB,EAA0B,KAA1B,EAAiC,GAAjC,EAAsC,MAAtC,EAA8C,GAAG,CAAC,QAAJ,EAA9C,CAAZ;AACA,qBAAK,SAAL,CAAe,MAAM,GAAG,OAAxB,EAAiC,EAAE,CAAC,KAAH,CAAS,IAAT,CAAc,IAA/C,EAAqD,KAArD;AACA,qBAAK,SAAL,CAAe,OAAf,EAAwB,EAAE,CAAC,KAAH,CAAS,IAAT,CAAc,IAAtC,EAA4C,KAA5C;AACD,eAJD;AAKD,aAPK;AAQN,YAAA,OAAO,EAAE;AARH,WAXe;AAqBvB,UAAA,SAAS,EAAE;AACT,YAAA,QAAQ,EAAE,kBAAS,GAAT,EAAc,MAAd,EAAsB;AAC9B,qBAAO,YAAW;AAChB,gBAAA,GAAG,CAAC,OAAJ;AACD,eAFD;AAGD,aALQ;AAMT,YAAA,OAAO,EAAE;AANA;AArBY,SAA3B;AA+BA,eAAO,QAAP;AACD,OA5DH;AA8DE;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAcA,MAAA,gBAAgB,EAAE,0BAAS,QAAT,EAAmB;AACnC,aAAK,SAAL,CAAe,gBAAf,CAAgC,QAAhC;AACD,OAlFH;;AAoFE;;;;;;AAMA,MAAA,WAAW,EAAE,uBAAW;AACtB,eAAO,IAAI,EAAE,CAAC,EAAH,CAAM,OAAN,CAAc,GAAlB,EAAP;AACD,OA5FH;AA8FE;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,MAAA,GAAG,EAAE,aAAS,MAAT,EAAiB,MAAjB,EAAyB,GAAzB,EAA8B,KAA9B,EAAqC;AACxC;AACA,aAAK,WAAL,CAAiB,MAAjB,EAAyB,MAAzB,EAAiC,GAAjC,EAAsC,KAAtC;;AAEA,aAAK,SAAL,CAAe,GAAf,CAAmB,MAAnB,EAA2B,MAA3B,EAAmC,GAAnC,EAAwC,KAAxC;AACD,OA3HH;;AA6HE;;;;;;;;;;;;;AAaA,MAAA,WAAW,EAAE,qBAAS,MAAT,EAAiB,MAAjB,EAAyB,GAAzB,EAA8B,KAA9B,EAAqC;AAChD,aAAK,QAAL,CAAc,MAAd,IAAwB,CAAC,MAAD,EAAS,GAAT,EAAc,KAAd,CAAxB,CADgD,CAGhD;;AACA,YAAI,MAAM,IAAI,KAAd,EAAqB;AACnB,eAAK,MAAL,IAAe,SAAf;AACD,SAN+C,CAQhD;AACA;;;AACA,YAAI,OAAO,KAAK,MAAL,CAAP,KAAwB,WAAxB,IAAuC,KAAK,MAAL,MAAiB,IAAxD,IACA,KAAK,MAAL,EAAa,MAAb,KAAwB,IAD5B,EAEA;AACE,gBAAM,IAAI,KAAJ,CAAU,iCAA+B,MAA/B,GAAsC,kBAAhD,CAAN;AACD;;AAED,aAAK,cAAL,CAAoB,MAAM,GAAG,SAA7B;;AACA,aAAK,cAAL,CAAoB,MAAM,GAAG,OAA7B;;AAEA,aAAK,MAAL,IAAe,EAAE,CAAC,IAAH,CAAQ,QAAR,CAAiB,IAAjB,CAAsB,YAAW;AAC9C,UAAA,KAAK,CAAC,SAAN,CAAgB,OAAhB,CAAwB,IAAxB,CAA6B,SAA7B,EAAwC,MAAxC;AACA,iBAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,CAAP;AACD,SAHc,EAGZ,IAHY,CAAf,CAnBgD,CAwBhD;;AACA,aAAK,MAAL,EAAa,MAAb,GAAsB,IAAtB;AAED,OArKH;;AAuKE;;;;;;;;;;;;;;;;AAgBA,MAAA,MAAM,EAAE,gBAAS,MAAT,EAAiB,MAAjB,EAAyB,IAAzB,EAA+B;AACrC,YAAI,MAAM,GAAI,MAAM,IAAI,IAAX,GAAmB,EAAnB,GAAwB,MAArC,CADqC,CAGrC;;AACA,aAAK,QAAL,CAAc,MAAd,EAAsB,MAAtB,GAA+B,MAA/B;AAEA,eAAO,KAAK,SAAL,CAAe,MAAf,CAAsB,MAAtB,EAA8B,MAA9B,EAAsC,IAAtC,CAAP;AACD,OA9LH;;AAgME;;;;;;;;AAQA,MAAA,UAAU,EAAE,oBAAS,OAAT,EAAkB;AAC5B,aAAK,SAAL,CAAe,UAAf,CAA0B,OAA1B;AACD,OA1MH;;AA4ME;;;;;;;;;;;;;;;;;;;AAmBA,MAAA,KAAK,EAAE,eAAS,OAAT,EAAkB;AACvB,aAAK,SAAL,CAAe,KAAf,CAAqB,OAArB;AACD,OAjOH;;AAmOE;;;;;;;AAOA,MAAA,OAAO,EAAE,iBAAS,MAAT,EAAiB;AACxB,aAAK,SAAL,CAAe,OAAf,CAAuB,MAAvB;AACD,OA5OH;;AA8OE;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAA,IAAI,EAAE,cAAS,MAAT,EAAiB,QAAjB,EAA2B,MAA3B,EAAmC,WAAnC,EAAgD;AACpD;AACA,YAAI,KAAK,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,eAAK,YAAL,CAAkB,MAAlB,EAA0B,OAA1B;AACD,SAJmD,CAMpD;;;AACA,YAAI,OAAO,MAAP,IAAiB,WAArB,EAAkC;AAChC,UAAA,MAAM,GAAG,KAAK,QAAL,CAAc,MAAd,EAAsB,MAA/B;AACD,SATmD,CAWpD;;;AACA,YAAI,WAAJ,EAAiB;AACf,eAAK,MAAL,CAAY,MAAZ,EAAoB,MAApB;AACD;;AAED,YAAI,gBAAgB,GAAG,SAAnB,gBAAmB,GAAW;AAChC,cAAI,IAAI,GAAG,KAAK,mBAAL,CAAyB,MAAzB,CAAX;AAAA,cACI,GAAG,GAAI,IAAD,GAAS,IAAI,CAAC,CAAD,CAAb,GAAmB,IAD7B;;AAGA,cAAI,CAAC,WAAD,IAAgB,CAAC,GAArB,EAA0B;AACxB,iBAAK,MAAL,CAAY,MAAZ,EAAoB,MAApB;AACA;AACD;;AACD,cAAI,GAAG,KAAK,GAAG,CAAC,MAAJ,MAAgB,GAAG,CAAC,UAAJ,EAArB,CAAP,EAA+C;AAC7C,iBAAK,OAAL,CAAa,MAAb;AACD;AACF,SAXD;;AAaA,YAAI,KAAK,GAAG,KAAK,YAAL,CAAkB,MAAlB,IAA4B,IAAI,EAAE,CAAC,KAAH,CAAS,KAAb,CAAmB,QAAnB,CAAxC;AACA,QAAA,KAAK,CAAC,WAAN,CAAkB,UAAlB,EAA8B,gBAA9B,EAAgD,KAAK,SAArD;AACA,QAAA,KAAK,CAAC,KAAN;AACA,eAAO,KAAP;AACD,OAzSH;;AA2SE;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAA,QAAQ,EAAE,kBAAS,MAAT,EAAiB;AACzB,YAAI,GAAG,GAAG,IAAV;AAAA,YACI,YADJ;AAAA,YACgC;AAC5B,QAAA,sBAAsB,GAAG,CAF7B,CADyB,CAGO;AAEhC;;AACA,iBAAS,QAAT,GAAoB;AAClB,cAAI,mBAAmB,GACrB,YAAY,IACV,IAAI,IAAJ,EAAD,GAAe,YAAhB,GAAgC,GAAG,CAAC,iBAAJ,EAFlC;;AAIA,cAAI,mBAAJ,EAAyB;AACvB,YAAA,sBAAsB,IAAI,CAA1B;;AACA,gBAAI,sBAAsB,GAAG,GAAG,CAAC,iBAAJ,EAA7B,EAAsD;AACX;AACvC,gBAAA,GAAG,CAAC,KAAJ,CAAU,4CACR,GAAG,CAAC,iBAAJ,EADQ,GACkB,mCADlB,GAER,GAAG,CAAC,iBAAJ,EAFQ,GAEkB,kBAF5B;AAGD;AACD,qBAAO,IAAP;AACD;AACF,WAfiB,CAiBlB;;;AACA,cAAI,CAAC,mBAAL,EAA0B;AACxB,YAAA,sBAAsB,GAAG,CAAzB;AACD;;AAED,iBAAO,KAAP;AACD;;AAED,YAAI,SAAS,GAAG,KAAK,kBAAL,CAAwB,MAAxB,IACd,KAAK,WAAL,CAAiB,MAAM,GAAG,SAA1B,EAAqC,SAAS,eAAT,GAA2B;AAC9D,cAAI,GAAG,CAAC,UAAJ,EAAJ,EAAsB;AACpB;AACD;;AAED,cAAI,CAAC,QAAQ,EAAb,EAAiB;AACf,YAAA,YAAY,GAAG,IAAI,IAAJ,EAAf;AACA,YAAA,GAAG,CAAC,OAAJ,CAAY,MAAZ;AACD;AACF,SATD,CADF;AAYA,aAAK,MAAL,CAAY,MAAZ;AACA,eAAO,SAAP;AACD,OA9WH;;AAgXE;;;;;;;;;;AAUA,MAAA,iBAAiB,EAAE,2BAAS,MAAT,EAAiB,MAAjB,EAAyB;AAC1C,eAAO,KAAK,SAAL,CAAe,iBAAf,CAAiC,MAAjC,EAAyC,MAAzC,CAAP;AACD,OA5XH;;AA8XE;;;;AAIA,MAAA,iBAAiB,EAAE,6BAAW;AAC5B,eAAO,EAAE,CAAC,EAAH,CAAM,IAAN,CAAW,QAAX,CAAoB,mBAA3B;AACD,OApYH;;AAsYE;;;;AAIA,MAAA,iBAAiB,EAAE,6BAAW;AAC5B,eAAO,EAAE,CAAC,EAAH,CAAM,IAAN,CAAW,QAAX,CAAoB,mBAA3B;AACD,OA5YH;;AA8YE;;;;;;;AAOA,MAAA,oBAAoB,EAAE,8BAAS,WAAT,EAAsB;AAC1C,QAAA,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAiC,UAAS,MAAT,EAAiB;AAChD,cAAI,KAAK,GAAG,WAAW,CAAC,MAAD,CAAvB;AAAA,cACI,MAAM,GAAG,KAAK,CAAC,MADnB;AAAA,cAEI,GAAG,GAAG,KAAK,CAAC,GAFhB;AAAA,cAGI,KAAK,GAAG,KAAK,CAAC,KAHlB;AAKyC;AACvC,YAAA,EAAE,CAAC,IAAH,CAAQ,MAAR,CAAe,YAAf,CAA4B,MAA5B,EAAoC,sCAAsC,MAAtC,GAA+C,GAAnF;AACA,YAAA,EAAE,CAAC,IAAH,CAAQ,MAAR,CAAe,YAAf,CAA4B,GAA5B,EAAiC,mCAAmC,MAAnC,GAA4C,GAA7E;AACD;AAED,eAAK,GAAL,CAAS,MAAT,EAAiB,MAAjB,EAAyB,GAAzB,EAA8B,KAA9B;AACD,SAZD,EAYG,IAZH;AAaD,OAnaH;;AAqaE;;;;;AAKA,MAAA,cAAc,EAAE,wBAAS,IAAT,EAAe;AAC7B,YAAI,CAAC,KAAK,WAAL,CAAiB,QAAtB,EAAgC;AAC9B,eAAK,WAAL,CAAiB,QAAjB,GAA4B,EAA5B;AACD;;AAED,YAAI,CAAC,KAAK,WAAL,CAAiB,QAAjB,CAA0B,IAA1B,CAAL,EAAsC;AACpC,eAAK,WAAL,CAAiB,QAAjB,CAA0B,IAA1B,IAAkC,oBAAlC;AACD;AACF;AAlbH,KA9GD;;AAmiBC;;;;;AAKA,IAAA,QAAQ,EAAE,oBAAW;AACnB,UAAI,MAAJ;;AAEA,UAAI,KAAK,YAAT,EAAuB;AACrB,aAAK,MAAL,IAAe,KAAK,YAApB,EAAkC;AAChC,cAAI,KAAK,GAAG,KAAK,YAAL,CAAkB,MAAlB,CAAZ;AACA,UAAA,KAAK,CAAC,IAAN;AACA,UAAA,KAAK,CAAC,OAAN;AACD;AACF;;AAED,UAAI,KAAK,kBAAT,EAA6B;AAC3B,aAAK,MAAL,IAAe,KAAK,kBAApB,EAAwC;AACtC,cAAI,EAAE,GAAG,KAAK,kBAAL,CAAwB,MAAxB,CAAT;AACA,eAAK,kBAAL,CAAwB,EAAxB;AACD;AACF;;AAED,WAAK,SAAL,CAAe,QAAf;;AACA,WAAK,SAAL,GAAiB,KAAK,QAAL,GAAgB,KAAK,YAAL,GAAoB,KAAK,kBAAL,GAA0B,IAA/E;AACD;AA5jBF,GADA;AAzHA,EAAA,EAAC,CAAC,EAAF,CAAK,IAAL,CAAU,QAAV,CAAmB,aAAnB,GAAmC,aAAnC",
  "file": "build-output/testtapper/part-boot-bundle-14.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Client-side wrapper of a REST resource.\n *\n * Each instance represents a resource in terms of REST. A number of actions\n * (usually HTTP methods) unique to the resource can be defined and invoked.\n * A resource with its actions is configured declaratively by passing a resource\n * description to the constructor, or programmatically using {@link #map}.\n *\n * Each action is associated to a route. A route is a combination of method,\n * URL pattern and optional parameter constraints.\n *\n * An action is invoked by calling a method with the same name. When a URL\n * pattern of a route contains positional parameters, those parameters must be\n * passed when invoking the associated action. Also, constraints defined in the\n * route must be satisfied.\n *\n * When an action is invoked, a request is configured according to the associated\n * route, is passed the URL parameters, request body data, and finally send.\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\n *\n * No constraints on the action's name or the scope of the URLs are imposed. However,\n * if you want to follow RESTful design patterns it is recommended to name actions\n * the same as the HTTP action.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\" },\n *  \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\n *  \"post\": { method: \"POST\", url: \"/photos/\"}\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // Can also be written: photo.invoke(\"get\", {id: 1});\n * photo.get({id: 1});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this creates a new resource with the given 'id'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.put({id: 1}, {title: \"Monkey\"});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this adds a new resource to the resource collection 'photos'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.post(null, {title: \"Monkey\"});\n * </pre>\n *\n * To check for existence of URL parameters or constrain them to a certain format, you\n * can add a <code>check</code> property to the description. See {@link #map} for details.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // photo.get({id: \"FAIL\"});\n * // -- Error: \"Parameter 'id' is invalid\"\n * </pre>\n *\n * If your description happens to use the same action more than once, consider\n * defining another resource.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos\"},\n * };\n * // Distinguish \"photo\" (singular) and \"photos\" (plural) resource\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * </pre>\n *\n * Basically, all routes of a resource should point to the same URL (resource in\n * terms of HTTP). One acceptable exception of this constraint are resources where\n * required parameters are part of the URL (<code>/photos/1/</code>) or filter\n * resources. For instance:\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\n * };\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * photos.get({tag: \"wildlife\"})\n * </pre>\n *\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\n * and could therefore just as well mapped to two distinct resources (for instance,\n * named photos and photosTagged). What style to choose depends on the kind of data\n * returned. For instance, it seems sensible to stick with one resource if the filter\n * only limits the result set (i.e. the individual results have the same properties).\n *\n * In order to respond to successful (or erroneous) invocations of actions,\n * either listen to the generic \"success\" or \"error\" event and get the action\n * from the event data, or listen to action specific events defined at runtime.\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.rest.Resource\",\n{\n  extend: qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n\n  /**\n   * @param description {Map?} Each key of the map is interpreted as\n   *  <code>action</code> name. The value associated to the key must be a map\n   *  with the properties <code>method</code> and <code>url</code>.\n   *  <code>check</code> is optional. Also see {@link #map}.\n   *\n   * For example:\n   *\n   * <pre class=\"javascript\">\n   * { get: {method: \"GET\", url: \"/photos/{id}\", check: { id: /\\d+/ }} }\n   * </pre>\n   *\n   * @see qx.bom.rest\n   * @see qx.io.rest\n   */\n  construct: function(description)\n  {\n    this.base(arguments);\n\n    this.__longPollHandlers = {};\n    this.__pollTimers = {};\n    this.__routes = {};\n\n    this._resource = this._tailorResource(this._getResource());\n\n    try {\n      if (typeof description !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertMap(description);\n        }\n        this.__mapFromDescription(description);\n      }\n    } catch(e) {\n      this.dispose();\n      throw e;\n    }\n  },\n\n  events:\n  {\n    /**\n     * Fired when any request was successful.\n     *\n     * The action the successful request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Success\", e.g. \"indexSuccess\".\n     */\n    \"success\": \"qx.event.type.Rest\",\n\n    /**\n     * Fired when request associated to action given in prefix was successful.\n     *\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\n     * successful.\n     */\n    \"actionSuccess\": \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request fails.\n     *\n     * The action the failed request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Error\", e.g. \"indexError\".\n     */\n    \"error\": \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request associated to action given in prefix fails.\n     *\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\n     */\n    \"actionError\": \"qx.event.type.Rest\"\n  },\n\n  statics:\n  {\n    /**\n     * Number of milliseconds below a long-poll request is considered immediate and\n     * subject to throttling checks.\n     */\n    POLL_THROTTLE_LIMIT: 100,\n\n    /**\n     * Number of immediate long-poll responses accepted before throttling takes place.\n     */\n    POLL_THROTTLE_COUNT: 30,\n\n    /**\n     * A symbol used in checks to declare required parameter.\n     */\n    REQUIRED: true,\n\n    /**\n     * Get placeholders from URL.\n     *\n     * @param url {String} The URL to parse for placeholders.\n     * @return {Array} Array of placeholders without the placeholder prefix.\n     */\n    placeholdersFromUrl: function(url) {\n      return qx.bom.rest.Resource.placeholdersFromUrl(url);\n    }\n  },\n\n  members:\n  {\n    _resource: null,\n    __longPollHandlers: null,\n    __pollTimers: null,\n    __routes: null,\n\n    /**\n     * Get resource.\n     *\n     * May be overridden to change type of resource.\n     * @param description {Map?} See construct.\n     * @return {qx.bom.rest.Resource} Resource implementation which does the heavy lifting.\n     */\n    _getResource: function(description) {\n      return new qx.bom.rest.Resource(description);\n    },\n\n    /**\n     * Tailors (apply dependency injection) the given resource to fit our needs.\n     *\n     * @param resource {qx.bom.rest.Resource} Resource.\n     * @return {qx.bom.rest.Resource} Tailored resource.\n     */\n    _tailorResource: function(resource) {\n      // inject different request implementation\n      resource.setRequestFactory(this._getRequest);\n\n      // inject different request handling\n      resource.setRequestHandler({\n          onsuccess: {\n            callback: function(req, action) {\n              return function() {\n                var props = [req.getResponse(), null, false, req, action, req.getPhase()];\n                this.fireEvent(action + \"Success\", qx.event.type.Rest, props);\n                this.fireEvent(\"success\", qx.event.type.Rest, props);\n              };\n            },\n            context: this\n          },\n          onfail: {\n            callback: function(req, action) {\n              return function() {\n                var props = [req.getResponse(), null, false, req, action, req.getPhase()];\n                this.fireEvent(action + \"Error\", qx.event.type.Rest, props);\n                this.fireEvent(\"error\", qx.event.type.Rest, props);\n              };\n            },\n            context: this\n          },\n          onloadend: {\n            callback: function(req, action) {\n              return function() {\n                req.dispose();\n              };\n            },\n            context: this\n          }\n      });\n\n      return resource;\n    },\n\n    //\n    // Request\n    //\n\n    /**\n     * Configure request.\n     *\n     * @param callback {Function} Function called before request is send.\n     *   Receives request, action, params and data.\n     *\n     * <pre class=\"javascript\">\n     * res.configureRequest(function(req, action, params, data) {\n     *   if (action === \"index\") {\n     *     req.setAccept(\"application/json\");\n     *   }\n     * });\n     * </pre>\n     */\n    configureRequest: function(callback) {\n      this._resource.configureRequest(callback);\n    },\n\n    /**\n     * Get request.\n     *\n     * May be overridden to change type of request.\n     * @return {qx.io.request.Xhr} Xhr object\n     */\n    _getRequest: function() {\n      return new qx.io.request.Xhr();\n    },\n\n    //\n    // Routes and actions\n    //\n\n    /**\n     * Map action to combination of method and URL pattern.\n     *\n     * <pre class=\"javascript\">\n     *   res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n     *\n     *   // GET /photos/123\n     *   res.get({id: \"123\"});\n     * </pre>\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    map: function(action, method, url, check) {\n      // add dynamic methods also on ourself to allow 'invoke()' delegation\n      this.__addAction(action, method, url, check);\n\n      this._resource.map(action, method, url, check);\n    },\n\n    /**\n     * Map actions to members.\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    __addAction: function(action, method, url, check) {\n      this.__routes[action] = [method, url, check];\n\n      // Undefine generic getter when action is named \"get\"\n      if (action == \"get\") {\n        this[action] = undefined;\n      }\n\n      // Do not overwrite existing \"non-action\" methods unless the method is\n      // null (i.e. because it exists as a stub for documentation)\n      if (typeof this[action] !== \"undefined\" && this[action] !== null &&\n          this[action].action !== true)\n      {\n        throw new Error(\"Method with name of action (\"+action+\") already exists\");\n      }\n\n      this.__declareEvent(action + \"Success\");\n      this.__declareEvent(action + \"Error\");\n\n      this[action] = qx.lang.Function.bind(function() {\n        Array.prototype.unshift.call(arguments, action);\n        return this.invoke.apply(this, arguments);\n      }, this);\n\n      // Method is safe to overwrite\n      this[action].action = true;\n\n    },\n\n    /**\n     * Invoke action with parameters.\n     *\n     * Internally called by actions dynamically created.\n     *\n     * May be overridden to customize action and parameter handling.\n     *\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\n     *\n     * @param action {String} Action to invoke.\n     * @param params {Map} Map of parameters inserted into URL when a matching\n     *  positional parameter is found.\n     * @param data {Map|String} Data to be send as part of the request.\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\n     * @return {Number} Id of the action's invocation.\n     */\n    invoke: function(action, params, data) {\n      var params = (params == null) ? {} : params;\n\n      // Cache parameters\n      this.__routes[action].params = params;\n\n      return this._resource.invoke(action, params, data);\n    },\n\n    /**\n     * Set base URL.\n     *\n     * The base URL is prepended to the URLs given in the description.\n     * Changes affect all future invocations.\n     *\n     * @param baseUrl {String} Base URL.\n     */\n    setBaseUrl: function(baseUrl) {\n      this._resource.setBaseUrl(baseUrl);\n    },\n\n    /**\n     * Abort action.\n     *\n     * Example:\n     *\n     * <pre class=\"javascript\">\n     *   // Abort all invocations of action\n     *   res.get({id: 1});\n     *   res.get({id: 2});\n     *   res.abort(\"get\");\n     *\n     *   // Abort specific invocation of action (by id)\n     *   var actionId = res.get({id: 1});\n     *   res.abort(actionId);\n     * </pre>\n     *\n     * @param varargs {String|Number} Action of which all invocations to abort\n     *  (when string), or a single invocation of an action to abort (when number)\n     */\n    abort: function(varargs) {\n      this._resource.abort(varargs);\n    },\n\n    /**\n     * Resend request associated to action.\n     *\n     * Replays parameters given when action was invoked originally.\n     *\n     * @param action {String} Action to refresh.\n     */\n    refresh: function(action) {\n      this._resource.refresh(action);\n    },\n\n    /**\n     * Periodically invoke action.\n     *\n     * Replays parameters given when action was invoked originally. When the\n     * action was not yet invoked and requires parameters, parameters must be\n     * given.\n     *\n     * Please note that IE tends to cache overly aggressive. One work-around is\n     * to disable caching on the client side by configuring the request with\n     * <code>setCache(false)</code>. If you control the server, a better\n     * work-around is to include appropriate headers to explicitly control\n     * caching. This way you still avoid requests that can be correctly answered\n     * from cache (e.g. when nothing has changed since the last poll). Please\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n     * XMLHttpRequest Caching Test</a> for available options.\n     *\n     * @lint ignoreUnused(intervalListener)\n     *\n     * @param action {String} Action to poll.\n     * @param interval {Number} Interval in ms.\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\n     *   invoke a call immediately.\n     * @return {qx.event.Timer} Timer that periodically invokes action. Use to\n     *   stop or resume. Is automatically disposed on disposal of object.\n     */\n    poll: function(action, interval, params, immediately) {\n      // Dispose timer previously created for action\n      if (this.__pollTimers[action]) {\n        this.__pollTimers[action].dispose();\n      }\n\n      // Fallback to previous params\n      if (typeof params == \"undefined\") {\n        params = this.__routes[action].params;\n      }\n\n      // Invoke immediately\n      if (immediately) {\n        this.invoke(action, params);\n      }\n\n      var intervalListener = function() {\n        var reqs = this.getRequestsByAction(action),\n            req = (reqs) ? reqs[0] : null;\n\n        if (!immediately && !req) {\n          this.invoke(action, params);\n          return;\n        }\n        if (req && (req.isDone() || req.isDisposed())) {\n          this.refresh(action);\n        }\n      };\n\n      var timer = this.__pollTimers[action] = new qx.event.Timer(interval);\n      timer.addListener(\"interval\", intervalListener, this._resource);\n      timer.start();\n      return timer;\n    },\n\n    /**\n     * Long-poll action.\n     *\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\n     * server signals new data. The server determines when new data is available,\n     * while the client keeps open a request. Requires configuration on the\n     * server side. Basically, the server must not close a connection until\n     * new data is available. For a high level introduction to long-polling,\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n     * Ajax with long polling</a>.\n     *\n     * Uses {@link #refresh} internally. Make sure you understand the\n     * implications of IE's tendency to cache overly aggressive.\n     *\n     * Note no interval is given on the client side.\n     *\n     * @lint ignoreUnused(longPollHandler)\n     *\n     * @param action {String} Action to poll.\n     * @return {String} Id of handler responsible for long-polling. To stop\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\n     */\n    longPoll: function(action) {\n      var res = this,\n          lastResponse,               // Keep track of last response\n          immediateResponseCount = 0; // Count immediate responses\n\n      // Throttle to prevent high load on server and client\n      function throttle() {\n        var isImmediateResponse =\n          lastResponse &&\n          ((new Date()) - lastResponse) < res._getThrottleLimit();\n\n        if (isImmediateResponse) {\n          immediateResponseCount += 1;\n          if (immediateResponseCount > res._getThrottleCount()) {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              res.debug(\"Received successful response more than \" +\n                res._getThrottleCount() + \" times subsequently, each within \" +\n                res._getThrottleLimit() + \" ms. Throttling.\");\n            }\n            return true;\n          }\n        }\n\n        // Reset counter on delayed response\n        if (!isImmediateResponse) {\n          immediateResponseCount = 0;\n        }\n\n        return false;\n      }\n\n      var handlerId = this.__longPollHandlers[action] =\n        this.addListener(action + \"Success\", function longPollHandler() {\n          if (res.isDisposed()) {\n            return;\n          }\n\n          if (!throttle()) {\n            lastResponse = new Date();\n            res.refresh(action);\n          }\n        });\n\n      this.invoke(action);\n      return handlerId;\n    },\n\n    /**\n     * Get request configuration for action and parameters.\n     *\n     * This is were placeholders are replaced with parameters.\n     *\n     * @param action {String} Action associated to request.\n     * @param params {Map} Parameters to embed in request.\n     * @return {Map} Map of configuration settings. Has the properties\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\n     */\n    _getRequestConfig: function(action, params) {\n      return this._resource._getRequestConfig(action, params);\n    },\n\n    /**\n     * Override to adjust the throttle limit.\n     * @return {Integer} Throttle limit in milliseconds\n     */\n    _getThrottleLimit: function() {\n      return qx.io.rest.Resource.POLL_THROTTLE_LIMIT;\n    },\n\n    /**\n     * Override to adjust the throttle count.\n     * @return {Integer} Throttle count\n     */\n    _getThrottleCount: function() {\n      return qx.io.rest.Resource.POLL_THROTTLE_COUNT;\n    },\n\n    /**\n     * Map actions from description.\n     *\n     * Allows to decoratively define routes.\n     *\n     * @param description {Map} Map that defines the routes.\n     */\n    __mapFromDescription: function(description) {\n      Object.keys(description).forEach(function(action) {\n        var route = description[action],\n            method = route.method,\n            url = route.url,\n            check = route.check;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertString(method, \"Method must be string for route '\" + action + \"'\");\n          qx.core.Assert.assertString(url, \"URL must be string for route '\" + action + \"'\");\n        }\n\n        this.map(action, method, url, check);\n      }, this);\n    },\n\n    /**\n     * Declare event at runtime.\n     *\n     * @param type {String} Type of event.\n     */\n    __declareEvent: function(type) {\n      if (!this.constructor.$$events) {\n        this.constructor.$$events = {};\n      }\n\n      if (!this.constructor.$$events[type]) {\n        this.constructor.$$events[type] = \"qx.event.type.Rest\";\n      }\n    }\n  },\n\n  /**\n   * Destructs the Resource.\n   *\n   * All created requests, routes and pollTimers will be disposed.\n   */\n  destruct: function() {\n    var action;\n\n    if (this.__pollTimers) {\n      for (action in this.__pollTimers) {\n        var timer = this.__pollTimers[action];\n        timer.stop();\n        timer.dispose();\n      }\n    }\n\n    if (this.__longPollHandlers) {\n      for (action in this.__longPollHandlers) {\n        var id = this.__longPollHandlers[action];\n        this.removeListenerById(id);\n      }\n    }\n\n    this._resource.destruct();\n    this._resource = this.__routes = this.__pollTimers = this.__longPollHandlers = null;\n  }\n});\n"
  ]
}