{
  "version": 3,
  "sources": [
    "../transpiled/qx/io/request/AbstractRequest.js",
    "../transpiled/qx/io/request/Xhr.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/testtapper/part-boot-bundle-7.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\n * and {@link qx.io.request.Jsonp}. It contains methods to conveniently\n * communicate with transports found in {@link qx.bom.request}.\n *\n * The general procedure to derive a new request is to choose a\n * transport (override {@link #_createTransport}) and link\n * the transport’s response (override {@link #_getParsedResponse}).\n * The transport must implement {@link qx.bom.request.IRequest}.\n *\n * To adjust the behavior of {@link #send} override\n * {@link #_getConfiguredUrl} and {@link #_getConfiguredRequestHeaders}.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.request.AbstractRequest\",\n{\n  type : \"abstract\",\n\n  extend : qx.core.Object,\n  implement: [ qx.core.IDisposable ],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   */\n  construct : function(url)\n  {\n    this.base(arguments);\n\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.__requestHeaders = {};\n\n    var transport = this._transport = this._createTransport();\n    this._setPhase(\"unsent\");\n\n    this.__onReadyStateChangeBound = qx.lang.Function.bind(this._onReadyStateChange, this);\n    this.__onLoadBound = qx.lang.Function.bind(this._onLoad, this);\n    this.__onLoadEndBound = qx.lang.Function.bind(this._onLoadEnd, this);\n    this.__onAbortBound = qx.lang.Function.bind(this._onAbort, this);\n    this.__onTimeoutBound = qx.lang.Function.bind(this._onTimeout, this);\n    this.__onErrorBound = qx.lang.Function.bind(this._onError, this);\n\n    transport.onreadystatechange = this.__onReadyStateChangeBound;\n    transport.onload = this.__onLoadBound;\n    transport.onloadend = this.__onLoadEndBound;\n    transport.onabort = this.__onAbortBound;\n    transport.ontimeout = this.__onTimeoutBound;\n    transport.onerror = this.__onErrorBound;\n  },\n\n  events :\n  {\n    /**\n     * Fired on every change of the transport’s readyState.\n     */\n    \"readyStateChange\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport’s status\n     * indicates success.\n     */\n    \"success\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     */\n    \"load\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with or without error.\n     */\n    \"loadEnd\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request is aborted.\n     */\n    \"abort\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request reaches timeout limit.\n     */\n    \"timeout\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with error.\n     */\n    \"error\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     */\n    \"statusError\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when the configured parser runs into an unrecoverable error.\n     */\n    \"parseError\": \"qx.event.type.Data\",\n\n    /**\n     * Fired on timeout, error or remote error.\n     *\n     * This event is fired for convenience. Usually, it is recommended\n     * to handle error related events in a more fine-grained approach.\n     */\n    \"fail\": \"qx.event.type.Event\",\n\n    /**\n    * Fired on change of the parsed response.\n    *\n    * This event allows to use data binding with the\n    * parsed response as source.\n    *\n    * For example, to bind the response to the value of a label:\n    *\n    * <pre class=\"javascript\">\n    * // req is an instance of qx.io.request.*,\n    * // label an instance of qx.ui.basic.Label\n    * req.bind(\"response\", label, \"value\");\n    * </pre>\n    *\n    * The response is parsed (and therefore changed) only\n    * after the request completes successfully. This means\n    * that when a new request is made the initial empty value\n    * is ignored, instead only the final value is bound.\n    *\n    */\n    \"changeResponse\": \"qx.event.type.Data\",\n\n    /**\n     * Fired on change of the phase.\n     */\n    \"changePhase\": \"qx.event.type.Data\"\n  },\n\n  properties :\n  {\n    /**\n     * The URL of the resource to request.\n     *\n     * Note: Depending on the configuration of the request\n     * and/or the transport chosen, query params may be appended\n     * automatically.\n     */\n    url: {\n      check: \"String\"\n    },\n\n\n    /**\n     * Timeout limit in milliseconds. Default (0) means no limit.\n     */\n    timeout: {\n      check: \"Number\",\n      nullable: true,\n      init: 0\n    },\n\n    /**\n     * Data to be sent as part of the request.\n     *\n     * Supported types:\n     *\n     * * String\n     * * Map\n     * * qooxdoo Object\n     * * Blob\n     * * ArrayBuffer\n     * * FormData\n     *\n     * For maps, Arrays and qooxdoo objects, a URL encoded string\n     * with unsafe characters escaped is internally generated and sent\n     * as part of the request.\n     *\n     * Depending on the underlying transport and its configuration, the request\n     * data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * If a string is given the user must make sure it is properly formatted and\n     * escaped. See {@link qx.util.Serializer#toUriParameter}.\n     *\n     */\n    requestData: {\n      check: function(value) {\n        return qx.lang.Type.isString(value) ||\n               qx.Class.isSubClassOf(value.constructor, qx.core.Object) ||\n               qx.lang.Type.isObject(value) ||\n               qx.lang.Type.isArray(value) ||\n               qx.Bootstrap.getClass(value) == \"Blob\" ||\n               qx.Bootstrap.getClass(value) == \"ArrayBuffer\" ||\n               qx.Bootstrap.getClass(value) == \"FormData\";\n      },\n      nullable: true\n    },\n\n    /**\n     * Authentication delegate.\n     *\n     * The delegate must implement {@link qx.io.request.authentication.IAuthentication}.\n     */\n    authentication: {\n      check: \"qx.io.request.authentication.IAuthentication\",\n      nullable: true\n    }\n  },\n\n  members :\n  {\n\n    /**\n     * Bound handlers.\n     */\n    __onReadyStateChangeBound: null,\n    __onLoadBound: null,\n    __onLoadEndBound: null,\n    __onAbortBound: null,\n    __onTimeoutBound: null,\n    __onErrorBound: null,\n\n    /**\n     * Parsed response.\n     */\n    __response: null,\n\n    /**\n     * Abort flag.\n     */\n     __abort: null,\n\n    /**\n     * Current phase.\n     */\n    __phase: null,\n\n    /**\n     * Request headers.\n     */\n    __requestHeaders: null,\n\n    /**\n     * Request headers (deprecated).\n     */\n    __requestHeadersDeprecated: null,\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /**\n     * Holds information about the parser status for the last request.\n     */\n    _parserFailed: false,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create and return transport.\n     *\n     * This method MUST be overridden, unless the constructor is overridden as\n     * well. It is called by the constructor and should return the transport that\n     * is to be interfaced.\n     *\n     * @return {qx.bom.request} Transport.\n     */\n    _createTransport: function() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * A configured URL typically includes a query string that\n     * encapsulates transport specific settings such as request\n     * data or no-cache settings.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl: function() {},\n\n    /**\n     * Get configuration related request headers.\n     *\n     * This method MAY be overridden to add request headers for features limited\n     * to a certain transport.\n     *\n     * @return {Map} Map of request headers.\n     */\n    _getConfiguredRequestHeaders: function() {},\n\n    /**\n     * Get parsed response.\n     *\n     * Is called in the {@link #_onReadyStateChange} event handler\n     * to parse and store the transport’s response.\n     *\n     * This method MUST be overridden.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    _getParsedResponse: function() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get method.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The method.\n     */\n    _getMethod: function() {\n      return \"GET\";\n    },\n\n    /**\n     * Whether async.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {Boolean} Whether to process asynchronously.\n     */\n    _isAsync: function() {\n      return true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERACT WITH TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Send request.\n     */\n    send: function() {\n      var transport = this._transport,\n          url, method, async, requestData;\n\n      //\n      // Open request\n      //\n\n      url = this._getConfiguredUrl();\n\n      // Drop fragment (anchor) from URL as per\n      // http://www.w3.org/TR/XMLHttpRequest/#the-open-method\n      if (/\\#/.test(url)) {\n        url = url.replace(/\\#.*/, \"\");\n      }\n\n      transport.timeout = this.getTimeout();\n\n      // Support transports with enhanced feature set\n      method = this._getMethod();\n      async = this._isAsync();\n\n      // Open\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Open low-level request with method: \" +\n          method + \", url: \" + url + \", async: \" + async);\n      }\n\n      transport.open(method, url, async);\n      this._setPhase(\"opened\");\n\n      //\n      // Send request\n      //\n\n      requestData = this.getRequestData();\n      if ([\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(qx.Bootstrap.getClass(requestData)) == -1) {\n        requestData = this._serializeData(requestData);\n      }\n\n      this._setRequestHeaders();\n\n      // Send\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Send low-level request\");\n      }\n\n      method == \"GET\" ? transport.send() : transport.send(requestData);\n      this._setPhase(\"sent\");\n    },\n\n    /**\n    * The same as send() but also return a `qx.Promise` object. The promise\n    * is resolved to this object if the request is successful.\n    *\n    * Calling `abort()` on the request object, rejects the promise. Calling\n    * `cancel()` on the promise aborts the request if the request is not in a\n    * final state.\n    * If the promise has other listener paths, then cancelation of one path will\n    * not have any effect on the request and consequently that call will not\n    * affect the other paths.\n    *\n    * @param context {Object?} optional context to bind the qx.Promise.\n    * @return {qx.Promise} The qx.Promise object\n    * @throws {qx.type.BaseError} If the environment setting `qx.promise` is set to false\n    */\n    sendWithPromise: function(context) {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        context = context || this;\n\n        // save this object's context\n        var req = this;\n\n        var promise = new qx.Promise(function(resolve, reject) {\n          var listeners = [];\n\n          var changeResponseListener = req.addListener(\"success\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            resolve(req);\n          }, this);\n          listeners.push(changeResponseListener);\n\n          var statusErrorListener = req.addListener(\"statusError\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\"%1: %2.\", [req.getStatus(), req.getStatusText()]);\n            var err = new qx.type.BaseError(\"statusError\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(statusErrorListener);\n\n          var timeoutListener = req.addListener(\"timeout\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\"Request failed with timeout after %1 ms.\", [req.getTimeout()]);\n            var err = new qx.type.BaseError(\"timeout\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(timeoutListener);\n\n          var parseErrorListener = req.addListener(\"parseError\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Error parsing the response.\";\n            var err = new qx.type.BaseError(\"parseError\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(parseErrorListener);\n\n          var abortListener = req.addListener(\"abort\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request aborted.\";\n            var err = new qx.type.BaseError(\"abort\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(abortListener);\n\n          var errorListener = req.addListener(\"error\", function(e) {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request failed.\";\n            var err = new qx.type.BaseError(\"error\", failMessage);\n            reject(err);\n          }, this);\n          listeners.push(errorListener);\n\n          req.send();\n        }, context)\n\n        .finally(function() {\n          if (req.getReadyState() !== 4) {\n            req.abort();\n          }\n        });\n\n        return promise;\n        // eslint-disable-next-line no-else-return\n      } else {\n        // fail loudly\n        throw new qx.type.BaseError(\"Error\", \"Environment setting qx.promise is set to false.\");\n      }\n    },\n\n    /**\n     * Abort request.\n     */\n    abort: function() {\n       if (qx.core.Environment.get(\"qx.debug.io\")) {\n         this.debug(\"Abort request\");\n       }\n       this.__abort = true;\n\n       // Update phase to \"abort\" before user handler are invoked [BUG #5485]\n       this.__phase = \"abort\";\n\n       this._transport.abort();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     REQUEST HEADERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply configured request headers to transport.\n     *\n     * This method MAY be overridden to customize application of request headers\n     * to transport.\n     */\n    _setRequestHeaders: function() {\n      var transport = this._transport,\n          requestHeaders = this._getAllRequestHeaders();\n\n      for (var key in requestHeaders) {\n        transport.setRequestHeader(key, requestHeaders[key]);\n      }\n\n    },\n\n    /**\n     * Get all request headers.\n     *\n     * @return {Map} All request headers.\n     */\n    _getAllRequestHeaders: function() {\n      var requestHeaders = {};\n      // Transport specific headers\n      qx.lang.Object.mergeWith(requestHeaders, this._getConfiguredRequestHeaders());\n      // Authentication delegate\n      qx.lang.Object.mergeWith(requestHeaders, this.__getAuthRequestHeaders());\n      // User-defined, requestHeaders property (deprecated)\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeadersDeprecated);\n      // User-defined\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeaders);\n\n      return requestHeaders;\n    },\n\n    /**\n    * Retrieve authentication headers from auth delegate.\n    *\n    * @return {Map} Authentication related request headers.\n    */\n    __getAuthRequestHeaders: function() {\n      var auth = this.getAuthentication(),\n          headers = {};\n\n      if (auth) {\n        auth.getAuthHeaders().forEach(function(header) {\n          headers[header.key] = header.value;\n        });\n        return headers;\n      }\n    },\n\n    /**\n     * Set a request header.\n     *\n     * Note: Setting request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     */\n    setRequestHeader: function(key, value) {\n      this.__requestHeaders[key] = value;\n    },\n\n    /**\n     * Get a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader: function(key) {\n       return this.__requestHeaders[key];\n    },\n\n    /**\n     * Remove a request header.\n     *\n     * Note: Removing request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     */\n    removeRequestHeader: function(key) {\n      if (this.__requestHeaders[key]) {\n       delete this.__requestHeaders[key];\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n     QUERY TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n\n     // This method mainly exists so that some methods found in the\n     // low-level transport can be deliberately omitted here,\n     // but still be accessed should it be absolutely necessary.\n     //\n     // Valid use cases include to query the transport’s responseXML\n     // property if performance is critical and any extra parsing\n     // should be avoided at all costs.\n     //\n    getTransport: function() {\n      return this._transport;\n    },\n\n    /**\n     * Get current ready state.\n     *\n     * States can be:\n     * UNSENT:           0,\n     * OPENED:           1,\n     * HEADERS_RECEIVED: 2,\n     * LOADING:          3,\n     * DONE:             4\n     *\n     * @return {Number} Ready state.\n     */\n    getReadyState: function() {\n      return this._transport.readyState;\n    },\n\n    /**\n     * Get current phase.\n     *\n     * A more elaborate version of {@link #getReadyState}, this method indicates\n     * the current phase of the request. Maps to stateful (i.e. deterministic)\n     * events (success, abort, timeout, statusError) and intermediate\n     * readyStates (unsent, configured, loading, load).\n     *\n     * When the requests is successful, it progresses the states:<br>\n     * 'unsent', 'opened', 'sent', 'loading', 'load', 'success'\n     *\n     * In case of failure, the final state is one of:<br>\n     * 'abort', 'timeout', 'statusError'\n     *\n     * For each change of the phase, a {@link #changePhase} data event is fired.\n     *\n     * @return {String} Current phase.\n     *\n     */\n    getPhase: function() {\n      return this.__phase;\n    },\n\n    /**\n     * Get status code.\n     *\n     * @return {Number} The transport’s status code.\n     */\n    getStatus: function() {\n      return this._transport.status;\n    },\n\n    /**\n     * Get status text.\n     *\n     * @return {String} The transport’s status text.\n     */\n    getStatusText: function() {\n      return this._transport.statusText;\n    },\n\n    /**\n     * Get raw (unprocessed) response.\n     *\n     * @return {String} The raw response of the request.\n     */\n    getResponseText: function() {\n      return this._transport.responseText;\n    },\n\n    /**\n     * Get all response headers from response.\n     *\n     * @return {String} All response headers.\n     */\n    getAllResponseHeaders: function() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Get a single response header from response.\n     *\n     * @param key {String}\n     *   Key of the header to get the value from.\n     * @return {String}\n     *   Response header.\n     */\n    getResponseHeader: function(key) {\n      return this._transport.getResponseHeader(key);\n    },\n\n    /**\n     * Override the content type response header from response.\n     *\n     * @param contentType {String}\n     *   Content type for overriding.\n     * @see qx.bom.request.Xhr#overrideMimeType\n     */\n    overrideResponseContentType: function(contentType) {\n      return this._transport.overrideMimeType(contentType);\n    },\n\n    /**\n     * Get the content type response header from response.\n     *\n     * @return {String}\n     *   Content type response header.\n     */\n    getResponseContentType: function() {\n      return this.getResponseHeader(\"Content-Type\");\n    },\n\n    /**\n     * Whether request completed (is done).\n     */\n    isDone: function() {\n      return this.getReadyState() === 4;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get parsed response.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    getResponse: function() {\n      return this.__response;\n    },\n\n    /**\n     * Set response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse: function(response) {\n      var oldResponse = response;\n\n      if (this.__response !== response) {\n        this.__response = response;\n        this.fireEvent(\"changeResponse\", qx.event.type.Data, [this.__response, oldResponse]);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handle \"readyStateChange\" event.\n     */\n    _onReadyStateChange: function() {\n      var readyState = this.getReadyState();\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Fire readyState: \" + readyState);\n      }\n\n      this.fireEvent(\"readyStateChange\");\n\n      // Transport switches to readyState DONE on abort and may already\n      // have successful HTTP status when response is served from cache.\n      //\n      // Not fire custom event \"loading\" (or \"success\", when cached).\n      if (this.__abort) {\n        return;\n      }\n\n      if (readyState === 3) {\n        this._setPhase(\"loading\");\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone: function() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Request completed with HTTP status: \" + this.getStatus());\n      }\n\n      // Event \"load\" fired in onLoad\n      this._setPhase(\"load\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this.getStatus())) {\n\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\"Response is of type: '\" + this.getResponseContentType() + \"'\");\n        }\n\n        this._setResponse(this._getParsedResponse());\n\n        if (this._parserFailed) {\n          this.fireEvent(\"fail\");\n        } else {\n          this._fireStatefulEvent(\"success\");\n        }\n\n      // Erroneous HTTP status\n      } else {\n\n        try {\n          this._setResponse(this._getParsedResponse());\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this.getStatus() !== 0) {\n          this._fireStatefulEvent(\"statusError\");\n          this.fireEvent(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handle \"load\" event.\n     */\n    _onLoad: function() {\n      this.fireEvent(\"load\");\n    },\n\n    /**\n     * Handle \"loadEnd\" event.\n     */\n    _onLoadEnd: function() {\n      this.fireEvent(\"loadEnd\");\n    },\n\n    /**\n     * Handle \"abort\" event.\n     */\n    _onAbort: function() {\n      this._fireStatefulEvent(\"abort\");\n    },\n\n    /**\n     * Handle \"timeout\" event.\n     */\n    _onTimeout: function() {\n      this._fireStatefulEvent(\"timeout\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /**\n     * Handle \"error\" event.\n     */\n    _onError: function() {\n      this.fireEvent(\"error\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL / HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire stateful event.\n     *\n     * Fires event and sets phase to name of event.\n     *\n     * @param evt {String} Name of the event to fire.\n     */\n    _fireStatefulEvent: function(evt) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(evt);\n      }\n      this._setPhase(evt);\n      this.fireEvent(evt);\n    },\n\n    /**\n     * Set phase.\n     *\n     * @param phase {String} The phase to set.\n     */\n    _setPhase: function(phase) {\n      var previousPhase = this.__phase;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(phase);\n        qx.core.Assert.assertMatch(phase,\n          /^(unsent)|(opened)|(sent)|(loading)|(load)|(success)|(abort)|(timeout)|(statusError)$/);\n      }\n\n      this.__phase = phase;\n      this.fireDataEvent(\"changePhase\", phase, previousPhase);\n    },\n\n    /**\n     * Serialize data.\n     *\n     * @param data {String|Map|qx.core.Object} Data to serialize.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData: function(data) {\n      var isPost = typeof this.getMethod !== \"undefined\" && this.getMethod() == \"POST\",\n          isJson = (/application\\/.*\\+?json/).test(this.getRequestHeader(\"Content-Type\"));\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (qx.Class.isSubClassOf(data.constructor, qx.core.Object)) {\n        return qx.util.Serializer.toUriParameter(data);\n      }\n\n      if (isJson && (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      return null;\n    }\n  },\n\n  environment:\n  {\n    \"qx.debug.io\": false\n  },\n\n  destruct: function()\n  {\n    var transport = this._transport,\n        noop = function() {};\n\n    if (this._transport) {\n      transport.onreadystatechange = transport.onload = transport.onloadend =\n      transport.onabort = transport.ontimeout = transport.onerror = noop;\n\n      // [BUG #8315] dispose asynchronously to work with Sinon.js fake server\n      window.setTimeout(function() {\n        transport.dispose();\n      }, 0);\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * Send HTTP requests and handle responses using the HTTP client API.\n *\n * Configuration of the request is done with properties. Events are fired for\n * various states in the life cycle of a request, such as \"success\". Request\n * data is transparently processed.\n *\n * Here is how to request a JSON file and listen to the \"success\" event:\n *\n * <pre class=\"javascript\">\n * var req = new qx.io.request.Xhr(\"/some/path/file.json\");\n *\n * req.addListener(\"success\", function(e) {\n *   var req = e.getTarget();\n *\n *   // Response parsed according to the server's\n *   // response content type, e.g. JSON\n *   req.getResponse();\n * }, this);\n *\n * // Send request\n * req.send();\n * </pre>\n *\n * Some noteable features:\n *\n * * Abstraction of low-level request\n * * Convenient setup using properties\n * * Fine-grained events\n * * Symbolic phases\n * * Transparent processing of request data\n * * Stream-lined authentication\n * * Automagic parsing of response based on content type\n *\n * Cross-origin requests are supported, but require browser support\n * (see <a href=\"http://caniuse.com/#search=CORS\">caniuse.com</a>) and backend configuration\n * (see <a href=\"https://developer.mozilla.org/en-US/docs/docs/HTTP/Access_control_CORS>MDN</a>).\n * Note that IE's <code>XDomainRequest</code> is not currently supported.\n * For a cross-browser alternative, consider {@link qx.io.request.Jsonp}.\n *\n * In order to debug requests, set the environment flag\n * <code>qx.debug.io</code>.\n *\n * Internally uses {@link qx.bom.request.Xhr}.\n */\nqx.Class.define(\"qx.io.request.Xhr\",\n{\n  extend: qx.io.request.AbstractRequest,\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   * @param method {String?} The HTTP method.\n   */\n  construct: function(url, method) {\n    if (method !== undefined) {\n      this.setMethod(method);\n    }\n\n    this.base(arguments, url);\n    this._parser = this._createResponseParser();\n  },\n\n  // Only document events with transport specific details.\n  // For a complete list of events, refer to AbstractRequest.\n\n  events:\n  {\n    /**\n     * Fired on every change of the transport’s readyState.\n     *\n     * See {@link qx.bom.request.Xhr} for available readyStates.\n     */\n    \"readyStateChange\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport status\n     * indicates success.\n     *\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\n     * status considered successful.\n     */\n    \"success\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     *\n     * Every request not canceled or aborted completes. This means that\n     * even requests receiving a response with erroneous HTTP status\n     * fire a \"load\" event. If you are only interested in successful\n     * responses, listen to the {@link #success} event instead.\n     */\n    \"load\": \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     *\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\n     * status considered successful.\n     */\n    \"statusError\": \"qx.event.type.Event\"\n  },\n\n  properties:\n  {\n    /**\n     * The HTTP method.\n     */\n    method: {\n      init: \"GET\"\n    },\n\n    /**\n     * Whether the request should be executed asynchronously.\n     */\n    async: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * The content type to accept. By default, every content type\n     * is accepted.\n     *\n     * Note: Some backends send distinct representations of the same\n     * resource depending on the content type accepted. For instance,\n     * a backend may respond with either a JSON (the accept header\n     * indicates so) or a HTML representation (the default, no accept\n     * header given).\n     */\n    accept: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * Whether to allow request to be answered from cache.\n     *\n     * Allowed values:\n     *\n     * * <code>true</code>: Allow caching (Default)\n     * * <code>false</code>: Prohibit caching. Appends nocache parameter to URL.\n     * * <code>String</code>: Any Cache-Control request directive\n     *\n     * If a string is given, it is inserted in the request's Cache-Control\n     * header. A request’s Cache-Control header may contain a number of directives\n     * controlling the behavior of any caches in between client and origin\n     * server.\n     *\n     * * <code>\"no-cache\"</code>: Force caches to submit request in order to\n     *   validate the freshness of the representation. Note that the requested\n     *   resource may still be served from cache if the representation is\n     *   considered fresh. Use this directive to ensure freshness but save\n     *   bandwidth when possible.\n     * * <code>\"no-store\"</code>: Do not keep a copy of the representation under\n     *   any conditions.\n     *\n     * See <a href=\"http://www.mnot.net/cache_docs/#CACHE-CONTROL\">\n     * Caching tutorial</a> for an excellent introduction to Caching in general.\n     * Refer to the corresponding section in the\n     * <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">\n     * HTTP 1.1 specification</a> for more details and advanced directives.\n     *\n     * It is recommended to choose an appropriate Cache-Control directive rather\n     * than prohibit caching using the nocache parameter.\n     */\n    cache: {\n      check: function(value) {\n        return qx.lang.Type.isBoolean(value) ||\n          qx.lang.Type.isString(value);\n      },\n      init: true\n    }\n  },\n\n  members:\n  {\n\n    /**\n     * @type {Function} Parser.\n     */\n    _parser: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create XHR transport.\n     *\n     * @return {qx.bom.request.Xhr} Transport.\n     */\n    _createTransport: function() {\n      return new qx.bom.request.Xhr();\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * Append request data to URL if HTTP method is GET. Append random\n     * string to URL if required by value of {@link #cache}.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl: function() {\n      var url = this.getUrl(),\n          serializedData;\n\n      if (this.getMethod() === \"GET\" && this.getRequestData()) {\n        serializedData = this._serializeData(this.getRequestData());\n        url = qx.util.Uri.appendParamsToUrl(url, serializedData);\n      }\n\n      if (this.getCache() === false) {\n        // Make sure URL cannot be served from cache and new request is made\n        url = qx.util.Uri.appendParamsToUrl(url, {nocache: new Date().valueOf()});\n      }\n\n      return url;\n    },\n\n    // overridden\n    _getConfiguredRequestHeaders: function() {\n      var headers = {},\n          isAllowsBody = qx.util.Request.methodAllowsRequestBody(this.getMethod());\n\n      // Follow convention to include X-Requested-With header when same origin\n      if (!qx.util.Request.isCrossDomain(this.getUrl())) {\n        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n      }\n\n      // Include Cache-Control header if configured\n      if (qx.lang.Type.isString(this.getCache())) {\n        headers[\"Cache-Control\"] = this.getCache();\n      }\n\n      // By default, set content-type urlencoded for requests with body\n      if (this.getRequestData() && isAllowsBody) {\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n      }\n\n      // What representations to accept\n      if (this.getAccept()) {\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\"Accepting: '\" + this.getAccept() + \"'\");\n        }\n        headers[\"Accept\"] = this.getAccept();\n      }\n\n      return headers;\n    },\n\n    // overridden\n    _getMethod: function() {\n      return this.getMethod();\n    },\n\n    // overridden\n    _isAsync: function() {\n      return this.isAsync();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PARSING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create response parser.\n     *\n     * @return {qx.util.ResponseParser} parser.\n     */\n    _createResponseParser: function() {\n        return new qx.util.ResponseParser();\n    },\n\n    /**\n     * Returns response parsed with parser determined by content type.\n     *\n     * @return {String|Object} The parsed response of the request.\n     */\n    _getParsedResponse: function() {\n      var response = this._transport.responseType === 'blob' ? this._transport.response : this._transport.responseText,\n          contentType = this.getResponseContentType() || \"\",\n          parsedResponse = \"\";\n\n      try {\n        parsedResponse = this._parser.parse(response, contentType);\n        this._parserFailed = false\n      } catch(e) {\n        this._parserFailed = true\n        this.fireDataEvent(\"parseError\", {\n          error: e,\n          response: response\n        });\n      }\n\n      return parsedResponse;\n    },\n\n    /**\n     * Set parser used to parse response once request has\n     * completed successfully.\n     *\n     * @see qx.util.ResponseParser#setParser\n     *\n     * @param parser {String|Function}\n     * @return {Function} The parser function\n     */\n    setParser: function(parser) {\n      return this._parser.setParser(parser);\n    }\n  }\n});\n"
  ]
}