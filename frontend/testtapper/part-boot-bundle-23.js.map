{
  "version": 3,
  "sources": [
    "../transpiled/qx/bom/rest/Resource.js",
    "../transpiled/qx/event/type/Rest.js",
    "../transpiled/qx/io/request/authentication/Basic.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/testtapper/part-boot-bundle-23.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Client-side wrapper of a REST resource.\n *\n * Each instance represents a resource in terms of REST. A number of actions\n * (usually HTTP methods) unique to the resource can be defined and invoked.\n * A resource with its actions is configured declaratively by passing a resource\n * description to the constructor, or programmatically using {@link #map}.\n *\n * Each action is associated to a route. A route is a combination of method,\n * URL pattern and optional parameter constraints.\n *\n * An action is invoked by calling a method with the same name. When a URL\n * pattern of a route contains positional parameters, those parameters must be\n * passed when invoking the associated action. Also, constraints defined in the\n * route must be satisfied.\n *\n * When an action is invoked, a request is configured according to the associated\n * route, is passed the URL parameters, request body data, and finally send.\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\n *\n * No constraints on the action's name or the scope of the URLs are imposed. However,\n * if you want to follow RESTful design patterns it is recommended to name actions\n * the same as the HTTP action.\n *\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\n * and could therefore just as well mapped to two distinct resources (for instance,\n * named photos and photosTagged). What style to choose depends on the kind of data\n * returned. For instance, it seems sensible to stick with one resource if the filter\n * only limits the result set (i.e. the individual results have the same properties).\n *\n * In order to respond to successful (or erroneous) invocations of actions,\n * either listen to the generic \"success\" or \"error\" event and get the action\n * from the event data, or listen to action specific events defined at runtime.\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\n *\n * @group (IO)\n * @ignore(qx.core.Object.*)\n */\nqx.Bootstrap.define(\"qx.bom.rest.Resource\",\n{\n  extend: qx.event.Emitter,\n  implement: [ qx.core.IDisposable ],\n\n  /**\n   * @param description {Map?} Each key of the map is interpreted as\n   *  <code>action</code> name. The value associated to the key must be a map\n   *  with the properties <code>method</code> and <code>url</code>.\n   *  <code>check</code> is optional. Also see {@link #map}.\n   *\n   * @see qx.bom.rest\n   * @see qx.io.rest\n   */\n  construct: function(description)\n  {\n    this.__requests = {};\n    this.__routes = {};\n    this.__pollTimers = {};\n    this.__longPollHandlers = {};\n\n    try {\n      if (typeof description !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertMap(description);\n        }\n        this.__mapFromDescription(description);\n      }\n    } catch(e) {\n      this.dispose();\n      throw e;\n    }\n  },\n\n  events:\n  {\n    /**\n     * Fired when any request was successful.\n     *\n     * The action the successful request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Success\", e.g. \"indexSuccess\".\n     */\n    \"success\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when request associated to action given in prefix was successful.\n     *\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\n     * successful.\n     */\n     \"actionSuccess\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request fails.\n     *\n     * The action the failed request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Error\", e.g. \"indexError\".\n     */\n    \"error\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action given in prefix fails.\n     *\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\n     */\n     \"actionError\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when a request is sent to the given endpoint.\n     */\n    \"sent\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action is sent to the given endpoint.\n     *\n     * For example, \"indexSent\" is fired when <code>index()</code> was\n     * called.\n     */\n     \"actionSent\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when a request is started to the given endpoint. This moment is right after the request\n     * was opened and send.\n     */\n    \"started\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action is started to the given endpoint. This moment is\n     * right after the request was opened and send.\n     *\n     * For example, \"indexStarted\" is fired when <code>index()</code> was called.\n     */\n     \"actionStarted\": \"qx.bom.rest.Resource\"\n  },\n\n  statics:\n  {\n    /**\n     * Number of milliseconds below a long-poll request is considered immediate and\n     * subject to throttling checks.\n     */\n    POLL_THROTTLE_LIMIT: 100,\n\n    /**\n     * Number of immediate long-poll responses accepted before throttling takes place.\n     */\n    POLL_THROTTLE_COUNT: 30,\n\n    /**\n     * A symbol used in checks to declare required parameter.\n     */\n    REQUIRED: true,\n\n    /**\n     * Get placeholders from URL.\n     *\n     * @param url {String} The URL to parse for placeholders.\n     * @return {Array} Array of placeholders without the placeholder prefix.\n     */\n    placeholdersFromUrl: function(url) {\n      var placeholderRe = /\\{(\\w+)(=\\w+)?\\}/g,\n          match,\n          placeholders = [];\n\n      // With g flag set, searching begins at the regex object's\n      // lastIndex, which is zero initially and increments with each match.\n      while ((match = placeholderRe.exec(url))) {\n        placeholders.push(match[1]);\n      }\n\n      return placeholders;\n    }\n  },\n\n  members:\n  {\n    __requests: null,\n    __routes: null,\n    __baseUrl: null,\n    __pollTimers: null,\n    __longPollHandlers: null,\n    __configureRequestCallback: null,\n\n    /**\n     * @type {Map} Request callbacks for 'onsuccess', 'onfail' and 'onloadend' - see {@link #setRequestHandler}.\n     */\n    __requestHandler: null,\n\n    /**\n     * @type {Function} Function which returns instances from {@link qx.io.request.AbstractRequest}.\n     */\n    __begetRequest: null,\n\n    //\n    // Request\n    //\n\n    /**\n     * Set a request factory function to switch the request implementation.\n     * The created requests have to implement {@link qx.io.request.AbstractRequest}.\n     *\n     * @param fn {Function} Function which returns request instances.\n     *\n     * @internal\n     */\n    setRequestFactory: function(fn) {\n      this.__begetRequest = fn;\n    },\n\n    /**\n     * Sets request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\n     *\n     * @param handler {Map} Map defining callbacks and their context.\n     *\n     * @internal\n     */\n    setRequestHandler: function(handler) {\n      this.__requestHandler = handler;\n    },\n\n    /**\n     * Provides the request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\n     *\n     * @return {Map} Map defining callbacks and their context.\n     */\n    _getRequestHandler: function() {\n      return (this.__requestHandler === null) ? {\n        onsuccess: {\n          callback: function(req, action) {\n            return function() {\n              var response = {\n                  \"id\": parseInt(req.toHashCode(), 10),\n                  \"response\": req.getResponse(),\n                  \"request\": req,\n                  \"action\": action\n              };\n              this.emit(action + \"Success\", response);\n              this.emit(\"success\", response);\n            };\n          },\n          context: this\n        },\n        onfail: {\n          callback: function(req, action) {\n            return function() {\n              var response = {\n                  \"id\": parseInt(req.toHashCode(), 10),\n                  \"response\": req.getResponse(),\n                  \"request\": req,\n                  \"action\": action\n              };\n              this.emit(action + \"Error\", response);\n              this.emit(\"error\", response);\n            };\n          },\n          context: this\n        },\n        onloadend: {\n          callback: function(req, action) {\n            return function() {\n              // [#8315] // dispose asynchronous to work with Sinon.js\n              window.setTimeout(function() {\n                req.dispose();\n              }, 0);\n            };\n          },\n          context: this\n        },\n        onreadystatechange: {\n          callback: function(req, action) {\n            return function () {\n              if (req.getTransport().readyState === qx.bom.request.Xhr.HEADERS_RECEIVED) {\n                var response = {\n                    \"id\": parseInt(req.toHashCode(), 10),\n                    \"request\": req,\n                    \"action\": action\n                };\n                this.emit(action + \"Sent\", response);\n                this.emit(\"sent\", response);\n              }\n\n              if (req.getTransport().readyState === qx.bom.request.Xhr.OPENED) {\n                var payload = {\n                  \"id\": parseInt(req.toHashCode(), 10),\n                  \"request\": req,\n                  \"action\": action\n                };\n                this.emit(action + \"Started\", payload);\n                this.emit(\"started\", payload);\n              }\n            };\n          },\n          context: this\n        },\n        onprogress: {\n          callback: function(req, action) {\n            return function () {\n              var payload = {\n                \"id\": parseInt(req.toHashCode(), 10),\n                \"request\": req,\n                \"action\": action,\n                \"progress\": {\n                  \"lengthComputable\": req.getTransport().progress.lengthComputable,\n                  \"loaded\": req.getTransport().progress.loaded,\n                  \"total\": req.getTransport().progress.total\n                }\n              };\n              this.emit(action + \"Progress\", payload);\n              this.emit(\"progress\", payload);\n            };\n          },\n          context: this\n        }\n      } : this.__requestHandler;\n    },\n\n    /**\n     * Retrieve the currently stored request objects for an action.\n     *\n     * @param action {String} The action (e.g. \"get\", \"post\" ...).\n     * @return {Array|null} Request objects.\n     *\n     * @internal\n     */\n    getRequestsByAction: function (action) {\n      var hasRequests = (this.__requests !== null && action in this.__requests);\n      return hasRequests ? this.__requests[action] : null;\n    },\n\n    /**\n     * Configure request.\n     *\n     * @param callback {Function} Function called before request is send.\n     *   Receives request, action, params and data.\n     */\n    configureRequest: function(callback) {\n      this.__configureRequestCallback = callback;\n    },\n\n    /**\n     * Get request.\n     *\n     * May be overridden to change type of request.\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\n     */\n    _getRequest: function() {\n      return (this.__begetRequest === null) ? new qx.bom.request.SimpleXhr()\n                                            : this.__begetRequest();\n    },\n\n    /**\n     * Create request.\n     *\n     * @param action {String} The action the created request is associated to.\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\n     */\n    __createRequest: function(action) {\n      var req = this._getRequest();\n\n      if (!qx.lang.Type.isArray(this.__requests[action])) {\n        this.__requests[action] = [];\n      }\n\n      qx.core.ObjectRegistry.register(req);\n      this.__requests[action].push(req);\n\n      return req;\n    },\n\n    //\n    // Routes and actions\n    //\n\n    /**\n     * Map action to combination of method and URL pattern.\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    map: function(action, method, url, check) {\n      this.__routes[action] = [method, url, check];\n\n      // Track requests\n      this.__requests[action] = [];\n\n      // Undefine generic getter when action is named \"get\"\n      if (action == \"get\") {\n        this[action] = undefined;\n      }\n\n      // Do not overwrite existing \"non-action\" methods unless the method is\n      // null (i.e. because it exists as a stub for documentation)\n      if (typeof this[action] !== \"undefined\" && this[action] !== null &&\n          this[action].action !== true)\n      {\n        throw new Error(\"Method with name of action (\" +\n          action + \") already exists\");\n      }\n\n      this.__declareEvent(action + \"Success\");\n      this.__declareEvent(action + \"Error\");\n\n      this[action] = qx.lang.Function.bind(function() {\n        Array.prototype.unshift.call(arguments, action);\n        return this.invoke.apply(this, arguments);\n      }, this);\n\n      // Method is safe to overwrite\n      this[action].action = true;\n    },\n\n    /**\n     * Invoke action with parameters.\n     *\n     * Internally called by actions dynamically created.\n     *\n     * May be overridden to customize action and parameter handling.\n     *\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\n     *\n     * @param action {String} Action to invoke.\n     * @param params {Map} Map of parameters inserted into URL when a matching\n     *  positional parameter is found.\n     * @param data {Map|String} Data to be send as part of the request.\n     *  See {@link qx.bom.request.SimpleXhr#getRequestData}.\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\n     * @return {Number} Id of the action's invocation.\n     */\n    invoke: function(action, params, data) {\n      var req = this.__createRequest(action),\n          params = params == null ? {} : params,\n          config = this._getRequestConfig(action, params);\n\n      // Cache parameters\n      this.__routes[action].params = params;\n\n      // Check parameters\n      this.__checkParameters(params, config.check);\n\n      // Configure request\n      this.__configureRequest(req, config, data);\n\n      // Run configuration callback, passing in pre-configured request\n      if (this.__configureRequestCallback) {\n        this.__configureRequestCallback.call(this, req, action, params, data);\n      }\n\n      // Configure JSON request (content type may have been set in configuration callback)\n      this.__configureJsonRequest(req, config, data);\n\n      var reqHandler = this._getRequestHandler();\n\n      // Handle successful request\n      req.addListenerOnce(\n        \"success\",\n        reqHandler.onsuccess.callback(req, action),\n        reqHandler.onsuccess.context\n      );\n      // Handle erroneous request\n      req.addListenerOnce(\n        \"fail\",\n        reqHandler.onfail.callback(req, action),\n        reqHandler.onfail.context\n      );\n      // Handle loadend (Note that loadEnd is fired after \"success\")\n      req.addListenerOnce(\n        \"loadEnd\",\n        reqHandler.onloadend.callback(req, action),\n        reqHandler.onloadend.context\n      );\n      if (reqHandler.hasOwnProperty(\"onreadystatechange\")) {\n        req.addListener(\n          \"readystatechange\",\n          reqHandler.onreadystatechange.callback(req, action),\n          reqHandler.onreadystatechange.context\n        );\n      }\n      // Handle progress (which is fired multiple times)\n      if (reqHandler.hasOwnProperty(\"onprogress\")) {\n        req.addListener(\n          \"progress\",\n          reqHandler.onprogress.callback(req, action),\n          reqHandler.onprogress.context\n        );\n      }\n\n      req.send();\n\n      return parseInt(req.toHashCode(), 10);\n    },\n\n    /**\n     * Set base URL.\n     *\n     * The base URL is prepended to the URLs given in the description.\n     * Changes affect all future invocations.\n     *\n     * @param baseUrl {String} Base URL.\n     */\n    setBaseUrl: function(baseUrl) {\n      this.__baseUrl = baseUrl;\n    },\n\n    /**\n     * Check parameters.\n     *\n     * @param params {Map} Parameters.\n     * @param check {Map} Checks.\n     */\n    __checkParameters: function(params, check) {\n      if(typeof check !== \"undefined\") {\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertObject(check, \"Check must be object with params as keys\");\n        }\n\n        Object.keys(check).forEach(function(param) {\n\n          // Warn about invalid check\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            if (check[param] !== true) {\n              if (qx.core.Environment.get(\"qx.debug\")) {\n                qx.core.Assert.assertRegExp(check[param]);\n              }\n            }\n          }\n\n          // Missing parameter\n          if (check[param] === qx.bom.rest.Resource.REQUIRED && typeof params[param] === \"undefined\") {\n            throw new Error(\"Missing parameter '\" + param + \"'\");\n          }\n\n          // Ignore invalid checks\n          if (!(check[param] && typeof check[param].test == \"function\")) {\n            return;\n          }\n\n          // Invalid parameter\n          if (!check[param].test(params[param])) {\n            throw new Error(\"Parameter '\" + param + \"' is invalid\");\n          }\n        });\n      }\n    },\n\n    /**\n     * Configure request.\n     *\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\n     * @param config {Map} Configuration.\n     * @param data {Map} Data.\n     */\n    __configureRequest: function(req, config, data) {\n      req.setUrl(config.url);\n\n      if (!req.setMethod && config.method !== \"GET\") {\n        throw new Error(\"Request (\" + req.classname + \") doesn't support other HTTP methods than 'GET'\");\n      }\n\n      if (req.setMethod) {\n        req.setMethod(config.method);\n      }\n\n      if (data) {\n        req.setRequestData(data);\n      }\n    },\n\n    /**\n     * Serialize data to JSON when content type indicates.\n     *\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\n     * @param config {Map} Configuration.\n     * @param data {Map} Data.\n     */\n    __configureJsonRequest: function(req, config, data) {\n      if (data) {\n        var contentType = req.getRequestHeader(\"Content-Type\");\n\n        if (req.getMethod && qx.util.Request.methodAllowsRequestBody(req.getMethod())) {\n          if ((/application\\/.*\\+?json/).test(contentType)) {\n            data = qx.lang.Json.stringify(data);\n            req.setRequestData(data);\n          }\n        }\n      }\n    },\n\n    /**\n     * Abort action.\n     *\n     * @param varargs {String|Number} Action of which all invocations to abort\n     *  (when string), or a single invocation of an action to abort (when number)\n     */\n    abort: function(varargs) {\n      if (qx.lang.Type.isNumber(varargs)) {\n        var id = varargs;\n        var post = qx.core.ObjectRegistry.getPostId();\n        var req = qx.core.ObjectRegistry.fromHashCode(id + post);\n        if (req) {\n          req.abort();\n        }\n      } else {\n        var action = varargs;\n        var reqs = this.__requests[action];\n        if (this.__requests[action]) {\n          reqs.forEach(function(req) {\n            req.abort();\n          });\n        }\n      }\n    },\n\n    /**\n     * Resend request associated to action.\n     *\n     * Replays parameters given when action was invoked originally.\n     *\n     * @param action {String} Action to refresh.\n     */\n    refresh: function(action) {\n      this.invoke(action, this.__routes[action].params);\n    },\n\n    /**\n     * Periodically invoke action.\n     *\n     * Replays parameters given when action was invoked originally. When the\n     * action was not yet invoked and requires parameters, parameters must be\n     * given.\n     *\n     * Please note that IE tends to cache overly aggressive. One work-around is\n     * to disable caching on the client side by configuring the request with\n     * <code>setCache(false)</code>. If you control the server, a better\n     * work-around is to include appropriate headers to explicitly control\n     * caching. This way you still avoid requests that can be correctly answered\n     * from cache (e.g. when nothing has changed since the last poll). Please\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n     * XMLHttpRequest Caching Test</a> for available options.\n     *\n     * @lint ignoreUnused(intervalListener)\n     *\n     * @param action {String} Action to poll.\n     * @param interval {Number} Interval in ms.\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\n     *   invoke a call immediately.\n     */\n    poll: function(action, interval, params, immediately) {\n      // Dispose timer previously created for action\n      if (this.__pollTimers[action]) {\n        this.stopPollByAction(action);\n      }\n\n      // Fallback to previous params\n      if (typeof params == \"undefined\") {\n        params = this.__routes[action].params;\n      }\n\n      // Invoke immediately\n      if (immediately) {\n        this.invoke(action, params);\n      }\n\n      var intervalListener = (function(scope) {\n        return function() {\n          var req = scope.__requests[action][0];\n          if (!immediately && !req) {\n            scope.invoke(action, params);\n            return;\n          }\n          if (req.isDone() || req.isDisposed()) {\n            scope.refresh(action);\n          }\n        };\n      })(this);\n\n      this._startPoll(action, intervalListener, interval);\n    },\n\n\n    /**\n     * Start a poll process.\n     *\n     * @param action {String} Action to poll.\n     * @param listener {Function} The function to repeatedly execute at the given interval.\n     * @param interval {Number} Interval in ms.\n     */\n    _startPoll: function(action, listener, interval) {\n      this.__pollTimers[action] = {\n        \"id\": window.setInterval(listener, interval),\n        \"interval\": interval,\n        \"listener\": listener\n      };\n    },\n\n    /**\n     * Stops a poll process by the associated action.\n     *\n     * @param action {String} Action to poll.\n     */\n    stopPollByAction: function(action) {\n      if (action in this.__pollTimers) {\n        var intervalId = this.__pollTimers[action].id;\n        window.clearInterval(intervalId);\n      }\n    },\n\n    /**\n     * Restarts a poll process by the associated action.\n     *\n     * @param action {String} Action to poll.\n     */\n    restartPollByAction: function(action) {\n      if (action in this.__pollTimers) {\n        var timer = this.__pollTimers[action];\n        this.stopPollByAction(action);\n        this._startPoll(action, timer.listener, timer.interval);\n      }\n    },\n\n    /**\n     * Long-poll action.\n     *\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\n     * server signals new data. The server determines when new data is available,\n     * while the client keeps open a request. Requires configuration on the\n     * server side. Basically, the server must not close a connection until\n     * new data is available. For a high level introduction to long-polling,\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n     * Ajax with long polling</a>.\n     *\n     * Uses {@link #refresh} internally. Make sure you understand the\n     * implications of IE's tendency to cache overly aggressive.\n     *\n     * Note no interval is given on the client side.\n     *\n     * @lint ignoreUnused(longPollHandler)\n     *\n     * @param action {String} Action to poll.\n     * @return {String} Id of handler responsible for long-polling. To stop\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\n     */\n    longPoll: function(action) {\n      var res = this,\n          lastResponse,               // Keep track of last response\n          immediateResponseCount = 0; // Count immediate responses\n\n      // Throttle to prevent high load on server and client\n      function throttle() {\n        var isImmediateResponse =\n          lastResponse &&\n          ((new Date()) - lastResponse) < res._getThrottleLimit();\n\n        if (isImmediateResponse) {\n          immediateResponseCount += 1;\n          if (immediateResponseCount > res._getThrottleCount()) {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              qx.Bootstrap.debug(\"Received successful response more than \" +\n                res._getThrottleCount() + \" times subsequently, each within \" +\n                res._getThrottleLimit() + \" ms. Throttling.\");\n            }\n            return true;\n          }\n        }\n\n        // Reset counter on delayed response\n        if (!isImmediateResponse) {\n          immediateResponseCount = 0;\n        }\n\n        return false;\n      }\n\n      var handlerId = this.__longPollHandlers[action] =\n        this.addListener(action + \"Success\", function longPollHandler() {\n          if (res.isDisposed()) {\n            return;\n          }\n\n          if (!throttle()) {\n            lastResponse = new Date();\n            res.refresh(action);\n          }\n        });\n\n      this.invoke(action);\n      return handlerId;\n    },\n\n    /**\n     * Get request configuration for action and parameters.\n     *\n     * This is were placeholders are replaced with parameters.\n     *\n     * @param action {String} Action associated to request.\n     * @param params {Map} Parameters to embed in request.\n     * @return {Map} Map of configuration settings. Has the properties\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\n     */\n    _getRequestConfig: function(action, params) {\n      var route = this.__routes[action];\n\n      // Not modify original params\n      var params = qx.lang.Object.clone(params);\n\n      if (!qx.lang.Type.isArray(route)) {\n        throw new Error(\"No route for action \" + action);\n      }\n\n      var method = route[0],\n          url = this.__baseUrl !== null ? this.__baseUrl + route[1] : route[1],\n          check = route[2],\n          placeholders = qx.bom.rest.Resource.placeholdersFromUrl(url);\n\n      params = params || {};\n\n      placeholders.forEach(function(placeholder) {\n        // Placeholder part of template and default value\n        var re = new RegExp(\"{\" + placeholder + \"=?(\\\\w+)?}\"),\n            defaultValue = url.match(re)[1];\n\n        // Fill in default or empty string when missing\n        if (typeof params[placeholder] === \"undefined\") {\n          if (defaultValue) {\n            params[placeholder] = defaultValue;\n          } else {\n            params[placeholder] = \"\";\n          }\n        }\n\n        url = url.replace(re, params[placeholder]);\n      });\n\n      return {method: method, url: url, check: check};\n    },\n\n    /**\n     * Override to adjust the throttle limit.\n     * @return {Integer} Throttle limit in milliseconds\n     */\n    _getThrottleLimit: function() {\n      return qx.bom.rest.Resource.POLL_THROTTLE_LIMIT;\n    },\n\n    /**\n     * Override to adjust the throttle count.\n     * @return {Integer} Throttle count\n     */\n    _getThrottleCount: function() {\n      return qx.bom.rest.Resource.POLL_THROTTLE_COUNT;\n    },\n\n    /**\n     * Map actions from description.\n     *\n     * Allows to decoratively define routes.\n     *\n     * @param description {Map} Map that defines the routes.\n     */\n    __mapFromDescription: function(description) {\n      Object.keys(description).forEach(function(action) {\n        var route = description[action],\n            method = route.method,\n            url = route.url,\n            check = route.check;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertString(method, \"Method must be string for route '\" + action + \"'\");\n          qx.core.Assert.assertString(url, \"URL must be string for route '\" + action + \"'\");\n        }\n\n        this.map(action, method, url, check);\n      }, this);\n    },\n\n    /**\n     * Declare event at runtime.\n     *\n     * @param type {String} Type of event.\n     */\n    __declareEvent: function(type) {\n      if (!this.constructor.$$events) {\n        this.constructor.$$events = {};\n      }\n\n      if (!this.constructor.$$events[type]) {\n        this.constructor.$$events[type] = \"qx.bom.rest.Resource\";\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DISPOSER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns true if the object is disposed.\n     *\n     * @return {Boolean} Whether the object has been disposed\n     */\n    isDisposed : function() {\n      return this.$$disposed || false;\n    },\n\n\n    /**\n     * Dispose this object\n     *\n     */\n    dispose : function()\n    {\n      // Check first\n      if (this.$$disposed) {\n        return;\n      }\n\n      // Mark as disposed (directly, not at end, to omit recursions)\n      this.$$disposed = true;\n\n      // Debug output\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 2) {\n          qx.Bootstrap.debug(this, \"Disposing \" + this.classname + \"[\" + this.toHashCode() + \"]\");\n        }\n      }\n\n      this.destruct();\n\n      // Additional checks\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 0)\n        {\n          var key, value;\n          for (key in this)\n          {\n            value = this[key];\n\n            // Check for Objects but respect values attached to the prototype itself\n            if (value !== null && typeof value === \"object\" && !(qx.Bootstrap.isString(value)))\n            {\n              // Check prototype value\n              // undefined is the best, but null may be used as a placeholder for\n              // private variables (hint: checks in qx.Class.define). We accept both.\n              if (this.constructor.prototype[key] != null) {\n                continue;\n              }\n\n              var ff2 = navigator.userAgent.indexOf(\"rv:1.8.1\") != -1;\n              var ie6 = navigator.userAgent.indexOf(\"MSIE 6.0\") != -1;\n              // keep the old behavior for IE6 and FF2\n              if (ff2 || ie6) {\n                if (qx.core.Object && value instanceof qx.core.Object || qx.core.Environment.get(\"qx.debug.dispose.level\") > 1) {\n                  qx.Bootstrap.warn(this, \"Missing destruct definition for '\" + key + \"' in \" + this.classname + \"[\" + this.toHashCode() + \"]: \" + value);\n                  delete this[key];\n                }\n              } else {\n                if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 1) {\n                  qx.Bootstrap.warn(this, \"Missing destruct definition for '\" + key + \"' in \" + this.classname + \"[\" + this.toHashCode() + \"]: \" + value);\n                  delete this[key];\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Destructs the Resource.\n     *\n     * All created requests, routes and pollTimers will be disposed.\n     */\n    destruct: function() {\n      var action;\n\n      for (action in this.__requests) {\n        if (this.__requests[action]) {\n          this.__requests[action].forEach(function(req) {\n            req.dispose();\n          });\n        }\n      }\n\n      if (this.__pollTimers) {\n        for (action in this.__pollTimers) {\n          this.stopPollByAction(action);\n        }\n      }\n\n      if (this.__longPollHandlers) {\n        for (action in this.__longPollHandlers) {\n          var id = this.__longPollHandlers[action];\n          this.removeListenerById(id);\n        }\n      }\n\n      this.__requests = this.__routes = this.__pollTimers = null;\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * Rest event object.\n */\nqx.Class.define(\"qx.event.type.Rest\",\n{\n  extend: qx.event.type.Data,\n\n  properties:\n  {\n    /**\n     * The request of the event.\n     */\n    request: {\n      check: \"qx.io.request.AbstractRequest\"\n    },\n\n    /**\n     * The action that invoked the request.\n     */\n    action: {\n      check: \"String\"\n    },\n\n    /**\n     * The phase of the request.\n     */\n    phase: {\n      check: \"String\"\n    },\n\n    /**\n     * The id of the request.\n     */\n    id: {\n      check: \"Number\"\n    }\n  },\n\n  members:\n  {\n    /**\n     * Initializes an event object.\n     *\n     * @param data {var} Then event's new data\n     * @param old {var?null} The event's old data\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *  action prevented. The default action can either be the browser's\n     *  default action of a native event (e.g. open the context menu on a\n     *  right click) or the default action of a qooxdoo class (e.g. close\n     *  the window widget). The default action can be prevented by calling\n     *  {@link qx.event.type.Event#preventDefault}\n     * @param request {qx.io.request.AbstractRequest} The associated request.\n     * @param action {String} The associated action.\n     * @param phase {String} The associated phase.\n     * @return {qx.event.type.Data} The initialized instance.\n     */\n    init: function(data, old, cancelable, request, action, phase) {\n      this.base(arguments, data, old, cancelable);\n\n      this.setRequest(request);\n      this.setAction(action);\n      this.setPhase(phase);\n      this.setId(parseInt(request.toHashCode(), 10));\n\n      return this;\n    },\n\n    /**\n     * Get a copy of this object\n     *\n     * @param embryo {qx.event.type.Data?null} Optional event class, which will\n     *  be configured using the data of this event instance. The event must be\n     *  an instance of this event class. If the data is <code>null</code>,\n     *  a new pooled instance is created.\n     * @return {qx.event.type.Data} A copy of this object.\n     */\n    clone: function(embryo) {\n      var clone = this.base(arguments, embryo);\n      clone.setAction(this.getAction());\n      clone.setPhase(this.getPhase());\n      clone.setRequest(this.getRequest());\n      return clone;\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * Basic authentication.\n */\nqx.Class.define(\"qx.io.request.authentication.Basic\",\n{\n\n  extend: qx.core.Object,\n\n  implement: qx.io.request.authentication.IAuthentication,\n\n  /**\n   * @param username {var} The username to use.\n   * @param password {var} The password to use.\n   */\n  construct : function(username, password)\n  {\n     this.__credentials = qx.util.Base64.encode(username + ':' + password);\n  },\n\n  members :\n  {\n    __credentials : null,\n\n    /**\n     * Headers to include for basic authentication.\n     * @return {Map} Map containing the authentication credentials\n     */\n    getAuthHeaders: function() {\n      return [\n        {key: \"Authorization\", value: \"Basic \" + this.__credentials}\n      ];\n    }\n  }\n});\n"
  ]
}