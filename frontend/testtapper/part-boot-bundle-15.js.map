{
  "version": 3,
  "sources": [
    "../transpiled/qx/util/ResponseParser.js"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;AAAC,EAAA,EAAC,CAAC,SAAF,CAAY,oBAAZ,CAAiC,aAAjC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;AAOA,EAAA,EAAC,CAAC,SAAF,CAAY,MAAZ,CAAmB,wBAAnB,EACA;AAEC;;;AAGA,IAAA,SAAS,EAAE,mBAAS,MAAT,EAAiB;AAC1B,UAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,aAAK,SAAL,CAAe,MAAf;AACD;AACF,KATF;AAWC,IAAA,OAAO,EACP;AACE;;;;;;AAMA,MAAA,MAAM,EAAE;AACN,QAAA,IAAI,EAAE,EAAE,CAAC,IAAH,CAAQ,IAAR,CAAa,KADb;AAEN,QAAA,GAAG,EAAE,EAAE,CAAC,GAAH,CAAO,QAAP,CAAgB;AAFf;AAPV,KAZD;AAyBC,IAAA,OAAO,EACP;AACE,MAAA,QAAQ,EAAE,IADZ;;AAGE;;;;;;;;AAQA,MAAA,KAAK,EAAE,eAAS,QAAT,EAAmB,WAAnB,EAAgC;AACrC,YAAI,MAAM,GAAG,KAAK,UAAL,CAAgB,WAAhB,CAAb;;AAEA,YAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAChC,cAAI,QAAQ,KAAK,EAAjB,EAAqB;AACnB,mBAAO,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,QAAlB,CAAP;AACD;AACF;;AAED,eAAO,QAAP;AACD,OArBH;;AAwBE;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAA,SAAS,EAAE,mBAAS,MAAT,EAAiB;AAC1B;AACA,YAAI,OAAO,EAAE,CAAC,IAAH,CAAQ,cAAR,CAAuB,MAAvB,CAA8B,MAA9B,CAAP,KAAiD,UAArD,EAAiE;AAC/D,iBAAO,KAAK,QAAL,GAAgB,EAAE,CAAC,IAAH,CAAQ,cAAR,CAAuB,MAAvB,CAA8B,MAA9B,CAAvB;AACD,SAJyB,CAM1B;;;AACyC;AACvC,UAAA,EAAE,CAAC,IAAH,CAAQ,MAAR,CAAe,cAAf,CAA8B,MAA9B;AACD;AAED,eAAO,KAAK,QAAL,GAAgB,MAAvB;AACD,OA/DH;;AAkEE;;;;;;;;;;;;;;AAcA,MAAA,UAAU,EAAE,oBAAS,WAAT,EAAsB;AAChC,YAAI,MAAM,GAAG,KAAK,QAAlB;AAAA,YACI,eAAe,GAAG,EADtB;AAAA,YAEI,qBAAqB,GAAG,EAF5B,CADgC,CAKhC;;AACA,YAAI,MAAJ,EAAY;AACV,iBAAO,MAAP;AACD,SAR+B,CAUhC;;;AAEA,QAAA,eAAe,GAAG,WAAW,IAAI,EAAjC,CAZgC,CAchC;;AACA,QAAA,qBAAqB,GAAG,eAAe,CAAC,OAAhB,CAAwB,MAAxB,EAAgC,EAAhC,CAAxB;;AAEA,YAAK,gCAAD,CAAmC,IAAnC,CAAwC,qBAAxC,CAAJ,EAAoE;AAClE,UAAA,MAAM,GAAG,EAAE,CAAC,IAAH,CAAQ,cAAR,CAAuB,MAAvB,CAA8B,IAAvC;AACD;;AAED,YAAK,oBAAD,CAAuB,IAAvB,CAA4B,qBAA5B,CAAJ,EAAwD;AACtD,UAAA,MAAM,GAAG,EAAE,CAAC,IAAH,CAAQ,cAAR,CAAuB,MAAvB,CAA8B,GAAvC;AACD,SAvB+B,CAyBhC;;;AACA,YAAK,sBAAD,CAAyB,IAAzB,CAA8B,eAA9B,CAAJ,EAAoD;AAClD,UAAA,MAAM,GAAG,EAAE,CAAC,IAAH,CAAQ,cAAR,CAAuB,MAAvB,CAA8B,GAAvC;AACD;;AAED,eAAO,MAAP;AACD;AA/GH;AA1BD,GADA;AAzBA,EAAA,EAAC,CAAC,IAAF,CAAO,cAAP,CAAsB,aAAtB,GAAsC,aAAtC",
  "file": "build-output/testtapper/part-boot-bundle-15.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Parsers for parsing response strings (especially for XHR).\n *\n * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\n *\n * @require(qx.util.ResponseParser#parse)\n */\nqx.Bootstrap.define(\"qx.util.ResponseParser\",\n{\n\n  /**\n   * @param parser {String|Function} See {@link #setParser}.\n   */\n  construct: function(parser) {\n    if (parser !== undefined) {\n      this.setParser(parser);\n    }\n  },\n\n  statics:\n  {\n    /**\n     * @type {Map} Map of parser functions. Parsers defined here can be\n     * referenced symbolically, e.g. with {@link #setParser}.\n     *\n     * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\n     */\n    PARSER: {\n      json: qx.lang.Json.parse,\n      xml: qx.xml.Document.fromString\n    }\n  },\n\n  members :\n  {\n    __parser: null,\n\n    /**\n     * Returns given response parsed with parser\n     * determined by {@link #_getParser}.\n     *\n     * @param response {String} response (e.g JSON/XML string)\n     * @param contentType {String} contentType (e.g. 'application/json')\n     * @return {String|Object} The parsed response of the request.\n     */\n    parse: function(response, contentType) {\n      var parser = this._getParser(contentType);\n\n      if (typeof parser === \"function\") {\n        if (response !== \"\") {\n          return parser.call(this, response);\n        }\n      }\n\n      return response;\n    },\n\n\n    /**\n     * Set parser used to parse response once request has\n     * completed successfully.\n     *\n     * Usually, the parser is correctly inferred from the\n     * content type of the response. This method allows to force the\n     * parser being used, e.g. if the content type returned from\n     * the backend is wrong or the response needs special parsing.\n     *\n     * Parser most typically used can be referenced symbolically.\n     * To cover edge cases, a function can be given. When parsing\n     * the response, this function is called with the raw response as\n     * first argument.\n     *\n     * @param parser {String|Function}\n     *\n     * Can be:\n     *\n     * <ul>\n     *   <li>A parser defined in {@link qx.util.ResponseParser#PARSER},\n     *       referenced by string.</li>\n     *   <li>The function to invoke.\n     *       Receives the raw response as argument.</li>\n     * </ul>\n     *\n     * @return {Function} The parser function\n     */\n    setParser: function(parser) {\n      // Symbolically given known parser\n      if (typeof qx.util.ResponseParser.PARSER[parser] === \"function\") {\n        return this.__parser = qx.util.ResponseParser.PARSER[parser];\n      }\n\n      // If parser is not a symbol, it must be a function\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertFunction(parser);\n      }\n\n      return this.__parser = parser;\n    },\n\n\n    /**\n     * Gets the parser.\n     *\n     * If not defined explicitly using {@link #setParser},\n     * the parser is inferred from the content type.\n     *\n     * Override this method to extend the list of content types\n     * being handled.\n     *\n     * @param contentType {String}\n     * @return {Function|null} The parser function or <code>null</code> if the\n     * content type is undetermined.\n     *\n     */\n    _getParser: function(contentType) {\n      var parser = this.__parser,\n          contentTypeOrig = \"\",\n          contentTypeNormalized = \"\";\n\n      // Use user-provided parser, if any\n      if (parser) {\n        return parser;\n      }\n\n      // See http://restpatterns.org/Glossary/MIME_Type\n\n      contentTypeOrig = contentType || \"\";\n\n      // Ignore parameters (e.g. the character set)\n      contentTypeNormalized = contentTypeOrig.replace(/;.*$/, \"\");\n\n      if ((/^application\\/(\\w|\\.)*\\+?json$/).test(contentTypeNormalized)) {\n        parser = qx.util.ResponseParser.PARSER.json;\n      }\n\n      if ((/^application\\/xml$/).test(contentTypeNormalized)) {\n        parser = qx.util.ResponseParser.PARSER.xml;\n      }\n\n      // Deprecated\n      if ((/[^\\/]+\\/[^\\+]+\\+xml$/).test(contentTypeOrig)) {\n        parser = qx.util.ResponseParser.PARSER.xml;\n      }\n\n      return parser;\n    }\n  }\n});\n\n"
  ]
}