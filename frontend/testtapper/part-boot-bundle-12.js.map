{
  "version": 3,
  "sources": [
    "../transpiled/qx/ui/form/renderer/IFormRenderer.js",
    "../transpiled/qx/ui/form/renderer/AbstractRenderer.js",
    "../transpiled/qx/ui/form/renderer/Single.js",
    "../transpiled/qx/ui/layout/Grid.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/testtapper/part-boot-bundle-12.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * This interface defines the necessary features a form renderer should have.\n * Keep in mind that all renderes has to be widgets.\n */\nqx.Interface.define(\"qx.ui.form.renderer.IFormRenderer\",\n{\n  members :\n  {\n    /**\n     * Add a group of form items with the corresponding names. The names should\n     * be displayed as hint for the user what to do with the form item.\n     * The title is optional and can be used as grouping for the given form\n     * items.\n     *\n     * @param items {qx.ui.core.Widget[]} An array of form items to render.\n     * @param names {String[]} An array of names for the form items.\n     * @param title {String?} A title of the group you are adding.\n     * @param itemsOptions {Array?null} The added additional data.\n     * @param headerOptions {Map?null} The options map as defined by the form\n     *   for the current group header.\n     */\n    addItems : function(items, names, title, itemsOptions, headerOptions) {},\n\n\n    /**\n     * Adds a button the form renderer.\n     *\n     * @param button {qx.ui.form.Button} A button which should be added to\n     *   the form.\n     * @param options {Map?null} The added additional data.\n     */\n    addButton : function(button, options) {}\n\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Abstract renderer for {@link qx.ui.form.Form}. This abstract renderer should\n * be the superclass of all form renderer. It takes the form, which is\n * supplied as constructor parameter and configures itself. So if you need to\n * set some additional information on your renderer before adding the widgets,\n * be sure to do that before calling this.base(arguments, form).\n */\nqx.Class.define(\"qx.ui.form.renderer.AbstractRenderer\",\n{\n  type : \"abstract\",\n  extend : qx.ui.core.Widget,\n  implement : qx.ui.form.renderer.IFormRenderer,\n\n  /**\n   * @param form {qx.ui.form.Form} The form to render.\n   */\n  construct : function(form)\n  {\n    this.base(arguments);\n\n    this._labels = [];\n\n    // translation support\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\", this._onChangeLocale, this\n      );\n      this._names = [];\n    }\n    this._form = form;\n    this._render();\n\n    form.addListener(\"change\", this._onFormChange, this);\n  },\n\n  properties :\n  {\n    /**\n     * A string that is appended to the label if it is not empty.\n     * Defaults to \" :\"\n     */\n    labelSuffix :\n    {\n      check : \"String\",\n      init : \" :\",\n      event : \"changeLabelSuffix\",\n      nullable : true\n    },\n\n    /**\n     * A string that is appended to the label and the label suffix if the corresponding\n     * form field is mandatory. Defaults to space plus a red asterisk.\n     */\n    requiredSuffix :\n    {\n      check : \"String\",\n      init : \" <span style='color:red'>*</span> \",\n      event : \"changeRequiredSuffix\",\n      nullable : false\n    }\n  },\n\n\n  members :\n  {\n    _names : null,\n    _form : null,\n    _labels : null,\n\n\n    /**\n     * Renders the form: adds the items and buttons.\n     */\n    _render : function() {\n      // add the groups\n      var groups = this._form.getGroups();\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        this.addItems(\n          group.items, group.labels, group.title, group.options, group.headerOptions\n        );\n      }\n\n      // add the buttons\n      var buttons = this._form.getButtons();\n      var buttonOptions = this._form.getButtonOptions();\n      for (var i = 0; i < buttons.length; i++) {\n        this.addButton(buttons[i], buttonOptions[i]);\n      }\n    },\n\n\n    /**\n     * Handler responsible for updating the rendered widget as soon as the\n     * form changes.\n     */\n    _onFormChange : function() {\n      this._removeAll();\n      // remove all created labels\n      for (var i=0; i < this._labels.length; i++) {\n        this._labels[i].dispose();\n      }\n      this._labels = [];\n\n      this._render();\n    },\n\n\n    /**\n     * Helper to bind the item's visibility to the label's visibility.\n     * @param item {qx.ui.core.Widget} The form element.\n     * @param label {qx.ui.basic.Label} The label for the form element.\n     */\n    _connectVisibility : function(item, label) {\n      // map the items visibility to the label\n      item.bind(\"visibility\", label, \"visibility\");\n    },\n\n\n    /**\n     * Locale change event handler\n     *\n     * @signature function(e)\n     * @param e {Event} the change event\n     */\n    _onChangeLocale : qx.core.Environment.select(\"qx.dynlocale\",\n    {\n      \"true\" : function(e) {\n        for (var i = 0; i < this._names.length; i++) {\n          var entry = this._names[i];\n          if (entry.name && entry.name.translate) {\n            entry.name = entry.name.translate();\n          }\n          var newText = this._createLabelText(entry.name, entry.item);\n          entry.label.setValue(newText);\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    /**\n     * Creates the label text for the given form item.\n     *\n     * @param name {String} The content of the label without the\n     *   trailing * and :\n     * @param item {qx.ui.form.IForm} The item, which has the required state.\n     * @return {String} The text for the given item.\n     */\n    _createLabelText : function(name, item)\n    {\n      var requiredSuffix = \"\";\n      if (item.getRequired()) {\n        requiredSuffix = this.getRequiredSuffix();\n      }\n\n      // Create the label. Append a suffix only if there's text to display.\n      var labelSuffix = name.length > 0 || item.getRequired() ? this.getLabelSuffix() : \"\";\n      return name + requiredSuffix + labelSuffix;\n    },\n\n\n    // interface implementation\n    addItems : function(items, names, title) {\n      throw new Error(\"Abstract method call\");\n    },\n\n\n    // interface implementation\n    addButton : function(button) {\n      throw new Error(\"Abstract method call\");\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n    this._names = null;\n\n    this._form.removeListener(\"change\", this._onFormChange, this);\n    this._form = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Single column renderer for {@link qx.ui.form.Form}.\n */\nqx.Class.define(\"qx.ui.form.renderer.Single\",\n{\n  extend : qx.ui.form.renderer.AbstractRenderer,\n\n\n  construct : function(form)\n  {\n    var layout = new qx.ui.layout.Grid();\n    layout.setSpacing(6);\n    layout.setColumnFlex(1, 1);\n    layout.setColumnAlign(0, \"right\", \"top\");\n    this._setLayout(layout);\n\n    this.base(arguments, form);\n  },\n\n\n  members :\n  {\n    _row : 0,\n    _buttonRow : null,\n\n\n    // overridden\n    _onFormChange : function() {\n      if (this._buttonRow) {\n        this._buttonRow.destroy();\n        this._buttonRow = null;\n      }\n      this._row = 0;\n      this.base(arguments);\n    },\n\n\n    /**\n     * Add a group of form items with the corresponding names. The names are\n     * displayed as label.\n     * The title is optional and is used as grouping for the given form\n     * items.\n     *\n     * @param items {qx.ui.core.Widget[]} An array of form items to render.\n     * @param names {String[]} An array of names for the form items.\n     * @param title {String?} A title of the group you are adding.\n     */\n    addItems : function(items, names, title) {\n      // add the header\n      if (title != null) {\n        this._add(\n          this._createHeader(title), {row: this._row, column: 0, colSpan: 2}\n        );\n        this._row++;\n      }\n\n      // add the items\n      for (var i = 0; i < items.length; i++) {\n        var label = this._createLabel(names[i], items[i]);\n        this._add(label, {row: this._row, column: 0});\n        var item = items[i];\n        label.setBuddy(item);\n        this._add(item, {row: this._row, column: 1});\n        this._row++;\n\n        this._connectVisibility(item, label);\n\n        // store the names for translation\n        if (qx.core.Environment.get(\"qx.dynlocale\")) {\n          this._names.push({name: names[i], label: label, item: items[i]});\n        }\n      }\n    },\n\n\n    /**\n     * Adds a button the form renderer. All buttons will be added in a\n     * single row at the bottom of the form.\n     *\n     * @param button {qx.ui.form.Button} The button to add.\n     */\n    addButton : function(button) {\n      if (this._buttonRow == null) {\n        // create button row\n        this._buttonRow = new qx.ui.container.Composite();\n        this._buttonRow.setMarginTop(5);\n        var hbox = new qx.ui.layout.HBox();\n        hbox.setAlignX(\"right\");\n        hbox.setSpacing(5);\n        this._buttonRow.setLayout(hbox);\n        // add the button row\n        this._add(this._buttonRow, {row: this._row, column: 0, colSpan: 2});\n        // increase the row\n        this._row++;\n      }\n\n      // add the button\n      this._buttonRow.add(button);\n    },\n\n\n    /**\n     * Returns the set layout for configuration.\n     *\n     * @return {qx.ui.layout.Grid} The grid layout of the widget.\n     */\n    getLayout : function() {\n      return this._getLayout();\n    },\n\n\n    /**\n     * Creates a label for the given form item.\n     *\n     * @param name {String} The content of the label without the\n     *   trailing * and :\n     * @param item {qx.ui.core.Widget} The item, which has the required state.\n     * @return {qx.ui.basic.Label} The label for the given item.\n     */\n    _createLabel : function(name, item) {\n      var label = new qx.ui.basic.Label(this._createLabelText(name, item));\n      // store labels for disposal\n      this._labels.push(label);\n      label.setRich(true);\n      label.setAppearance(\"form-renderer-label\");\n      return label;\n    },\n\n\n    /**\n     * Creates a header label for the form groups.\n     *\n     * @param title {String} Creates a header label.\n     * @return {qx.ui.basic.Label} The header for the form groups.\n     */\n    _createHeader : function(title) {\n      var header = new qx.ui.basic.Label(title);\n      // store labels for disposal\n      this._labels.push(header);\n      header.setFont(\"bold\");\n      if (this._row != 0) {\n        header.setMarginTop(10);\n      }\n      header.setAlignX(\"left\");\n      return header;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n  destruct : function()\n  {\n    // first, remove all buttons from the button row because they\n    // should not be disposed\n    if (this._buttonRow) {\n      this._buttonRow.removeAll();\n      this._disposeObjects(\"_buttonRow\");\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The grid layout manager arranges the items in a two dimensional\n * grid. Widgets can be placed into the grid's cells and may span multiple rows\n * and columns.\n *\n * *Features*\n *\n * * Flex values for rows and columns\n * * Minimal and maximal column and row sizes\n * * Manually setting of column and row sizes\n * * Horizontal and vertical alignment\n * * Horizontal and vertical spacing\n * * Column and row spans\n * * Auto-sizing\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>row</strong> <em>(Integer)</em>: The row of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>column</strong> <em>(Integer)</em>: The column of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>rowSpan</strong> <em>(Integer)</em>: The number of rows, the\n *   widget should span, starting from the row specified in the <code>row</code>\n *   property. The cells in the spanned rows must be empty as well.\n * </li>\n * <li><strong>colSpan</strong> <em>(Integer)</em>: The number of columns, the\n *   widget should span, starting from the column specified in the <code>column</code>\n *   property. The cells in the spanned columns must be empty as well.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the grid layout.\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.Grid();\n * layout.setRowFlex(0, 1); // make row 0 flexible\n * layout.setColumnWidth(1, 200); // set with of column 1 to 200 pixel\n *\n * var container = new qx.ui.container.Composite(layout);\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 0});\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 1});\n * container.add(new qx.ui.core.Widget(), {row: 1, column: 0, rowSpan: 2});\n * </pre>\n *\n * *External Documentation*\n *\n * <a href='http://manual.qooxdoo.org/${qxversion}/pages/layout/grid.html'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Grid\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacingX {Integer?0} The horizontal spacing between grid cells.\n   *     Sets {@link #spacingX}.\n   * @param spacingY {Integer?0} The vertical spacing between grid cells.\n   *     Sets {@link #spacingY}.\n   */\n  construct : function(spacingX, spacingY)\n  {\n    this.base(arguments);\n\n    this.__rowData = [];\n    this.__colData = [];\n\n    if (spacingX) {\n      this.setSpacingX(spacingX);\n    }\n\n    if (spacingY) {\n      this.setSpacingY(spacingY);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The horizontal spacing between grid cells.\n     */\n    spacingX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * The vertical spacing between grid cells.\n     */\n    spacingY :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /** @type {Array} 2D array of grid cell data */\n    __grid : null,\n    __rowData : null,\n    __colData : null,\n\n    __colSpans : null,\n    __rowSpans : null,\n    __maxRowIndex : null,\n    __maxColIndex : null,\n\n    /** @type {Array} cached row heights */\n    __rowHeights : null,\n\n    /** @type {Array} cached column widths */\n    __colWidths : null,\n\n\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value)\n      {\n        var layoutProperties = {\n          \"row\" : 1,\n          \"column\" : 1,\n          \"rowSpan\" : 1,\n          \"colSpan\" : 1\n        };\n        this.assert(layoutProperties[name] == 1, \"The property '\"+name+\"' is not supported by the Grid layout!\");\n        this.assertInteger(value);\n        this.assert(value >= 0, \"Value must be positive\");\n      },\n\n      \"false\" : null\n    }),\n\n\n    /**\n     * Rebuild the internal representation of the grid\n     */\n    __buildGrid : function()\n    {\n      var grid = [];\n      var colSpans = [];\n      var rowSpans = [];\n\n      var maxRowIndex = -1;\n      var maxColIndex = -1;\n\n      var children = this._getLayoutChildren();\n\n      for (var i=0,l=children.length; i<l; i++)\n      {\n        var child = children[i];\n        var props = child.getLayoutProperties();\n\n        var row = props.row;\n        var column = props.column;\n\n        props.colSpan = props.colSpan || 1;\n        props.rowSpan = props.rowSpan || 1;\n\n        // validate arguments\n        if (row == null || column == null) {\n          throw new Error(\n            \"The layout properties 'row' and 'column' of the child widget '\" +\n            child + \"' must be defined!\"\n          );\n        }\n\n        if (grid[row] && grid[row][column]) {\n          throw new Error(\n            \"Cannot add widget '\" + child + \"'!. \" +\n            \"There is already a widget '\" + grid[row][column] +\n            \"' in this cell (\" + row + \", \" + column + \") for '\" + this + \"'\"\n          );\n        }\n\n        for (var x=column; x<column+props.colSpan; x++)\n        {\n          for (var y=row; y<row+props.rowSpan; y++)\n          {\n            if (grid[y] == undefined) {\n               grid[y] = [];\n            }\n\n            grid[y][x] = child;\n\n            maxColIndex = Math.max(maxColIndex, x);\n            maxRowIndex = Math.max(maxRowIndex, y);\n          }\n        }\n\n        if (props.rowSpan > 1) {\n          rowSpans.push(child);\n        }\n\n        if (props.colSpan > 1) {\n          colSpans.push(child);\n        }\n      }\n\n      // make sure all columns are defined so that accessing the grid using\n      // this.__grid[column][row] will never raise an exception\n      for (var y=0; y<=maxRowIndex; y++) {\n        if (grid[y] == undefined) {\n           grid[y] = [];\n        }\n      }\n\n      this.__grid = grid;\n\n      this.__colSpans = colSpans;\n      this.__rowSpans = rowSpans;\n\n      this.__maxRowIndex = maxRowIndex;\n      this.__maxColIndex = maxColIndex;\n\n      this.__rowHeights = null;\n      this.__colWidths = null;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n\n    /**\n     * Stores data for a grid row\n     *\n     * @param row {Integer} The row index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setRowData : function(row, key, value)\n    {\n      var rowData = this.__rowData[row];\n\n      if (!rowData)\n      {\n        this.__rowData[row] = {};\n        this.__rowData[row][key] = value;\n      }\n      else\n      {\n        rowData[key] = value;\n      }\n    },\n\n\n    /**\n     * Stores data for a grid column\n     *\n     * @param column {Integer} The column index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setColumnData : function(column, key, value)\n    {\n      var colData = this.__colData[column];\n\n      if (!colData)\n      {\n        this.__colData[column] = {};\n        this.__colData[column][key] = value;\n      }\n      else\n      {\n        colData[key] = value;\n      }\n    },\n\n\n    /**\n     * Shortcut to set both horizontal and vertical spacing between grid cells\n     * to the same value.\n     *\n     * @param spacing {Integer} new horizontal and vertical spacing\n     * @return {qx.ui.layout.Grid} This object (for chaining support).\n     */\n    setSpacing : function(spacing)\n    {\n      this.setSpacingY(spacing);\n      this.setSpacingX(spacing);\n      return this;\n    },\n\n\n    /**\n     * Set the default cell alignment for a column. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param column {Integer} Column index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnAlign : function(column, hAlign, vAlign)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(column, \"Invalid parameter 'column'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setColumnData(column, \"hAlign\", hAlign);\n      this._setColumnData(column, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n\n    /**\n     * Get a map of the column's alignment.\n     *\n     * @param column {Integer} The column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal column alignment.\n     */\n    getColumnAlign : function(column)\n    {\n      var colData = this.__colData[column] || {};\n\n      return {\n        vAlign : colData.vAlign || \"top\",\n        hAlign : colData.hAlign || \"left\"\n      };\n    },\n\n\n    /**\n     * Set the default cell alignment for a row. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param row {Integer} Row index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowAlign : function(row, hAlign, vAlign)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(row, \"Invalid parameter 'row'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setRowData(row, \"hAlign\", hAlign);\n      this._setRowData(row, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n\n    /**\n     * Get a map of the row's alignment.\n     *\n     * @param row {Integer} The Row index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal row alignment.\n     */\n    getRowAlign : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n\n      return {\n        vAlign : rowData.vAlign || \"top\",\n        hAlign : rowData.hAlign || \"left\"\n      };\n    },\n\n\n    /**\n     * Get the widget located in the cell. If a the cell is empty or the widget\n     * has a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>,\n     * <code>null</code> is returned.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.Widget|null}The cell's widget. The value may be null.\n     */\n    getCellWidget : function(row, column)\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var row = this.__grid[row] || {};\n      return row[column] ||  null;\n    },\n\n\n    /**\n     * Get the number of rows in the grid layout.\n     *\n     * @return {Integer} The number of rows in the layout\n     */\n    getRowCount : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxRowIndex + 1;\n    },\n\n\n    /**\n     * Get the number of columns in the grid layout.\n     *\n     * @return {Integer} The number of columns in the layout\n     */\n    getColumnCount : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxColIndex + 1;\n    },\n\n\n    /**\n     * Get a map of the cell's alignment. For vertical alignment the row alignment\n     * takes precedence over the column alignment. For horizontal alignment it is\n     * the over way round. If an alignment is set on the cell widget using\n     * {@link qx.ui.core.LayoutItem#setLayoutProperties}, this alignment takes\n     * always precedence over row or column alignment.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal cell alignment.\n     */\n    getCellAlign : function(row, column)\n    {\n      var vAlign = \"top\";\n      var hAlign = \"left\";\n\n      var rowData = this.__rowData[row];\n      var colData = this.__colData[column];\n\n      var widget = this.__grid[row][column];\n      if (widget)\n      {\n        var widgetProps = {\n          vAlign : widget.getAlignY(),\n          hAlign : widget.getAlignX()\n        };\n      }\n      else\n      {\n        widgetProps = {};\n      }\n\n      // compute vAlign\n      // precedence : widget -> row -> column\n      if (widgetProps.vAlign) {\n        vAlign = widgetProps.vAlign;\n      } else if (rowData && rowData.vAlign) {\n        vAlign = rowData.vAlign;\n      } else if (colData && colData.vAlign) {\n        vAlign = colData.vAlign;\n      }\n\n      // compute hAlign\n      // precedence : widget -> column -> row\n      if (widgetProps.hAlign) {\n        hAlign = widgetProps.hAlign;\n      } else if (colData && colData.hAlign) {\n        hAlign = colData.hAlign;\n      } else if (rowData && rowData.hAlign) {\n        hAlign = rowData.hAlign;\n      }\n\n      return {\n        vAlign : vAlign,\n        hAlign : hAlign\n      };\n    },\n\n\n    /**\n     * Set the flex value for a grid column.\n     * By default the column flex value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param flex {Integer} The column's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnFlex : function(column, flex)\n    {\n      this._setColumnData(column, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the flex value of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's flex value\n     */\n    getColumnFlex : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.flex !== undefined ? colData.flex : 0;\n    },\n\n\n    /**\n     * Set the flex value for a grid row.\n     * By default the row flex value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param flex {Integer} The row's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowFlex : function(row, flex)\n    {\n      this._setRowData(row, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the flex value of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's flex value\n     */\n    getRowFlex : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      var rowFlex = rowData.flex !== undefined ? rowData.flex : 0;\n      return rowFlex;\n    },\n\n\n    /**\n     * Set the maximum width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param maxWidth {Integer} The column's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMaxWidth : function(column, maxWidth)\n    {\n      this._setColumnData(column, \"maxWidth\", maxWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the maximum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's maximum width\n     */\n    getColumnMaxWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.maxWidth !== undefined ? colData.maxWidth : Infinity;\n    },\n\n\n    /**\n     * Set the preferred width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param width {Integer} The column's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnWidth : function(column, width)\n    {\n      this._setColumnData(column, \"width\", width);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the preferred width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's width\n     */\n    getColumnWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.width !== undefined ? colData.width : null;\n    },\n\n\n    /**\n     * Set the minimum width of a grid column.\n     * The default value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param minWidth {Integer} The column's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMinWidth : function(column, minWidth)\n    {\n      this._setColumnData(column, \"minWidth\", minWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the minimum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's minimum width\n     */\n    getColumnMinWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.minWidth || 0;\n    },\n\n\n    /**\n     * Set the maximum height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param maxHeight {Integer} The row's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMaxHeight : function(row, maxHeight)\n    {\n      this._setRowData(row, \"maxHeight\", maxHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the maximum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's maximum width\n     */\n    getRowMaxHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.maxHeight || Infinity;\n    },\n\n\n    /**\n     * Set the preferred height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param height {Integer} The row's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowHeight : function(row, height)\n    {\n      this._setRowData(row, \"height\", height);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the preferred height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's width\n     */\n    getRowHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.height !== undefined ? rowData.height : null;\n    },\n\n\n    /**\n     * Set the minimum height of a grid row.\n     * The default value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param minHeight {Integer} The row's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMinHeight : function(row, minHeight)\n    {\n      this._setRowData(row, \"minHeight\", minHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the minimum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's minimum width\n     */\n    getRowMinHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.minHeight || 0;\n    },\n\n\n    /**\n     * Computes the widget's size hint including the widget's margins\n     *\n     * @param widget {qx.ui.core.LayoutItem} The widget to get the size for\n     * @return {Map} a size hint map\n     */\n    __getOuterSize : function(widget)\n    {\n      var hint = widget.getSizeHint();\n      var hMargins = widget.getMarginLeft() + widget.getMarginRight();\n      var vMargins = widget.getMarginTop() + widget.getMarginBottom();\n\n      var outerSize = {\n        height: hint.height + vMargins,\n        width: hint.width + hMargins,\n        minHeight: hint.minHeight + vMargins,\n        minWidth: hint.minWidth + hMargins,\n        maxHeight: hint.maxHeight + vMargins,\n        maxWidth: hint.maxWidth + hMargins\n      };\n\n      return outerSize;\n    },\n\n\n    /**\n     * Check whether all row spans fit with their preferred height into the\n     * preferred row heights. If there is not enough space, the preferred\n     * row sizes are increased. The distribution respects the flex and max\n     * values of the rows.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The height array is modified in place.\n     *\n     * @param rowHeights {Map[]} The current row height array as computed by\n     *     {@link #_getRowHeights}.\n     */\n    _fixHeightsRowSpan : function(rowHeights)\n    {\n      var vSpacing = this.getSpacingY();\n\n      for (var i=0, l=this.__rowSpans.length; i<l; i++)\n      {\n        var widget = this.__rowSpans[i];\n\n        var hint = this.__getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetRow = widgetProps.row;\n\n        var prefSpanHeight = vSpacing * (widgetProps.rowSpan - 1);\n        var minSpanHeight = prefSpanHeight;\n\n        var rowFlexes = {};\n\n        for (var j=0; j<widgetProps.rowSpan; j++)\n        {\n          var row = widgetProps.row+j;\n          var rowHeight = rowHeights[row];\n          var rowFlex = this.getRowFlex(row);\n\n          if (rowFlex > 0)\n          {\n            // compute flex array for the preferred height\n            rowFlexes[row] =\n            {\n              min : rowHeight.minHeight,\n              value : rowHeight.height,\n              max : rowHeight.maxHeight,\n              flex: rowFlex\n            };\n          }\n\n          prefSpanHeight += rowHeight.height;\n          minSpanHeight += rowHeight.minHeight;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred row sizes.\n        if (prefSpanHeight < hint.height)\n        {\n          if (!qx.lang.Object.isEmpty(rowFlexes)) {\n            var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n              rowFlexes, hint.height, prefSpanHeight\n            );\n\n            for (var k=0; k<widgetProps.rowSpan; k++)\n            {\n              var offset = rowIncrements[widgetRow+k] ? rowIncrements[widgetRow+k].offset : 0;\n              rowHeights[widgetRow+k].height += offset;\n            }\n          // row is too small and we have no flex value set\n          } else {\n            var totalSpacing = vSpacing * (widgetProps.rowSpan - 1);\n            var availableHeight = hint.height - totalSpacing;\n\n            // get the row height which every child would need to share the\n            // available hight equally\n            var avgRowHeight =\n              Math.floor(availableHeight / widgetProps.rowSpan);\n\n            // get the hight already used and the number of children which do\n            // not have at least that avg row height\n            var usedHeight = 0;\n            var rowsNeedAddition = 0;\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              var currentHeight = rowHeights[widgetRow + k].height;\n              usedHeight += currentHeight;\n              if (currentHeight < avgRowHeight) {\n                rowsNeedAddition++;\n              }\n            }\n\n            // the difference of available and used needs to be shared among\n            // those not having the min size\n            var additionalRowHeight =\n              Math.floor((availableHeight - usedHeight) / rowsNeedAddition);\n\n            // add the extra height to the too small children\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              if (rowHeights[widgetRow + k].height < avgRowHeight) {\n                rowHeights[widgetRow + k].height += additionalRowHeight;\n              }\n            }\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min row sizes.\n        if (minSpanHeight < hint.minHeight)\n        {\n          var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            rowFlexes, hint.minHeight, minSpanHeight\n          );\n\n          for (var j=0; j<widgetProps.rowSpan; j++)\n          {\n            var offset = rowIncrements[widgetRow+j] ? rowIncrements[widgetRow+j].offset : 0;\n            rowHeights[widgetRow+j].minHeight += offset;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Check whether all col spans fit with their preferred width into the\n     * preferred column widths. If there is not enough space the preferred\n     * column sizes are increased. The distribution respects the flex and max\n     * values of the columns.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The width array is modified in place.\n     *\n     * @param colWidths {Map[]} The current column width array as computed by\n     *     {@link #_getColWidths}.\n     */\n    _fixWidthsColSpan : function(colWidths)\n    {\n      var hSpacing = this.getSpacingX();\n\n      for (var i=0, l=this.__colSpans.length; i<l; i++)\n      {\n        var widget = this.__colSpans[i];\n\n        var hint = this.__getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetColumn = widgetProps.column;\n\n        var prefSpanWidth = hSpacing * (widgetProps.colSpan - 1);\n        var minSpanWidth = prefSpanWidth;\n\n        var colFlexes = {};\n\n        var offset;\n\n        for (var j=0; j<widgetProps.colSpan; j++)\n        {\n          var col = widgetProps.column+j;\n          var colWidth = colWidths[col];\n          var colFlex = this.getColumnFlex(col);\n\n          // compute flex array for the preferred width\n          if (colFlex > 0)\n          {\n            colFlexes[col] =\n            {\n              min : colWidth.minWidth,\n              value : colWidth.width,\n              max : colWidth.maxWidth,\n              flex: colFlex\n            };\n          }\n\n          prefSpanWidth += colWidth.width;\n          minSpanWidth += colWidth.minWidth;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred column sizes.\n        if (prefSpanWidth < hint.width)\n        {\n          var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            colFlexes, hint.width, prefSpanWidth\n          );\n\n          for (var j=0; j<widgetProps.colSpan; j++)\n          {\n            offset = colIncrements[widgetColumn+j] ? colIncrements[widgetColumn+j].offset : 0;\n            colWidths[widgetColumn+j].width += offset;\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min column sizes.\n        if (minSpanWidth < hint.minWidth)\n        {\n          var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            colFlexes, hint.minWidth, minSpanWidth\n          );\n\n          for (var j=0; j<widgetProps.colSpan; j++)\n          {\n            offset = colIncrements[widgetColumn+j] ? colIncrements[widgetColumn+j].offset : 0;\n            colWidths[widgetColumn+j].minWidth += offset;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Compute the min/pref/max row heights.\n     *\n     * @return {Map[]} An array containing height information for each row. The\n     *     entries have the keys <code>minHeight</code>, <code>maxHeight</code> and\n     *     <code>height</code>.\n     */\n    _getRowHeights : function()\n    {\n      if (this.__rowHeights != null) {\n        return this.__rowHeights;\n      }\n\n      var rowHeights = [];\n\n      var maxRowIndex = this.__maxRowIndex;\n      var maxColIndex = this.__maxColIndex;\n\n      for (var row=0; row<=maxRowIndex; row++)\n      {\n        var minHeight = 0;\n        var height = 0;\n        var maxHeight = 0;\n\n        for (var col=0; col<=maxColIndex; col++)\n        {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore rows with row spans at this place\n          // these rows will be taken into account later\n          var widgetRowSpan = widget.getLayoutProperties().rowSpan || 0;\n          if (widgetRowSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this.__getOuterSize(widget);\n\n          if (this.getRowFlex(row) > 0) {\n            minHeight = Math.max(minHeight, cellSize.minHeight);\n          } else {\n            minHeight = Math.max(minHeight, cellSize.height);\n          }\n\n          height = Math.max(height, cellSize.height);\n        }\n\n        var minHeight = Math.max(minHeight, this.getRowMinHeight(row));\n        var maxHeight = this.getRowMaxHeight(row);\n\n        if (this.getRowHeight(row) !== null) {\n          var height = this.getRowHeight(row);\n        } else {\n          var height = Math.max(minHeight, Math.min(height, maxHeight));\n        }\n\n        rowHeights[row] = {\n          minHeight : minHeight,\n          height : height,\n          maxHeight : maxHeight\n        };\n      }\n\n      if (this.__rowSpans.length > 0) {\n        this._fixHeightsRowSpan(rowHeights);\n      }\n\n      this.__rowHeights = rowHeights;\n      return rowHeights;\n    },\n\n\n    /**\n     * Compute the min/pref/max column widths.\n     *\n     * @return {Map[]} An array containing width information for each column. The\n     *     entries have the keys <code>minWidth</code>, <code>maxWidth</code> and\n     *     <code>width</code>.\n     */\n    _getColWidths : function()\n    {\n      if (this.__colWidths != null) {\n        return this.__colWidths;\n      }\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        var width = 0;\n        var minWidth = 0;\n        var maxWidth = Infinity;\n\n        for (var row=0; row<=maxRowIndex; row++)\n        {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore columns with col spans at this place\n          // these columns will be taken into account later\n          var widgetColSpan = widget.getLayoutProperties().colSpan || 0;\n          if (widgetColSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this.__getOuterSize(widget);\n\n          minWidth = Math.max(minWidth, cellSize.minWidth);\n\n          width = Math.max(width, cellSize.width);\n        }\n\n        minWidth = Math.max(minWidth, this.getColumnMinWidth(col));\n        maxWidth = this.getColumnMaxWidth(col);\n\n        if (this.getColumnWidth(col) !== null) {\n          var width = this.getColumnWidth(col);\n        } else {\n          var width = Math.max(minWidth, Math.min(width, maxWidth));\n        }\n\n        colWidths[col] = {\n          minWidth: minWidth,\n          width : width,\n          maxWidth : maxWidth\n        };\n      }\n\n      if (this.__colSpans.length > 0) {\n        this._fixWidthsColSpan(colWidths);\n      }\n\n      this.__colWidths = colWidths;\n      return colWidths;\n    },\n\n\n    /**\n     * Computes for each column by how many pixels it must grow or shrink, taking\n     * the column flex values and min/max widths into account.\n     *\n     * @param width {Integer} The grid width\n     * @return {Integer[]} Sparse array of offsets to add to each column width. If\n     *     an array entry is empty nothing should be added to the column.\n     */\n    _getColumnFlexOffsets : function(width)\n    {\n      var hint = this.getSizeHint();\n      var diff = width - hint.width;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var colWidths = this._getColWidths();\n      var flexibles = {};\n\n      for (var i=0, l=colWidths.length; i<l; i++)\n      {\n        var col = colWidths[i];\n        var colFlex = this.getColumnFlex(i);\n\n        if (\n          (colFlex <= 0) ||\n          (col.width == col.maxWidth && diff > 0) ||\n          (col.width == col.minWidth && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] ={\n          min : col.minWidth,\n          value : col.width,\n          max : col.maxWidth,\n          flex : colFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, width, hint.width);\n    },\n\n\n    /**\n     * Computes for each row by how many pixels it must grow or shrink, taking\n     * the row flex values and min/max heights into account.\n     *\n     * @param height {Integer} The grid height\n     * @return {Integer[]} Sparse array of offsets to add to each row height. If\n     *     an array entry is empty nothing should be added to the row.\n     */\n    _getRowFlexOffsets : function(height)\n    {\n      var hint = this.getSizeHint();\n      var diff = height - hint.height;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var rowHeights = this._getRowHeights();\n      var flexibles = {};\n\n      for (var i=0, l=rowHeights.length; i<l; i++)\n      {\n        var row = rowHeights[i];\n        var rowFlex = this.getRowFlex(i);\n\n        if (\n          (rowFlex <= 0) ||\n          (row.height == row.maxHeight && diff > 0) ||\n          (row.height == row.minHeight && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] = {\n          min : row.minHeight,\n          value : row.height,\n          max : row.maxHeight,\n          flex : rowFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, height, hint.height);\n    },\n\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var Util = qx.ui.layout.Util;\n      var hSpacing = this.getSpacingX();\n      var vSpacing = this.getSpacingY();\n\n      // calculate column widths\n      var prefWidths = this._getColWidths();\n      var colStretchOffsets = this._getColumnFlexOffsets(availWidth);\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      var offset;\n\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        offset = colStretchOffsets[col] ? colStretchOffsets[col].offset : 0;\n        colWidths[col] = prefWidths[col].width + offset;\n      }\n\n      // calculate row heights\n      var prefHeights = this._getRowHeights();\n      var rowStretchOffsets = this._getRowFlexOffsets(availHeight);\n\n      var rowHeights = [];\n\n      for (var row=0; row<=maxRowIndex; row++)\n      {\n        offset = rowStretchOffsets[row] ? rowStretchOffsets[row].offset : 0;\n        rowHeights[row] = prefHeights[row].height + offset;\n      }\n\n      // do the layout\n      var left = 0;\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        var top = 0;\n\n        for (var row=0; row<=maxRowIndex; row++)\n        {\n          var widget = this.__grid[row][col];\n\n          // ignore empty cells\n          if (!widget)\n          {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          var widgetProps = widget.getLayoutProperties();\n\n          // ignore cells, which have cell spanning but are not the origin\n          // of the widget\n          if(widgetProps.row !== row || widgetProps.column !== col)\n          {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          // compute sizes width including cell spanning\n          var spanWidth = hSpacing * (widgetProps.colSpan - 1);\n          for (var i=0; i<widgetProps.colSpan; i++) {\n            spanWidth += colWidths[col+i];\n          }\n\n          var spanHeight = vSpacing * (widgetProps.rowSpan - 1);\n          for (var i=0; i<widgetProps.rowSpan; i++) {\n            spanHeight += rowHeights[row+i];\n          }\n\n          var cellHint = widget.getSizeHint();\n          var marginTop = widget.getMarginTop();\n          var marginLeft = widget.getMarginLeft();\n          var marginBottom = widget.getMarginBottom();\n          var marginRight = widget.getMarginRight();\n\n          var cellWidth = Math.max(cellHint.minWidth, Math.min(spanWidth-marginLeft-marginRight, cellHint.maxWidth));\n          var cellHeight = Math.max(cellHint.minHeight, Math.min(spanHeight-marginTop-marginBottom, cellHint.maxHeight));\n\n          var cellAlign = this.getCellAlign(row, col);\n          var cellLeft = left + Util.computeHorizontalAlignOffset(cellAlign.hAlign, cellWidth, spanWidth, marginLeft, marginRight);\n          var cellTop = top + Util.computeVerticalAlignOffset(cellAlign.vAlign, cellHeight, spanHeight, marginTop, marginBottom);\n\n          widget.renderLayout(\n            cellLeft + padding.left,\n            cellTop + padding.top,\n            cellWidth,\n            cellHeight\n          );\n\n          top += rowHeights[row] + vSpacing;\n        }\n\n        left += colWidths[col] + hSpacing;\n      }\n    },\n\n\n    // overridden\n    invalidateLayoutCache : function()\n    {\n      this.base(arguments);\n\n      this.__colWidths = null;\n      this.__rowHeights = null;\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      // calculate col widths\n      var colWidths = this._getColWidths();\n\n      var minWidth=0, width=0;\n\n      for (var i=0, l=colWidths.length; i<l; i++)\n      {\n        var col = colWidths[i];\n        if (this.getColumnFlex(i) > 0) {\n          minWidth += col.minWidth;\n        } else {\n          minWidth += col.width;\n        }\n\n        width += col.width;\n      }\n\n      // calculate row heights\n      var rowHeights = this._getRowHeights();\n\n      var minHeight=0, height=0;\n      for (var i=0, l=rowHeights.length; i<l; i++)\n      {\n        var row = rowHeights[i];\n\n        if (this.getRowFlex(i) > 0) {\n          minHeight += row.minHeight;\n        } else {\n          minHeight += row.height;\n        }\n\n        height += row.height;\n      }\n\n      var spacingX = this.getSpacingX() * (colWidths.length - 1);\n      var spacingY = this.getSpacingY() * (rowHeights.length - 1);\n\n      var hint = {\n        minWidth : minWidth + spacingX,\n        width : width + spacingX,\n        minHeight : minHeight + spacingY,\n        height : height + spacingY\n      };\n\n      return hint;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__grid = this.__rowData = this.__colData = this.__colSpans =\n      this.__rowSpans = this.__colWidths = this.__rowHeights = null;\n  }\n});\n"
  ]
}