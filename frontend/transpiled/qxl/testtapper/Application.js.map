{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/qx_packages/qooxdoo_qxl_testtapper_v0_4_3/source/class/qxl/testtapper/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "application",
    "Standalone",
    "members",
    "_cnt",
    "_failed",
    "log",
    "text",
    "console",
    "Logger",
    "debug",
    "info",
    "error",
    "main",
    "cfg",
    "bom",
    "History",
    "getInstance",
    "getState",
    "split",
    "forEach",
    "item",
    "key",
    "value",
    "main_container",
    "ui",
    "container",
    "Composite",
    "setLayout",
    "layout",
    "VBox",
    "add",
    "basic",
    "Label",
    "set",
    "rich",
    "logger",
    "qxl",
    "logpane",
    "LogPane",
    "setShowToolBar",
    "fetch",
    "flex",
    "setHeight",
    "setWidth",
    "getRoot",
    "matcher",
    "RegExp",
    "module",
    "clazzes",
    "Object",
    "keys",
    "$$registry",
    "filter",
    "clazz",
    "match",
    "$$classtype",
    "undefined",
    "sort",
    "pChain",
    "Promise",
    "resolve",
    "reject",
    "then",
    "runAll",
    "that",
    "methodNames",
    "prototype",
    "name",
    "isFunctionOrAsyncFunction",
    "pos",
    "classname",
    "lastIndexOf",
    "pkgname",
    "substring",
    "loader",
    "dev",
    "unit",
    "TestLoaderBasic",
    "testResult",
    "TestResult",
    "methodNameIndex",
    "next",
    "length",
    "runTests",
    "showExceptions",
    "arr",
    "test",
    "getFullName",
    "message",
    "String",
    "exception",
    "setTimeout",
    "getSuite",
    "addListener",
    "evt",
    "getData",
    "testtapper",
    "Application"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright: 2018 Oetiker+Partner AG\n\n   License: MIT\n\n   Authors: Tobias Oetiker\n\n************************************************************************ */\n\n/**\n * Test Runner\n *\n * @asset(qxl/testtapper/run.js)\n */\n\nqx.Class.define(\"qxl.testtapper.Application\", {\n    extend: qx.application.Standalone,\n    members: {\n        _cnt: null,\n        _failed: null,\n        log: function(text) {\n           console.log(text);\n           qx.log.Logger.debug(text);\n        },\n        info: function(text) {\n           console.log(text);\n           qx.log.Logger.info(text);\n        },\n        error: function(text) {\n           console.log(text);\n           qx.log.Logger.error(text);\n        },\n        main: function() {\n            this.base(arguments);\n            this._cnt = 0;\n            this._failed = {};\n            // eslint-disable-next-line no-undef\n            let cfg = {};\n            qx.bom.History.getInstance().getState()\n                .split(';').forEach(item => {\n                    let [key,value] = item.split('=');\n                    cfg[key] = value;\n                });\n            let main_container = new qx.ui.container.Composite();\n            main_container.setLayout(new qx.ui.layout.VBox());\n            main_container.add(\n                new qx.ui.basic.Label(`\n                <h1>TestTAPper - the Qooxdoo Testrunner is at work</h1>\n                `).set({\n                    rich: true\n                })\n            );\n//            qx.log.appender.Native;\n        \tlet logger = new qxl.logpane.LogPane();\n\t\t\tlogger.setShowToolBar(false);\n\t\t\tlogger.fetch();\n            main_container.add(logger, {flex: 1});\n\t\t\tmain_container.setHeight(640);\n\t\t\tmain_container.setWidth(1024);\n\t\t    this.getRoot().add(main_container);\n\n\n            let matcher = new RegExp(\"\\\\.test\\\\.\" + (cfg.module || ''));\n\n\n            if (cfg.module) {\n                this.log(\"# running only tests that match \" + cfg.module);\n            }\n            let clazzes = Object.keys(qx.Class.$$registry)\n            .filter(clazz => clazz.match(matcher) && (qx.Class.$$registry[clazz].$$classtype === undefined))\n            .sort();\n            let pChain = new qx.Promise((resolve,reject) => resolve(true));\n            clazzes.forEach(\n                clazz => {\n                    pChain = pChain.then(()=>\n                        this.runAll(\n                            qx.Class.$$registry[clazz]\n                        ).then(()=>{\n                            this.info(`# done testing ${clazz}.`);\n                        })\n                    );\n                }\n            );\n\n            return pChain.then(() => {\n                this.log(`1..${this._cnt}`);\n                main_container.add(\n                    new qx.ui.basic.Label(`\n                    <h1>TestTAPper - is Done</h1>\n                    `).set({\n                        rich: true\n                    })\n                );\n            });\n        },\n        runAll: function(clazz) {\n            let that = this;\n            this.info(`# start testing ${clazz}.`);\n            let methodNames = Object.keys(clazz.prototype)\n                .filter(name => name.match(/^test/) && qx.Bootstrap.isFunctionOrAsyncFunction(clazz.prototype[name]))\n                .sort();\n            return new qx.Promise(resolve => {\n                let pos = clazz.classname.lastIndexOf(\".\");\n                let pkgname = clazz.classname.substring(0, pos);\n                let loader = new qx.dev.unit.TestLoaderBasic(pkgname);\n                let testResult = new qx.dev.unit.TestResult();\n                let methodNameIndex = -1;\n                let next = () => {\n                    methodNameIndex++;\n                    if (methodNameIndex < methodNames.length) {\n                        loader.runTests(\n                            testResult,\n                            clazz.classname,\n                            methodNames[methodNameIndex]\n                        );\n                    }\n                    else {\n                        resolve();\n                    }\n                };\n                let showExceptions = arr => {\n                    arr.forEach(item => {\n                        if (item.test.getFullName){\n                            let test = item.test.getFullName();\n                            that._failed[test] = true;\n                            that._cnt++;\n                            let message = String(item.exception);\n                            if (item.exception) {\n                                if (item.exception.message) {\n                                message = item.exception.message;\n                                this.info(`not ok ${that._cnt} - ${test} - ${message}`);\n                                }\n                                else {\n                                    this.error('# '+item.exception);\n                                }\n                            }\n                        }\n                        else {\n                            this.error('Unexpected Error - ',item);\n                        }\n                    });\n                    setTimeout(next, 0);\n                };\n\n                loader.getSuite().add(clazz);\n                testResult.addListener(\"startTest\", evt => {\n                    this.info('# start ' +evt.getData().getFullName());\n                });\n                testResult.addListener(\"wait\", evt => {\n                    this.info('# wait '+evt.getData().getFullName());\n                });\n                testResult.addListener(\"endMeasurement\", evt => {\n                    this.info('# endMeasurement '+ evt.getData()[0].test.getFullName());\n                });\n                testResult.addListener(\"endTest\", evt => {\n                    let test = evt.getData().getFullName();\n                    if (!that._failed[test]){\n                        that._cnt++;\n                        this.info(`ok ${that._cnt} - ` + test);\n                    }\n                    setTimeout(next, 0);\n                });\n                testResult.addListener(\"failure\", evt => showExceptions(evt.getData()));\n                testResult.addListener(\"error\", evt => showExceptions(evt.getData()));\n                testResult.addListener(\"skip\", evt => {\n                    that._cnt++;\n                    let test = evt.getData()[0].test.getFullName();\n                    that._failed[test] = true;\n                    this.info(`ok ${that._cnt} - # SKIP ${test}`);\n                });\n\n                next();\n            });\n        }\n    }\n});\n"
  ]
}