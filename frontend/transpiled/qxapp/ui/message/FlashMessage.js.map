{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/ui/message/FlashMessage.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "message",
    "level",
    "_setLayout",
    "layout",
    "HBox",
    "set",
    "maxWidth",
    "allowStretchX",
    "alignX",
    "badge",
    "getChildControl",
    "setBackgroundColor",
    "LOG_LEVEL_COLOR_MAP",
    "setMessage",
    "properties",
    "appearance",
    "init",
    "refine",
    "check",
    "nullable",
    "apply",
    "statics",
    "events",
    "members",
    "__closeCb",
    "_createChildControlImpl",
    "id",
    "control",
    "basic",
    "Label",
    "rich",
    "_add",
    "flex",
    "qxapp",
    "component",
    "form",
    "IconButton",
    "fireEvent",
    "alignY",
    "height",
    "width",
    "allowStretchY",
    "_applyMessage",
    "value",
    "label",
    "setValue",
    "FlashMessage"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;AAGAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,+BAAhB,EAAiD;AAC/CC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MAD4B;;AAG/C;;;;;;AAMAC,IAAAA,SAAS,EAAE,mBAASC,OAAT,EAAkBC,KAAlB,EAAyB;AAClC;;AACA,WAAKC,UAAL,CAAgB,IAAIb,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaC,IAAjB,CAAsB,EAAtB,CAAhB;;AAEA,WAAKC,GAAL,CAAS;AACPC,QAAAA,QAAQ,EAAE,GADH;AAEPC,QAAAA,aAAa,EAAE,KAFR;AAGPC,QAAAA,MAAM,EAAE;AAHD,OAAT;AAMA,UAAMC,KAAK,GAAG,KAAKC,eAAL,CAAqB,OAArB,CAAd;AACAD,MAAAA,KAAK,CAACE,kBAAN,CAAyB,8BAAYC,mBAAZ,CAAgCX,KAAhC,CAAzB;;AAEA,UAAID,OAAJ,EAAa;AACX,aAAKa,UAAL,CAAgBb,OAAhB;AACD;;AAED,WAAKU,eAAL,CAAqB,aAArB;AACD,KA3B8C;AA6B/CI,IAAAA,UAAU,EAAE;AACVC,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE,OADI;AAEVC,QAAAA,MAAM,EAAE;AAFE,OADF;AAKVjB,MAAAA,OAAO,EAAE;AACPkB,QAAAA,KAAK,EAAE,QADA;AAEPC,QAAAA,QAAQ,EAAE,IAFH;AAGPC,QAAAA,KAAK,EAAE;AAHA;AALC,KA7BmC;AAyC/CC,IAAAA,OAAO,EAAE;AACPT,MAAAA,mBAAmB,EAAE;AACnB,gBAAQ,MADW;AAEnB,iBAAS,QAFU;AAGnB,kBAAU,QAHS;AAInB,iBAAS;AAJU;AADd,KAzCsC;AAkD/CU,IAAAA,MAAM,EAAE;AACN,sBAAgB;AADV,KAlDuC;AAsD/CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,uBAAuB,EAAE,iCAASC,EAAT,EAAa;AAAA;;AACpC,YAAIC,OAAJ;;AACA,gBAAQD,EAAR;AACE,eAAK,SAAL;AACEC,YAAAA,OAAO,GAAG,IAAItC,EAAE,CAACO,EAAH,CAAMgC,KAAN,CAAYC,KAAhB,GAAwBxB,GAAxB,CAA4B;AACpCyB,cAAAA,IAAI,EAAE;AAD8B,aAA5B,CAAV;;AAGA,iBAAKC,IAAL,CAAUJ,OAAV,EAAmB;AACjBK,cAAAA,IAAI,EAAE;AADW,aAAnB;;AAGA;;AACF,eAAK,aAAL;AACEL,YAAAA,OAAO,GAAG,IAAIM,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,UAAzB,CAAoC,yBAApC,EAA+D;AAAA,qBAAM,KAAI,CAACC,SAAL,CAAe,cAAf,CAAN;AAAA,aAA/D,EAAqGhC,GAArG,CAAyG;AACjHiC,cAAAA,MAAM,EAAE;AADyG,aAAzG,CAAV;;AAGA,iBAAKP,IAAL,CAAUJ,OAAV;;AACA;;AACF,eAAK,OAAL;AACEA,YAAAA,OAAO,GAAG,IAAItC,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MAAf,GAAwBO,GAAxB,CAA4B;AACpCkC,cAAAA,MAAM,EAAE,EAD4B;AAEpCC,cAAAA,KAAK,EAAE,EAF6B;AAGpCjC,cAAAA,aAAa,EAAE,KAHqB;AAIpCkC,cAAAA,aAAa,EAAE,KAJqB;AAKpCH,cAAAA,MAAM,EAAE;AAL4B,aAA5B,CAAV;;AAOA,iBAAKP,IAAL,CAAUJ,OAAV;;AACA;AAxBJ;;AA0BA,eAAOA,OAAO,oFAAyBD,EAAzB,CAAd;AACD,OA/BM;AAiCPgB,MAAAA,aAAa,EAAE,uBAASC,KAAT,EAAgB;AAC7B,YAAMC,KAAK,GAAG,KAAKlC,eAAL,CAAqB,SAArB,CAAd;;AACA,YAAIkC,KAAJ,EAAW;AACTA,UAAAA,KAAK,CAACC,QAAN,CAAeF,KAAf;AACD;AACF;AAtCM;AAtDsC,GAAjD;AApBAV,EAAAA,KAAK,CAACrC,EAAN,CAASI,OAAT,CAAiB8C,YAAjB,CAA8BtD,aAA9B,GAA8CA,aAA9C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Ignacio Pascual (ignapas)\n\n************************************************************************ */\n\n/**\n * A FlashMessage provides brief messages about the app processes. It is used and handled by qxapp.component.message.FlashMessenger.\n */\nqx.Class.define(\"qxapp.ui.message.FlashMessage\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n   * Constructor for the FlashMessage.\n   *\n   * @param {String} message Message that the user will read.\n   * @param {String=\"INFO\",\"DEBUG\",\"WARNING\",\"ERROR\"} level Logging level of the message. Each level has different, distinct color.\n   */\n  construct: function(message, level) {\n    this.base(arguments);\n    this._setLayout(new qx.ui.layout.HBox(10));\n\n    this.set({\n      maxWidth: 340,\n      allowStretchX: false,\n      alignX: \"center\"\n    });\n\n    const badge = this.getChildControl(\"badge\");\n    badge.setBackgroundColor(this.self().LOG_LEVEL_COLOR_MAP[level]);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    this.getChildControl(\"closebutton\");\n  },\n\n  properties: {\n    appearance: {\n      init: \"flash\",\n      refine: true\n    },\n    message: {\n      check: \"String\",\n      nullable: true,\n      apply: \"_applyMessage\"\n    }\n  },\n\n  statics: {\n    LOG_LEVEL_COLOR_MAP: {\n      \"INFO\": \"blue\",\n      \"DEBUG\": \"yellow\",\n      \"WARING\": \"orange\",\n      \"ERROR\": \"red\"\n    }\n  },\n\n  events: {\n    \"closeMessage\": \"qx.event.type.Event\"\n  },\n\n  members: {\n    __closeCb: null,\n    _createChildControlImpl: function(id) {\n      let control;\n      switch (id) {\n        case \"message\":\n          control = new qx.ui.basic.Label().set({\n            rich: true\n          });\n          this._add(control, {\n            flex: 1\n          });\n          break;\n        case \"closebutton\":\n          control = new qxapp.component.form.IconButton(\"@MaterialIcons/close/16\", () => this.fireEvent(\"closeMessage\")).set({\n            alignY: \"middle\"\n          });\n          this._add(control);\n          break;\n        case \"badge\":\n          control = new qx.ui.core.Widget().set({\n            height: 10,\n            width: 10,\n            allowStretchX: false,\n            allowStretchY: false,\n            alignY: \"middle\"\n          });\n          this._add(control);\n          break;\n      }\n      return control || this.base(arguments, id);\n    },\n\n    _applyMessage: function(value) {\n      const label = this.getChildControl(\"message\");\n      if (label) {\n        label.setValue(value);\n      }\n    }\n  }\n});\n"
  ]
}