{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/ui/markdown/Markdown.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "embed",
    "Html",
    "construct",
    "markdown",
    "__loadMarked",
    "Promise",
    "resolve",
    "reject",
    "marked",
    "loader",
    "util",
    "DynamicScriptLoader",
    "addListenerOnce",
    "e",
    "Error",
    "getData",
    "start",
    "setMarkdown",
    "addListener",
    "__resizeMe",
    "properties",
    "check",
    "apply",
    "members",
    "_applyMarkdown",
    "value",
    "then",
    "html",
    "safeHtml",
    "qxapp",
    "wrapper",
    "DOMPurify",
    "getInstance",
    "sanitize",
    "setHtml",
    "event",
    "Timer",
    "once",
    "__parseImages",
    "error",
    "console",
    "domElement",
    "__getDomElement",
    "images",
    "bom",
    "Selector",
    "query",
    "i",
    "length",
    "onload",
    "children",
    "elemHeight",
    "__getChildrenElementHeight",
    "setHeight",
    "height",
    "__getElementHeight",
    "element",
    "size",
    "Dimension",
    "getSize",
    "getContentElement",
    "getDomElement",
    "Markdown"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*\n * oSPARC - The SIMCORE frontend - https://osparc.io\n * Copyright: 2019 IT'IS Foundation - https://itis.swiss\n * License: MIT - https://opensource.org/licenses/MIT\n * Authors: Ignacio Pascual (ignapas)\n *          Odei Maiz (odeimaiz)\n */\n\n/**\n * @asset(marked/marked.js)\n */\n\n/* global marked */\n\n/**\n * This class is just a special kind of rich label that takes markdown raw text, compiles it to HTML,\n * sanitizes it and applies it to its value property.\n */\nqx.Class.define(\"qxapp.ui.markdown.Markdown\", {\n  extend: qx.ui.embed.Html,\n\n  /**\n   * Markdown constructor. It directly accepts markdown as its first argument.\n   * @param {String} markdown Plain text accepting markdown syntax. Its compiled version will be set in the value property of the label.\n   */\n  construct: function(markdown) {\n    this.base(arguments);\n\n    this.__loadMarked = new Promise((resolve, reject) => {\n      if (typeof marked === \"function\") {\n        resolve(marked);\n      } else {\n        const loader = new qx.util.DynamicScriptLoader([\n          \"marked/marked.js\"\n        ]);\n        loader.addListenerOnce(\"ready\", () => {\n          resolve(marked);\n        }, this);\n        loader.addListenerOnce(\"failed\", e => {\n          reject(Error(`Failed to load ${e.getData()}. Value couldn't be updated.`));\n        });\n        loader.start();\n      }\n    });\n    if (markdown) {\n      this.setMarkdown(markdown);\n    }\n\n    this.addListener(\"resize\", e => this.__resizeMe(), this);\n  },\n\n  properties: {\n    /**\n     * Holds the raw markdown text and updates the label's {@link #value} whenever new markdown arrives.\n     */\n    markdown: {\n      check: \"String\",\n      apply: \"_applyMarkdown\"\n    }\n  },\n\n  members: {\n    __loadMarked: null,\n    /**\n     * Apply function for the markdown property. Compiles the markdown text to HTML and applies it to the value property of the label.\n     * @param {String} value Plain text accepting markdown syntax.\n     */\n    _applyMarkdown: function(value) {\n      this.__loadMarked.then(() => {\n        const html = marked(value);\n        const safeHtml = qxapp.wrapper.DOMPurify.getInstance().sanitize(html);\n        this.setHtml(safeHtml);\n        // for some reason the content is not immediately there\n        qx.event.Timer.once(() => {\n          this.__parseImages();\n          this.__resizeMe();\n        }, this, 100);\n        this.__resizeMe();\n      }).catch(error => console.error(error));\n    },\n\n    __parseImages: function() {\n      const domElement = this.__getDomElement();\n      if (domElement === null) {\n        return;\n      }\n      const images = qx.bom.Selector.query(\"img\", domElement);\n      for (let i=0; i<images.length; i++) {\n        images[i].onload = () => {\n          this.__resizeMe();\n        };\n      }\n    },\n\n    // qx.ui.embed.html scale to content\n    __resizeMe: function() {\n      const domElement = this.__getDomElement();\n      if (domElement === null) {\n        return;\n      }\n      if (domElement && domElement.children) {\n        const elemHeight = this.__getChildrenElementHeight(domElement.children);\n        this.setHeight(elemHeight);\n      }\n    },\n\n    __getChildrenElementHeight: function(children) {\n      let height = 0;\n      if (children.length) {\n        for (let i=0; i<children.length; i++) {\n          height += this.__getElementHeight(children[i]);\n        }\n      }\n      return height;\n    },\n\n    __getElementHeight: function(element) {\n      const size = qx.bom.element.Dimension.getSize(element);\n      // add padding\n      return size.height + 15;\n    },\n\n    __getDomElement: function() {\n      if (!this.getContentElement) {\n        return null;\n      }\n      const domElement = this.getContentElement().getDomElement();\n      if (domElement) {\n        return domElement;\n      }\n      return null;\n    }\n  }\n});\n"
  ]
}