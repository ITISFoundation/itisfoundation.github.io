{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/auth/ui/RegistrationView.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxapp",
    "auth",
    "core",
    "BaseAuthPage",
    "members",
    "__email",
    "_buildPage",
    "validator",
    "ui",
    "form",
    "validation",
    "Manager",
    "_addTitleHeader",
    "tr",
    "email",
    "TextField",
    "set",
    "required",
    "placeholder",
    "add",
    "utils",
    "Utils",
    "setIdToWidget",
    "pass1",
    "PasswordField",
    "pass2",
    "urlFragment",
    "parseURLFragment",
    "token",
    "params",
    "invitation",
    "visibility",
    "value",
    "util",
    "Validate",
    "setValidator",
    "_itemForms",
    "checkSamePasswords",
    "grp",
    "container",
    "Composite",
    "layout",
    "HBox",
    "submitBtn",
    "Button",
    "flex",
    "cancelBtn",
    "addListener",
    "e",
    "valid",
    "validate",
    "__submit",
    "getValue",
    "password",
    "confirm",
    "fireDataEvent",
    "userData",
    "console",
    "debug",
    "manager",
    "getInstance",
    "successFun",
    "log",
    "message",
    "component",
    "FlashMessenger",
    "failFun",
    "msg",
    "logAs",
    "register",
    "RegistrationView"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Pedro Crespo (pcrespov)\n\n************************************************************************ */\n\n/**\n *\n *  TODO: add a check to prevent bots to register users\n*/\n\nqx.Class.define(\"qxapp.auth.ui.RegistrationView\", {\n  extend: qxapp.auth.core.BaseAuthPage,\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __email: null,\n\n    // overrides base\n    _buildPage: function() {\n      const validator = new qx.ui.form.validation.Manager();\n\n      this._addTitleHeader(this.tr(\"Registration\"));\n\n      // email, pass1 == pass2\n      const email = new qx.ui.form.TextField().set({\n        required: true,\n        placeholder: this.tr(\"Introduce your email\")\n      });\n      this.add(email);\n      qxapp.utils.Utils.setIdToWidget(email, \"registrationEmailFld\");\n      this.__email = email;\n\n      // const uname = new qx.ui.form.TextField().set({\n      //   required: true,\n      //   placeholder: this.tr(\"Introduce a user name\")\n      // });\n      // this.add(uname);\n\n      const pass1 = new qx.ui.form.PasswordField().set({\n        required: true,\n        placeholder: this.tr(\"Introduce a password\")\n      });\n      qxapp.utils.Utils.setIdToWidget(pass1, \"registrationPass1Fld\");\n      this.add(pass1);\n\n      const pass2 = new qx.ui.form.PasswordField().set({\n        required: true,\n        placeholder: this.tr(\"Retype the password\")\n      });\n      qxapp.utils.Utils.setIdToWidget(pass2, \"registrationPass2Fld\");\n      this.add(pass2);\n\n      const urlFragment = qxapp.utils.Utils.parseURLFragment();\n      const token = urlFragment.params ? urlFragment.params.invitation || null : null;\n      const invitation = new qx.ui.form.TextField().set({\n        visibility: \"excluded\",\n        value: token\n      });\n      this.add(invitation);\n\n      // validation\n      validator.add(email, qx.util.Validate.email());\n      validator.setValidator(function(_itemForms) {\n        return qxapp.auth.core.Utils.checkSamePasswords(pass1, pass2);\n      });\n\n\n      // submit & cancel buttons\n      const grp = new qx.ui.container.Composite(new qx.ui.layout.HBox(10));\n\n      const submitBtn = new qx.ui.form.Button(this.tr(\"Submit\"));\n      qxapp.utils.Utils.setIdToWidget(submitBtn, \"registrationSubmitBtn\");\n      grp.add(submitBtn, {\n        flex:1\n      });\n\n      const cancelBtn = new qx.ui.form.Button(this.tr(\"Cancel\"));\n      qxapp.utils.Utils.setIdToWidget(cancelBtn, \"registrationCancelBtn\");\n      grp.add(cancelBtn, {\n        flex:1\n      });\n\n      // interaction\n      submitBtn.addListener(\"execute\", e => {\n        const valid = validator.validate();\n        if (valid) {\n          this.__submit({\n            email: email.getValue(),\n            password: pass1.getValue(),\n            confirm: pass2.getValue(),\n            invitation: invitation.getValue() ? invitation.getValue() : \"\"\n          });\n        }\n      }, this);\n\n      cancelBtn.addListener(\"execute\", e => this.fireDataEvent(\"done\", null), this);\n\n      this.add(grp);\n    },\n\n    __submit: function(userData) {\n      console.debug(\"Registering new user\");\n\n      let manager = qxapp.auth.Manager.getInstance();\n\n      let successFun = function(log) {\n        this.fireDataEvent(\"done\", log.message);\n        qxapp.component.message.FlashMessenger.getInstance().log(log);\n      };\n\n      let failFun = function(msg) {\n        msg = msg || this.tr(\"Cannot register user\");\n        qxapp.component.message.FlashMessenger.getInstance().logAs(msg, \"ERROR\");\n      };\n\n      manager.register(userData, successFun, failFun, this);\n    }\n\n  }\n});\n"
  ]
}