{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/auth/ui/LoginView.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxapp",
    "auth",
    "core",
    "BaseAuthPage",
    "include",
    "MAuth",
    "events",
    "members",
    "__form",
    "_buildPage",
    "ui",
    "form",
    "Form",
    "atm",
    "basic",
    "Atom",
    "set",
    "icon",
    "iconPosition",
    "getChildControl",
    "width",
    "height",
    "scale",
    "add",
    "email",
    "TextField",
    "placeholder",
    "tr",
    "required",
    "getContentElement",
    "setAttribute",
    "utils",
    "Utils",
    "setIdToWidget",
    "util",
    "Validate",
    "addListener",
    "focus",
    "activate",
    "pass",
    "PasswordField",
    "loginBtn",
    "Button",
    "__login",
    "keyEvent",
    "getKeyIdentifier",
    "grp",
    "container",
    "Composite",
    "layout",
    "HBox",
    "registerBtn",
    "createLinkButton",
    "interval",
    "configTimer",
    "event",
    "Timer",
    "resource",
    "io",
    "rest",
    "ResourceFactory",
    "getInstance",
    "registerWithInvitation",
    "stop",
    "text",
    "component",
    "message",
    "FlashMessenger",
    "logAs",
    "fireEvent",
    "start",
    "forgotBtn",
    "forEach",
    "btn",
    "center",
    "allowGrowX",
    "__buildExternals",
    "txt",
    "console",
    "error",
    "flex",
    "validate",
    "getItems",
    "password",
    "manager",
    "Manager",
    "successFun",
    "log",
    "fireDataEvent",
    "_formElement",
    "dispose",
    "window",
    "history",
    "replaceState",
    "document",
    "title",
    "location",
    "pathname",
    "failFun",
    "msg",
    "String",
    "item",
    "invalidMessage",
    "valid",
    "login",
    "getValue",
    "resetValues",
    "fieldItems",
    "key",
    "resetValue",
    "LoginView"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Pedro Crespo (pcrespov)\n\n************************************************************************ */\n\n/** Login page\n *\n * - Form with fields necessary to login\n * - Form data validation\n * - Adds links to register and reset pages. Transitions are fired as events.\n * - To execute login, it delegates on the auth.manager\n * - Minimal layout and apperance is delegated to the selected theme\n */\n\nqx.Class.define(\"qxapp.auth.ui.LoginView\", {\n  extend: qxapp.auth.core.BaseAuthPage,\n  include: [\n    qxapp.auth.core.MAuth\n  ],\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    \"toRegister\": \"qx.event.type.Event\",\n    \"toReset\": \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // overrides base\n    __form: null,\n    _buildPage: function() {\n      this.__form = new qx.ui.form.Form();\n\n      const atm = new qx.ui.basic.Atom().set({\n        icon: \"qxapp/osparc-white.svg\",\n        iconPosition: \"top\"\n      });\n      atm.getChildControl(\"icon\").set({\n        width: 250,\n        height: 150,\n        scale: true\n      });\n      this.add(atm);\n\n      const email = new qx.ui.form.TextField().set({\n        placeholder: this.tr(\"Your email address\"),\n        required: true\n      });\n      this.add(email);\n      email.getContentElement().setAttribute(\"autocomplete\", \"username\");\n      qxapp.utils.Utils.setIdToWidget(email, \"loginUserEmailFld\");\n      this.__form.add(email, \"\", qx.util.Validate.email(), \"email\", null);\n      this.addListener(\"appear\", () => {\n        email.focus();\n        email.activate();\n      });\n      const pass = new qx.ui.form.PasswordField().set({\n        placeholder: this.tr(\"Your password\"),\n        required: true\n      });\n      pass.getContentElement().setAttribute(\"autocomplete\", \"current-password\");\n      qxapp.utils.Utils.setIdToWidget(pass, \"loginPasswordFld\");\n      this.add(pass);\n      this.__form.add(pass, \"\", null, \"password\", null);\n\n      const loginBtn = new qx.ui.form.Button(this.tr(\"Log In\"));\n      loginBtn.addListener(\"execute\", () => this.__login(), this);\n      // Listen to \"Enter\" key\n      this.addListener(\"keypress\", keyEvent => {\n        if (keyEvent.getKeyIdentifier() === \"Enter\") {\n          this.__login();\n        }\n      }, this);\n      qxapp.utils.Utils.setIdToWidget(loginBtn, \"loginSubmitBtn\");\n      this.add(loginBtn);\n\n\n      //  create account | forgot password? links\n      const grp = new qx.ui.container.Composite(new qx.ui.layout.HBox(20));\n\n      const registerBtn = this.createLinkButton(this.tr(\"Create Account\"), () => {\n        const interval = 1000;\n        const configTimer = new qx.event.Timer(interval);\n        const resource = qxapp.io.rest.ResourceFactory.getInstance();\n        let registerWithInvitation = resource.registerWithInvitation();\n        configTimer.addListener(\"interval\", () => {\n          registerWithInvitation = resource.registerWithInvitation();\n          if (registerWithInvitation !== null) {\n            configTimer.stop();\n            if (registerWithInvitation) {\n              let text = this.tr(\"Registration is currently only available with an invitation.\");\n              text += \"<br>\";\n              text += this.tr(\"Please contact info@itis.swiss\");\n              qxapp.component.message.FlashMessenger.getInstance().logAs(text, \"INFO\");\n            } else {\n              this.fireEvent(\"toRegister\");\n            }\n          }\n        }, this);\n        configTimer.start();\n      }, this);\n      qxapp.utils.Utils.setIdToWidget(registerBtn, \"loginCreateAccountBtn\");\n\n      const forgotBtn = this.createLinkButton(this.tr(\"Forgot Password?\"), () => {\n        this.fireEvent(\"toReset\");\n      }, this);\n      qxapp.utils.Utils.setIdToWidget(forgotBtn, \"loginForgotPasswordBtn\");\n\n      [registerBtn, forgotBtn].forEach(btn => {\n        grp.add(btn.set({\n          center: true,\n          allowGrowX: true\n        }), {\n          width: \"50%\"\n        });\n      });\n\n      this.add(grp);\n\n      // TODO: add here loging with NIH and openID\n      // this.add(this.__buildExternals());\n    },\n\n    __buildExternals: function() {\n      const grp = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n\n      [this.tr(\"Login with NIH\"), this.tr(\"Login with OpenID\")].forEach(txt => {\n        const btn = this.createLinkButton(txt, function() {\n          // TODO add here callback\n          console.error(\"Login with external services are still not implemented\");\n        }, this);\n\n        grp.add(btn.set({\n          center: true\n        }), {\n          flex:1\n        });\n      });\n\n      return grp;\n    },\n\n    __login: function() {\n      if (!this.__form.validate()) {\n        return;\n      }\n\n      const email = this.__form.getItems().email;\n      const pass = this.__form.getItems().password;\n\n      const manager = qxapp.auth.Manager.getInstance();\n\n      const successFun = function(log) {\n        this.fireDataEvent(\"done\", log.message);\n        // we don't need the form any more, so remove it and mock-navigate-away\n        // and thus tell the password manager to save the content\n        this._formElement.dispose();\n        window.history.replaceState(null, window.document.title, window.location.pathname);\n      };\n\n      const failFun = function(msg) {\n        // TODO: can get field info from response here\n        msg = String(msg) || this.tr(\"Introduced an invalid email or password\");\n        [email, pass].forEach(item => {\n          item.set({\n            invalidMessage: msg,\n            valid: false\n          });\n        });\n\n        qxapp.component.message.FlashMessenger.getInstance().logAs(msg, \"ERROR\");\n      };\n\n      manager.login(email.getValue(), pass.getValue(), successFun, failFun, this);\n    },\n\n    resetValues: function() {\n      const fieldItems = this.__form.getItems();\n      for (const key in fieldItems) {\n        fieldItems[key].resetValue();\n      }\n    }\n  }\n});\n"
  ]
}