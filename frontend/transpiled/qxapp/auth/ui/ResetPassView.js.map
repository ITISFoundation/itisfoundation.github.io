{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/auth/ui/ResetPassView.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxapp",
    "auth",
    "core",
    "BaseAuthPage",
    "members",
    "_buildPage",
    "validator",
    "ui",
    "form",
    "validation",
    "Manager",
    "_addTitleHeader",
    "tr",
    "password",
    "PasswordField",
    "set",
    "required",
    "placeholder",
    "add",
    "confirm",
    "urlFragment",
    "utils",
    "Utils",
    "parseURLFragment",
    "resetCode",
    "params",
    "code",
    "TextField",
    "visibility",
    "value",
    "setValidator",
    "_itemForms",
    "checkSamePasswords",
    "grp",
    "container",
    "Composite",
    "layout",
    "HBox",
    "submitBtn",
    "Button",
    "flex",
    "cancelBtn",
    "addListener",
    "e",
    "valid",
    "validate",
    "__submit",
    "getValue",
    "fireDataEvent",
    "manager",
    "getInstance",
    "successFun",
    "log",
    "message",
    "component",
    "FlashMessenger",
    "failFun",
    "msg",
    "logAs",
    "resetPassword",
    "ResetPassView"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;AAIAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,6BAAhB,EAA+C;AAC7CC,IAAAA,MAAM,EAAEC,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,YADqB;;AAG7C;;;;;AAMAC,IAAAA,OAAO,EAAE;AAEP;AACAC,MAAAA,UAAU,EAAE,sBAAW;AAAA;;AACrB,YAAIC,SAAS,GAAG,IAAIb,EAAE,CAACc,EAAH,CAAMC,IAAN,CAAWC,UAAX,CAAsBC,OAA1B,EAAhB;;AAEA,aAAKC,eAAL,CAAqB,KAAKC,EAAL,CAAQ,gBAAR,CAArB;;AAEA,YAAIC,QAAQ,GAAG,IAAIpB,EAAE,CAACc,EAAH,CAAMC,IAAN,CAAWM,aAAf,GAA+BC,GAA/B,CAAmC;AAChDC,UAAAA,QAAQ,EAAE,IADsC;AAEhDC,UAAAA,WAAW,EAAE,KAAKL,EAAL,CAAQ,mBAAR;AAFmC,SAAnC,CAAf;AAIA,aAAKM,GAAL,CAASL,QAAT;AAEA,YAAIM,OAAO,GAAG,IAAI1B,EAAE,CAACc,EAAH,CAAMC,IAAN,CAAWM,aAAf,GAA+BC,GAA/B,CAAmC;AAC/CC,UAAAA,QAAQ,EAAE,IADqC;AAE/CC,UAAAA,WAAW,EAAE,KAAKL,EAAL,CAAQ,0BAAR;AAFkC,SAAnC,CAAd;AAIA,aAAKM,GAAL,CAASC,OAAT;AAEA,YAAMC,WAAW,GAAGpB,KAAK,CAACqB,KAAN,CAAYC,KAAZ,CAAkBC,gBAAlB,EAApB;AACA,YAAMC,SAAS,GAAGJ,WAAW,CAACK,MAAZ,GAAqBL,WAAW,CAACK,MAAZ,CAAmBC,IAAnB,IAA2B,IAAhD,GAAuD,IAAzE;AACA,YAAMA,IAAI,GAAG,IAAIjC,EAAE,CAACc,EAAH,CAAMC,IAAN,CAAWmB,SAAf,GAA2BZ,GAA3B,CAA+B;AAC1Ca,UAAAA,UAAU,EAAE,UAD8B;AAE1CC,UAAAA,KAAK,EAAEL;AAFmC,SAA/B,CAAb;AAIA,aAAKN,GAAL,CAASQ,IAAT;AAEApB,QAAAA,SAAS,CAACwB,YAAV,CAAuB,UAASC,UAAT,EAAqB;AAC1C,iBAAO/B,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBoB,KAAhB,CAAsBU,kBAAtB,CAAyCnB,QAAzC,EAAmDM,OAAnD,CAAP;AACD,SAFD,EAzBqB,CA6BrB;;AACA,YAAIc,GAAG,GAAG,IAAIxC,EAAE,CAACc,EAAH,CAAM2B,SAAN,CAAgBC,SAApB,CAA8B,IAAI1C,EAAE,CAACc,EAAH,CAAM6B,MAAN,CAAaC,IAAjB,CAAsB,EAAtB,CAA9B,CAAV;AAEA,YAAIC,SAAS,GAAG,IAAI7C,EAAE,CAACc,EAAH,CAAMC,IAAN,CAAW+B,MAAf,CAAsB,KAAK3B,EAAL,CAAQ,QAAR,CAAtB,CAAhB;AACAqB,QAAAA,GAAG,CAACf,GAAJ,CAAQoB,SAAR,EAAmB;AACjBE,UAAAA,IAAI,EAAC;AADY,SAAnB;AAIA,YAAIC,SAAS,GAAG,IAAIhD,EAAE,CAACc,EAAH,CAAMC,IAAN,CAAW+B,MAAf,CAAsB,KAAK3B,EAAL,CAAQ,QAAR,CAAtB,CAAhB;AACAqB,QAAAA,GAAG,CAACf,GAAJ,CAAQuB,SAAR,EAAmB;AACjBD,UAAAA,IAAI,EAAC;AADY,SAAnB,EAtCqB,CA0CrB;;AACAF,QAAAA,SAAS,CAACI,WAAV,CAAsB,SAAtB,EAAiC,UAAAC,CAAC,EAAI;AACpC,cAAMC,KAAK,GAAGtC,SAAS,CAACuC,QAAV,EAAd;;AACA,cAAID,KAAJ,EAAW;AACT,YAAA,KAAI,CAACE,QAAL,CAAcjC,QAAQ,CAACkC,QAAT,EAAd,EAAmC5B,OAAO,CAAC4B,QAAR,EAAnC,EAAuDrB,IAAI,CAACqB,QAAL,EAAvD;AACD;AACF,SALD,EAKG,IALH;AAOAN,QAAAA,SAAS,CAACC,WAAV,CAAsB,SAAtB,EAAiC,UAAAC,CAAC,EAAI;AACpC,UAAA,KAAI,CAACK,aAAL,CAAmB,MAAnB,EAA2B,IAA3B;AACD,SAFD,EAEG,IAFH;AAIA,aAAK9B,GAAL,CAASe,GAAT;AACD,OA1DM;AA4DPa,MAAAA,QAAQ,EAAE,kBAASjC,QAAT,EAAmBM,OAAnB,EAA4BO,IAA5B,EAAkC;AAC1C,YAAIuB,OAAO,GAAGjD,KAAK,CAACC,IAAN,CAAWS,OAAX,CAAmBwC,WAAnB,EAAd;;AAEA,YAAIC,UAAU,GAAG,SAAbA,UAAa,CAASC,GAAT,EAAc;AAC7B,eAAKJ,aAAL,CAAmB,MAAnB,EAA2BI,GAAG,CAACC,OAA/B;AACArD,UAAAA,KAAK,CAACsD,SAAN,CAAgBD,OAAhB,CAAwBE,cAAxB,CAAuCL,WAAvC,GAAqDE,GAArD,CAAyDA,GAAzD;AACD,SAHD;;AAKA,YAAII,OAAO,GAAG,SAAVA,OAAU,CAASC,GAAT,EAAc;AAC1BA,UAAAA,GAAG,GAAGA,GAAG,IAAI,KAAK7C,EAAL,CAAQ,0BAAR,CAAb;AACAZ,UAAAA,KAAK,CAACsD,SAAN,CAAgBD,OAAhB,CAAwBE,cAAxB,CAAuCL,WAAvC,GAAqDQ,KAArD,CAA2DD,GAA3D,EAAgE,OAAhE,EAAyE,MAAzE;AACD,SAHD;;AAKAR,QAAAA,OAAO,CAACU,aAAR,CAAsB9C,QAAtB,EAAgCM,OAAhC,EAAyCO,IAAzC,EAA+CyB,UAA/C,EAA2DK,OAA3D,EAAoE,IAApE;AACD;AA1EM;AAToC,GAA/C;AArBAxD,EAAAA,KAAK,CAACC,IAAN,CAAWM,EAAX,CAAcqD,aAAd,CAA4BhE,aAA5B,GAA4CA,aAA5C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Pedro Crespo (pcrespov)\n\n************************************************************************ */\n\n/** Page to reset user's password\n *\n */\n\nqx.Class.define(\"qxapp.auth.ui.ResetPassView\", {\n  extend: qxapp.auth.core.BaseAuthPage,\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n\n    // overrides base\n    _buildPage: function() {\n      let validator = new qx.ui.form.validation.Manager();\n\n      this._addTitleHeader(this.tr(\"Reset Password\"));\n\n      let password = new qx.ui.form.PasswordField().set({\n        required: true,\n        placeholder: this.tr(\"Your new password\")\n      });\n      this.add(password);\n\n      let confirm = new qx.ui.form.PasswordField().set({\n        required: true,\n        placeholder: this.tr(\"Retype your new password\")\n      });\n      this.add(confirm);\n\n      const urlFragment = qxapp.utils.Utils.parseURLFragment();\n      const resetCode = urlFragment.params ? urlFragment.params.code || null : null;\n      const code = new qx.ui.form.TextField().set({\n        visibility: \"excluded\",\n        value: resetCode\n      });\n      this.add(code);\n\n      validator.setValidator(function(_itemForms) {\n        return qxapp.auth.core.Utils.checkSamePasswords(password, confirm);\n      });\n\n      // submit and cancel buttons\n      let grp = new qx.ui.container.Composite(new qx.ui.layout.HBox(10));\n\n      let submitBtn = new qx.ui.form.Button(this.tr(\"Submit\"));\n      grp.add(submitBtn, {\n        flex:1\n      });\n\n      let cancelBtn = new qx.ui.form.Button(this.tr(\"Cancel\"));\n      grp.add(cancelBtn, {\n        flex:1\n      });\n\n      // interaction\n      submitBtn.addListener(\"execute\", e => {\n        const valid = validator.validate();\n        if (valid) {\n          this.__submit(password.getValue(), confirm.getValue(), code.getValue());\n        }\n      }, this);\n\n      cancelBtn.addListener(\"execute\", e => {\n        this.fireDataEvent(\"done\", null);\n      }, this);\n\n      this.add(grp);\n    },\n\n    __submit: function(password, confirm, code) {\n      let manager = qxapp.auth.Manager.getInstance();\n\n      let successFun = function(log) {\n        this.fireDataEvent(\"done\", log.message);\n        qxapp.component.message.FlashMessenger.getInstance().log(log);\n      };\n\n      let failFun = function(msg) {\n        msg = msg || this.tr(\"Could not reset password\");\n        qxapp.component.message.FlashMessenger.getInstance().logAs(msg, \"ERROR\", \"user\");\n      };\n\n      manager.resetPassword(password, confirm, code, successFun, failFun, this);\n    }\n\n  }\n});\n"
  ]
}