{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/file/FilesAdd.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "label",
    "tr",
    "filesAddLayout",
    "layout",
    "HBox",
    "_setLayout",
    "input",
    "html",
    "Input",
    "display",
    "multiple",
    "getContentElement",
    "add",
    "btn",
    "_createChildControlImpl",
    "set",
    "addListener",
    "e",
    "getDomElement",
    "click",
    "files",
    "i",
    "length",
    "__retrieveURLAndUpload",
    "properties",
    "node",
    "check",
    "nullable",
    "studyId",
    "init",
    "events",
    "members",
    "id",
    "control",
    "container",
    "Composite",
    "_addAt",
    "toolbar",
    "Button",
    "_add",
    "file",
    "dataStore",
    "qxapp",
    "store",
    "Data",
    "getInstance",
    "addListenerOnce",
    "presignedLinkData",
    "getData",
    "locationId",
    "fileUuid",
    "presignedLink",
    "__uploadFile",
    "link",
    "download",
    "getStudyId",
    "utils",
    "Utils",
    "uuidv4",
    "nodeId",
    "getNode",
    "getNodeId",
    "fileId",
    "name",
    "getPresignedLink",
    "url",
    "hBox",
    "basic",
    "Atom",
    "progressBar",
    "ProgressBar",
    "xhr",
    "XMLHttpRequest",
    "upload",
    "addEventListener",
    "lengthComputable",
    "percentComplete",
    "loaded",
    "total",
    "setValue",
    "console",
    "log",
    "onload",
    "status",
    "destroy",
    "fireDataEvent",
    "response",
    "open",
    "send",
    "FilesAdd"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAuBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qBAAhB,EAAuC;AACrCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADkB;;AAGrC;;;AAGAC,IAAAA,SAAS,EAAE,qBAAyC;AAAA;;AAAA,UAAhCC,KAAgC,uEAAxB,KAAKC,EAAL,CAAQ,aAAR,CAAwB;AAClD;AAEA,UAAIC,cAAc,GAAG,IAAIb,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaC,IAAjB,CAAsB,EAAtB,CAArB;;AACA,WAAKC,UAAL,CAAgBH,cAAhB,EAJkD,CAMlD;;;AACA,UAAII,KAAK,GAAG,IAAIjB,EAAE,CAACkB,IAAH,CAAQC,KAAZ,CAAkB,MAAlB,EAA0B;AACpCC,QAAAA,OAAO,EAAE;AAD2B,OAA1B,EAET;AACDC,QAAAA,QAAQ,EAAE;AADT,OAFS,CAAZ;AAMA,WAAKC,iBAAL,GAAyBC,GAAzB,CAA6BN,KAA7B;;AAEA,UAAIO,GAAG,GAAG,KAAKC,uBAAL,CAA6B,WAA7B,EAA0CC,GAA1C,CAA8C;AACtDf,QAAAA,KAAK,EAAEA;AAD+C,OAA9C,CAAV,CAfkD,CAkBlD;;;AACAa,MAAAA,GAAG,CAACG,WAAJ,CAAgB,SAAhB,EAA2B,UAAAC,CAAC,EAAI;AAC9BX,QAAAA,KAAK,CAACY,aAAN,GAAsBC,KAAtB;AACD,OAFD;AAIAb,MAAAA,KAAK,CAACU,WAAN,CAAkB,QAAlB,EAA4B,UAAAC,CAAC,EAAI;AAC/B,YAAIG,KAAK,GAAGd,KAAK,CAACY,aAAN,GAAsBE,KAAlC;;AACA,aAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,KAAK,CAACE,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,UAAA,KAAI,CAACE,sBAAL,CAA4BH,KAAK,CAACC,CAAD,CAAjC;AACD;AACF,OALD,EAKG,IALH;AAMD,KAnCoC;AAqCrCG,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE,uBADH;AAEJC,QAAAA,QAAQ,EAAE;AAFN,OADI;AAMVC,MAAAA,OAAO,EAAE;AACPF,QAAAA,KAAK,EAAE,QADA;AAEPG,QAAAA,IAAI,EAAE,EAFC;AAGPF,QAAAA,QAAQ,EAAE;AAHH;AANC,KArCyB;AAkDrCG,IAAAA,MAAM,EAAE;AACN,mBAAa;AADP,KAlD6B;AAsDrCC,IAAAA,OAAO,EAAE;AACPjB,MAAAA,uBAAuB,EAAE,iCAASkB,EAAT,EAAa;AACpC,YAAIC,OAAJ;;AACA,gBAAQD,EAAR;AACE,eAAK,aAAL;AACEC,YAAAA,OAAO,GAAG,IAAI5C,EAAE,CAACO,EAAH,CAAMsC,SAAN,CAAgBC,SAApB,CAA8B,IAAI9C,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaC,IAAjB,EAA9B,CAAV;;AACA,iBAAKgC,MAAL,CAAYH,OAAZ,EAAqB,CAArB;;AACA;;AACF,eAAK,WAAL;AACEA,YAAAA,OAAO,GAAG,IAAI5C,EAAE,CAACO,EAAH,CAAMyC,OAAN,CAAcC,MAAlB,EAAV;;AACA,iBAAKC,IAAL,CAAUN,OAAV;;AACA;AARJ;;AAUA,eAAOA,OAAO,0EAAyBD,EAAzB,CAAd;AACD,OAdM;AAgBP;AACAT,MAAAA,sBAAsB,EAAE,gCAASiB,IAAT,EAAe;AAAA;;AACrC,YAAIC,SAAS,GAAGC,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBC,WAAjB,EAAhB;AACAJ,QAAAA,SAAS,CAACK,eAAV,CAA0B,eAA1B,EAA2C,UAAA7B,CAAC,EAAI;AAC9C,cAAM8B,iBAAiB,GAAG9B,CAAC,CAAC+B,OAAF,EAA1B;AACAR,UAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmBO,iBAAiB,CAACE,UAArC;AACAT,UAAAA,IAAI,CAAC,MAAD,CAAJ,GAAeO,iBAAiB,CAACG,QAAjC;;AACA,cAAIH,iBAAiB,CAACI,aAAtB,EAAqC;AACnC,YAAA,MAAI,CAACC,YAAL,CAAkBZ,IAAlB,EAAwBO,iBAAiB,CAACI,aAAlB,CAAgCE,IAAxD;AACD;AACF,SAPD,EAOG,IAPH;AAQA,YAAMC,QAAQ,GAAG,KAAjB;AACA,YAAML,UAAU,GAAG,CAAnB;AACA,YAAMrB,OAAO,GAAG,KAAK2B,UAAL,MAAqBb,KAAK,CAACc,KAAN,CAAYC,KAAZ,CAAkBC,MAAlB,EAArC;AACA,YAAMC,MAAM,GAAG,KAAKC,OAAL,KAAiB,KAAKA,OAAL,GAAeC,SAAf,EAAjB,GAA8CnB,KAAK,CAACc,KAAN,CAAYC,KAAZ,CAAkBC,MAAlB,EAA7D;AACA,YAAMI,MAAM,GAAGtB,IAAI,CAACuB,IAApB;AACA,YAAMb,QAAQ,GAAGtB,OAAO,GAAE,GAAT,GAAc+B,MAAd,GAAsB,GAAtB,GAA2BG,MAA5C;AACArB,QAAAA,SAAS,CAACuB,gBAAV,CAA2BV,QAA3B,EAAqCL,UAArC,EAAiDC,QAAjD;AACD,OAlCM;AAoCP;AACAE,MAAAA,YAAY,EAAE,sBAASZ,IAAT,EAAeyB,GAAf,EAAoB;AAAA;;AAChC,YAAMC,IAAI,GAAG,KAAKpD,uBAAL,CAA6B,aAA7B,CAAb;;AACA,YAAMd,KAAK,GAAG,IAAIX,EAAE,CAACO,EAAH,CAAMuE,KAAN,CAAYC,IAAhB,CAAqB5B,IAAI,CAACuB,IAA1B,CAAd;AACA,YAAMM,WAAW,GAAG,IAAI3B,KAAK,CAAC9C,EAAN,CAASyC,OAAT,CAAiBiC,WAArB,EAApB;AACAJ,QAAAA,IAAI,CAACtD,GAAL,CAASZ,KAAT;AACAkE,QAAAA,IAAI,CAACtD,GAAL,CAASyD,WAAT,EALgC,CAOhC;;AACA,YAAIE,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,QAAAA,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4B,UAA5B,EAAwC,UAAAzD,CAAC,EAAI;AAC3C,cAAIA,CAAC,CAAC0D,gBAAN,EAAwB;AACtB,gBAAMC,eAAe,GAAG3D,CAAC,CAAC4D,MAAF,GAAW5D,CAAC,CAAC6D,KAAb,GAAqB,GAA7C;AACAT,YAAAA,WAAW,CAACU,QAAZ,CAAqBH,eAArB;AACD,WAHD,MAGO;AACLI,YAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ;AACD;AACF,SAPD,EAOG,KAPH;;AAQAV,QAAAA,GAAG,CAACW,MAAJ,GAAa,YAAM;AACjB,cAAIX,GAAG,CAACY,MAAJ,IAAc,GAAlB,EAAuB;AACrBH,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBzC,IAAI,CAACuB,IAA7B;AACAG,YAAAA,IAAI,CAACkB,OAAL;;AACA,YAAA,MAAI,CAACC,aAAL,CAAmB,WAAnB,EAAgC7C,IAAhC;AACD,WAJD,MAIO;AACLwC,YAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACe,QAAhB;AACD;AACF,SARD;;AASAf,QAAAA,GAAG,CAACgB,IAAJ,CAAS,KAAT,EAAgBtB,GAAhB,EAAqB,IAArB;AACAM,QAAAA,GAAG,CAACiB,IAAJ,CAAShD,IAAT;AACD;AAjEM;AAtD4B,GAAvC;AA1CAE,EAAAA,KAAK,CAACF,IAAN,CAAWiD,QAAX,CAAoBjG,aAApB,GAAoCA,aAApC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/* global XMLHttpRequest */\n\n/**\n * Widget that provides a way to upload files to S3\n *\n *   It consists of a VBox containing a button that pops up a dialogue for selecting multiple files and\n * progerss bars for showing the uploading status.\n *\n *   When selecting the file to be uploaded this widget will ask for a presigned link where the file can be put\n * and start the file transimision via XMLHttpRequest. If the uplaod is successful, \"fileAdded\" data event will\n * be fired.\n *\n *   This class also accepts a Node and StudyID that are used for putting the file in the correct folder strucutre.\n * If are not provided, random uuids will be used.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let filesAdd = new qxapp.file.FilesAdd(this.tr(\"Add file(s)\"));\n *   this.getRoot().add(filesAdd);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.file.FilesAdd\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n    * @param label {String} Text to be displayed in the button\n  */\n  construct: function(label = this.tr(\"Add file(s)\")) {\n    this.base(arguments);\n\n    let filesAddLayout = new qx.ui.layout.HBox(10);\n    this._setLayout(filesAddLayout);\n\n    // Create a button\n    let input = new qx.html.Input(\"file\", {\n      display: \"none\"\n    }, {\n      multiple: true\n    });\n\n    this.getContentElement().add(input);\n\n    let btn = this._createChildControlImpl(\"addButton\").set({\n      label: label\n    });\n    // Add an event listener\n    btn.addListener(\"execute\", e => {\n      input.getDomElement().click();\n    });\n\n    input.addListener(\"change\", e => {\n      let files = input.getDomElement().files;\n      for (let i=0; i<files.length; i++) {\n        this.__retrieveURLAndUpload(files[i]);\n      }\n    }, this);\n  },\n\n  properties: {\n    node: {\n      check: \"qxapp.data.model.Node\",\n      nullable: true\n    },\n\n    studyId: {\n      check: \"String\",\n      init: \"\",\n      nullable: true\n    }\n  },\n\n  events: {\n    \"fileAdded\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    _createChildControlImpl: function(id) {\n      let control;\n      switch (id) {\n        case \"progressBox\":\n          control = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n          this._addAt(control, 0);\n          break;\n        case \"addButton\":\n          control = new qx.ui.toolbar.Button();\n          this._add(control);\n          break;\n      }\n      return control || this.base(arguments, id);\n    },\n\n    // Request to the server an upload URL.\n    __retrieveURLAndUpload: function(file) {\n      let dataStore = qxapp.store.Data.getInstance();\n      dataStore.addListenerOnce(\"presignedLink\", e => {\n        const presignedLinkData = e.getData();\n        file[\"location\"] = presignedLinkData.locationId;\n        file[\"path\"] = presignedLinkData.fileUuid;\n        if (presignedLinkData.presignedLink) {\n          this.__uploadFile(file, presignedLinkData.presignedLink.link);\n        }\n      }, this);\n      const download = false;\n      const locationId = 0;\n      const studyId = this.getStudyId() || qxapp.utils.Utils.uuidv4();\n      const nodeId = this.getNode() ? this.getNode().getNodeId() : qxapp.utils.Utils.uuidv4();\n      const fileId = file.name;\n      const fileUuid = studyId +\"/\"+ nodeId +\"/\"+ fileId;\n      dataStore.getPresignedLink(download, locationId, fileUuid);\n    },\n\n    // Use XMLHttpRequest to upload the file to S3.\n    __uploadFile: function(file, url) {\n      const hBox = this._createChildControlImpl(\"progressBox\");\n      const label = new qx.ui.basic.Atom(file.name);\n      const progressBar = new qxapp.ui.toolbar.ProgressBar();\n      hBox.add(label);\n      hBox.add(progressBar);\n\n      // From https://github.com/minio/cookbook/blob/master/docs/presigned-put-upload-via-browser.md\n      let xhr = new XMLHttpRequest();\n      xhr.upload.addEventListener(\"progress\", e => {\n        if (e.lengthComputable) {\n          const percentComplete = e.loaded / e.total * 100;\n          progressBar.setValue(percentComplete);\n        } else {\n          console.log(\"Unable to compute progress information since the total size is unknown\");\n        }\n      }, false);\n      xhr.onload = () => {\n        if (xhr.status == 200) {\n          console.log(\"Uploaded\", file.name);\n          hBox.destroy();\n          this.fireDataEvent(\"fileAdded\", file);\n        } else {\n          console.log(xhr.response);\n        }\n      };\n      xhr.open(\"PUT\", url, true);\n      xhr.send(file);\n    }\n  }\n});\n"
  ]
}