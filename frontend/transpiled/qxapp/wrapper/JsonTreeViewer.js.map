{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/wrapper/JsonTreeViewer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "NAME",
    "VERSION",
    "URL",
    "construct",
    "properties",
    "libReady",
    "nullable",
    "init",
    "check",
    "members",
    "jsonTreeViewerPath",
    "jsonTreeViewerCss",
    "jsonTreeViewerCssUri",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "module",
    "Css",
    "includeStylesheet",
    "dynLoader",
    "DynamicScriptLoader",
    "addListenerOnce",
    "e",
    "console",
    "log",
    "setLibReady",
    "addListener",
    "data",
    "getData",
    "error",
    "script",
    "start",
    "print",
    "wrapper",
    "jsonTree",
    "create",
    "qxapp",
    "JsonTreeViewer"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;AAEA;;;;;;AAMA;;;;AAKAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,8BAAhB,EAAgD;AAC9CC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MAD8B;AAE9CC,IAAAA,IAAI,EAAE,WAFwC;AAI9CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,OAAO,EAAE,OAFF;AAGPC,MAAAA,GAAG,EAAE;AAHE,KAJqC;AAU9CC,IAAAA,SAAS,EAAE,qBAAW;AACpB;AACD,KAZ6C;AAc9CC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE,KADF;AAERC,QAAAA,IAAI,EAAE,KAFE;AAGRC,QAAAA,KAAK,EAAE;AAHC;AADA,KAdkC;AAsB9CC,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAE,gBAAW;AAAA;;AACf;AACA,YAAIG,kBAAkB,GAAG,4BAAzB;AACA,YAAIC,iBAAiB,GAAG,6BAAxB;AACA,YAAIC,oBAAoB,GAAGvB,EAAE,CAACwB,IAAH,CAAQC,eAAR,CAAwBC,WAAxB,GAAsCC,KAAtC,CAA4CL,iBAA5C,CAA3B;AACAtB,QAAAA,EAAE,CAAC4B,MAAH,CAAUC,GAAV,CAAcC,iBAAd,CAAgCP,oBAAhC;AACA,YAAIQ,SAAS,GAAG,IAAI/B,EAAE,CAACwB,IAAH,CAAQQ,mBAAZ,CAAgC,CAC9CX,kBAD8C,CAAhC,CAAhB;AAIAU,QAAAA,SAAS,CAACE,eAAV,CAA0B,OAA1B,EAAmC,UAAAC,CAAC,EAAI;AACtCC,UAAAA,OAAO,CAACC,GAAR,CAAYf,kBAAkB,GAAG,SAAjC;;AACA,UAAA,KAAI,CAACgB,WAAL,CAAiB,IAAjB;AACD,SAHD,EAGG,IAHH;AAKAN,QAAAA,SAAS,CAACO,WAAV,CAAsB,QAAtB,EAAgC,UAAAJ,CAAC,EAAI;AACnC,cAAIK,IAAI,GAAGL,CAAC,CAACM,OAAF,EAAX;AACAL,UAAAA,OAAO,CAACM,KAAR,CAAc,oBAAoBF,IAAI,CAACG,MAAvC;AACD,SAHD,EAGG,IAHH;AAKAX,QAAAA,SAAS,CAACY,KAAV;AACD,OAtBM;AAwBPC,MAAAA,KAAK,EAAE,eAASL,IAAT,EAAeM,OAAf,EAAwB;AAC7BC,QAAAA,QAAQ,CAACC,MAAT,CAAgBR,IAAhB,EAAsBM,OAAtB,EAD6B,CAE7B;AACD;AA3BM;AAtBqC,GAAhD;AA9BAG,EAAAA,KAAK,CAACH,OAAN,CAAcI,cAAd,CAA6B9C,aAA7B,GAA6CA,aAA7C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/* global jsonTree */\n\n/**\n * @asset(jsontreeviewer/jsonTree.*)\n * @asset(jsontreeviewer/icons.svg)\n * @ignore(jsonTree)\n */\n\n/**\n * A qooxdoo wrapper for\n * <a href='https://github.com/summerstyle/jsonTreeViewer' target='_blank'>JsonTreeViewer</a>\n */\n\nqx.Class.define(\"qxapp.wrapper.JsonTreeViewer\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  statics: {\n    NAME: \"jsonTreeViewer\",\n    VERSION: \"0.6.0\",\n    URL: \"https://github.com/summerstyle/jsonTreeViewer\"\n  },\n\n  construct: function() {\n    this.base(arguments);\n  },\n\n  properties: {\n    libReady: {\n      nullable: false,\n      init: false,\n      check: \"Boolean\"\n    }\n  },\n\n  members: {\n    init: function() {\n      // initialize the script loading\n      let jsonTreeViewerPath = \"jsontreeviewer/jsonTree.js\";\n      let jsonTreeViewerCss = \"jsontreeviewer/jsonTree.css\";\n      let jsonTreeViewerCssUri = qx.util.ResourceManager.getInstance().toUri(jsonTreeViewerCss);\n      qx.module.Css.includeStylesheet(jsonTreeViewerCssUri);\n      let dynLoader = new qx.util.DynamicScriptLoader([\n        jsonTreeViewerPath\n      ]);\n\n      dynLoader.addListenerOnce(\"ready\", e => {\n        console.log(jsonTreeViewerPath + \" loaded\");\n        this.setLibReady(true);\n      }, this);\n\n      dynLoader.addListener(\"failed\", e => {\n        let data = e.getData();\n        console.error(\"failed to load \" + data.script);\n      }, this);\n\n      dynLoader.start();\n    },\n\n    print: function(data, wrapper) {\n      jsonTree.create(data, wrapper);\n      // tree.expand();\n    }\n  }\n});\n"
  ]
}