{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/wrapper/Svg.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "NAME",
    "VERSION",
    "URL",
    "construct",
    "properties",
    "libReady",
    "nullable",
    "init",
    "check",
    "events",
    "members",
    "svgPath",
    "svgPathPath",
    "dynLoader",
    "util",
    "DynamicScriptLoader",
    "addListenerOnce",
    "e",
    "console",
    "log",
    "setLibReady",
    "fireDataEvent",
    "addListener",
    "data",
    "getData",
    "error",
    "script",
    "start",
    "createEmptyCanvas",
    "id",
    "SVG",
    "drawCurve",
    "draw",
    "controls",
    "edgeWidth",
    "portSphereDiameter",
    "arrowSize",
    "edgeColor",
    "qxapp",
    "theme",
    "Color",
    "colors",
    "path",
    "M",
    "x",
    "y",
    "C",
    "fill",
    "stroke",
    "width",
    "color",
    "marker1",
    "marker",
    "add",
    "circle",
    "marker2",
    "size",
    "markers",
    "updateCurve",
    "curve",
    "type",
    "mSegment",
    "getSegment",
    "coords",
    "replaceSegment",
    "cSegment",
    "removeCurve",
    "remove",
    "updateColor",
    "attr",
    "forEach",
    "markerDiv",
    "node",
    "childNodes",
    "setAttribute",
    "wrapper",
    "Svg"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/* global SVG */\n/* eslint new-cap: [2, {capIsNewExceptions: [\"SVG\", \"M\", \"C\"]}] */\n\n/**\n * @asset(svg/svg.*js)\n * @ignore(SVG)\n */\n\n/**\n * A qooxdoo wrapper for\n * <a href='https://github.com/svgdotjs/svg.js' target='_blank'>SVG</a>\n */\n\nqx.Class.define(\"qxapp.wrapper.Svg\", {\n  extend: qx.core.Object,\n\n  statics: {\n    NAME: \"svg.js\",\n    VERSION: \"2.7.1\",\n    URL: \"https://github.com/svgdotjs/svg.js\"\n  },\n\n  construct: function() {\n  },\n\n  properties: {\n    libReady: {\n      nullable: false,\n      init: false,\n      check: \"Boolean\"\n    }\n  },\n\n  events: {\n    \"svgLibReady\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    init: function() {\n      // initialize the script loading\n      let svgPath = \"svg/svg.js\";\n      let svgPathPath = \"svg/svg.path.js\";\n      let dynLoader = new qx.util.DynamicScriptLoader([\n        svgPath,\n        svgPathPath\n      ]);\n\n      dynLoader.addListenerOnce(\"ready\", e => {\n        console.log(svgPath + \" loaded\");\n        this.setLibReady(true);\n        this.fireDataEvent(\"svgLibReady\", true);\n      }, this);\n\n      dynLoader.addListener(\"failed\", e => {\n        let data = e.getData();\n        console.error(\"failed to load \" + data.script);\n        this.fireDataEvent(\"svgLibReady\", false);\n      }, this);\n\n      dynLoader.start();\n    },\n\n    createEmptyCanvas: function(id) {\n      return SVG(id);\n    },\n\n    drawCurve: function(draw, controls, edgeWidth = 3, portSphereDiameter = 4, arrowSize = 4) {\n      const edgeColor = qxapp.theme.Color.colors[\"workbench-edge-comp-active\"];\n\n      let path = draw.path()\n        .M(controls[0].x, controls[0].y)\n        .C(controls[1], controls[2], controls[3])\n        .fill(\"none\")\n        .stroke({\n          width: edgeWidth,\n          color: edgeColor\n        });\n\n      let marker1 = draw.marker(portSphereDiameter, portSphereDiameter, function(add) {\n        add.circle(portSphereDiameter)\n          .fill(edgeColor);\n      });\n      path.marker(\"start\", marker1);\n\n      let marker2 = draw.marker(arrowSize, arrowSize, function(add) {\n        add.path(\"M 0 0 V 4 L 2 2 Z\")\n          .fill(edgeColor)\n          .size(arrowSize, arrowSize);\n      });\n      path.marker(\"end\", marker2);\n\n      path.markers = [marker1, marker2];\n\n      return path;\n    },\n\n    updateCurve: function(curve, controls) {\n      if (curve.type === \"path\") {\n        let mSegment = curve.getSegment(0);\n        mSegment.coords = [controls[0].x, controls[0].y];\n        curve.replaceSegment(0, mSegment);\n\n        let cSegment = curve.getSegment(1);\n        cSegment.coords = [controls[1].x, controls[1].y, controls[2].x, controls[2].y, controls[3].x, controls[3].y];\n        curve.replaceSegment(1, cSegment);\n      }\n    },\n\n    removeCurve: function(curve) {\n      if (curve.type === \"path\") {\n        curve.remove();\n      }\n    },\n\n    updateColor: function(curve, color) {\n      if (curve.type === \"path\") {\n        curve.attr({\n          stroke: color\n        });\n        if (curve.markers) {\n          curve.markers.forEach(markerDiv => {\n            markerDiv.node.childNodes.forEach(node => {\n              node.setAttribute(\"fill\", color);\n            });\n          });\n        }\n      }\n    }\n  }\n});\n"
  ]
}