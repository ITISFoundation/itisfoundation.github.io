{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/wrapper/JsonDiffPatch.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "NAME",
    "VERSION",
    "URL",
    "construct",
    "properties",
    "libReady",
    "nullable",
    "init",
    "check",
    "members",
    "__diffPatcher",
    "jsondiffpatchPath",
    "dynLoader",
    "util",
    "DynamicScriptLoader",
    "addListenerOnce",
    "e",
    "console",
    "log",
    "jsondiffpatch",
    "create",
    "setLibReady",
    "addListener",
    "data",
    "getData",
    "error",
    "script",
    "start",
    "diff",
    "obj1",
    "obj2",
    "delta",
    "patch",
    "obj",
    "clone",
    "qxapp",
    "wrapper",
    "JsonDiffPatch"
  ],
  "mappings": ";;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;AAKA;;AAEA;;;;AAKAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,6BAAhB,EAA+C;AAC7CC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MAD6B;AAE7CC,IAAAA,IAAI,EAAE,WAFuC;AAI7CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAE,QAFF;AAGPC,MAAAA,GAAG,EAAE;AAHE,KAJoC;AAU7CC,IAAAA,SAAS,EAAE,qBAAW;AACpB;AACD,KAZ4C;AAc7CC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE,KADF;AAERC,QAAAA,IAAI,EAAE,KAFE;AAGRC,QAAAA,KAAK,EAAE;AAHC;AADA,KAdiC;AAsB7CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,IADR;AAGPH,MAAAA,IAAI,EAAE,gBAAW;AAAA;;AACf;AACA,YAAII,iBAAiB,GAAG,oCAAxB;AACA,YAAIC,SAAS,GAAG,IAAIvB,EAAE,CAACwB,IAAH,CAAQC,mBAAZ,CAAgC,CAC9CH,iBAD8C,CAAhC,CAAhB;AAIAC,QAAAA,SAAS,CAACG,eAAV,CAA0B,OAA1B,EAAmC,UAAAC,CAAC,EAAI;AACtCC,UAAAA,OAAO,CAACC,GAAR,CAAYP,iBAAiB,GAAG,SAAhC;AAEA,UAAA,KAAI,CAACD,aAAL,GAAqBS,aAAa,CAACC,MAAd,EAArB;;AAEA,UAAA,KAAI,CAACC,WAAL,CAAiB,IAAjB;AACD,SAND,EAMG,IANH;AAQAT,QAAAA,SAAS,CAACU,WAAV,CAAsB,QAAtB,EAAgC,UAAAN,CAAC,EAAI;AACnC,cAAIO,IAAI,GAAGP,CAAC,CAACQ,OAAF,EAAX;AACAP,UAAAA,OAAO,CAACQ,KAAR,CAAc,oBAAoBF,IAAI,CAACG,MAAvC;AACD,SAHD,EAGG,IAHH;AAKAd,QAAAA,SAAS,CAACe,KAAV;AACD,OAxBM;AA0BPC,MAAAA,IAAI,EAAE,cAASC,IAAT,EAAeC,IAAf,EAAqB;AACzB;AACA,YAAIC,KAAK,GAAG,KAAKrB,aAAL,CAAmBkB,IAAnB,CAAwBC,IAAxB,EAA8BC,IAA9B,CAAZ;;AACA,eAAOC,KAAP;AACD,OA9BM;AAgCPC,MAAAA,KAAK,EAAE,eAASC,GAAT,EAAcF,KAAd,EAAqB;AAC1B,aAAKrB,aAAL,CAAmBsB,KAAnB,CAAyBC,GAAzB,EAA8BF,KAA9B;;AACA,eAAOE,GAAP;AACD,OAnCM;AAqCP;AACAC,MAAAA,KAAK,EAAE,eAASD,GAAT,EAAc;AACnB,eAAO,KAAKvB,aAAL,CAAmBwB,KAAnB,CAAyBD,GAAzB,CAAP;AACD;AAxCM;AAtBoC,GAA/C;AA7BAE,EAAAA,KAAK,CAACC,OAAN,CAAcC,aAAd,CAA4B7C,aAA5B,GAA4CA,aAA5C",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * @asset(jsondiffpatch/jsondiffpatch.*js)\n * @ignore(jsondiffpatch)\n */\n\n/* global jsondiffpatch */\n\n/**\n * A qooxdoo wrapper for\n * <a href='https://github.com/benjamine/jsondiffpatch' target='_blank'>JsonDiffPatch</a>\n */\n\nqx.Class.define(\"qxapp.wrapper.JsonDiffPatch\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  statics: {\n    NAME: \"jsondiffpatch\",\n    VERSION: \"0.3.11\",\n    URL: \"https://github.com/benjamine/jsondiffpatch\"\n  },\n\n  construct: function() {\n    this.base(arguments);\n  },\n\n  properties: {\n    libReady: {\n      nullable: false,\n      init: false,\n      check: \"Boolean\"\n    }\n  },\n\n  members: {\n    __diffPatcher: null,\n\n    init: function() {\n      // initialize the script loading\n      let jsondiffpatchPath = \"jsondiffpatch/jsondiffpatch.min.js\";\n      let dynLoader = new qx.util.DynamicScriptLoader([\n        jsondiffpatchPath\n      ]);\n\n      dynLoader.addListenerOnce(\"ready\", e => {\n        console.log(jsondiffpatchPath + \" loaded\");\n\n        this.__diffPatcher = jsondiffpatch.create();\n\n        this.setLibReady(true);\n      }, this);\n\n      dynLoader.addListener(\"failed\", e => {\n        let data = e.getData();\n        console.error(\"failed to load \" + data.script);\n      }, this);\n\n      dynLoader.start();\n    },\n\n    diff: function(obj1, obj2) {\n      // https://github.com/benjamine/jsondiffpatch/blob/master/docs/deltas.md\n      let delta = this.__diffPatcher.diff(obj1, obj2);\n      return delta;\n    },\n\n    patch: function(obj, delta) {\n      this.__diffPatcher.patch(obj, delta);\n      return obj;\n    },\n\n    // deep clone\n    clone: function(obj) {\n      return this.__diffPatcher.clone(obj);\n    }\n  }\n});\n"
  ]
}