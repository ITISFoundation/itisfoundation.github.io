{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/dev/fake/Data.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "getFakeServices",
    "key",
    "version",
    "name",
    "description",
    "authors",
    "email",
    "contact",
    "inputs",
    "inNumber",
    "displayOrder",
    "label",
    "defaultValue",
    "outputs",
    "outNumber",
    "inInt",
    "inBool",
    "inStr",
    "inArea",
    "widget",
    "minHeight",
    "inSb",
    "inFile",
    "inImage",
    "outInteger",
    "outBool",
    "outPng",
    "getItemList",
    "nodeKey",
    "portKey",
    "qxapp",
    "dev",
    "fake",
    "neuroman",
    "Data",
    "modeler",
    "materialDB",
    "lf",
    "neuron",
    "stimulationSelectivity",
    "getItem",
    "nodeInstanceUUID",
    "itemUuid"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n *  Collection of free function with fake data for testing\n *\n * TODO: Use faker https://scotch.io/tutorials/generate-fake-data-for-your-javascript-applications-using-faker\n */\n\nqx.Class.define(\"qxapp.dev.fake.Data\", {\n  type: \"static\",\n\n  statics: {\n    getFakeServices: function() {\n      return [{\n        key: \"simcore/services/computational/itis/sleeper\",\n        version: \"0.0.0\",\n        type: \"computational\",\n        name: \"sleeper service\",\n        description: \"dummy sleepr service\",\n        authors: [\n          {\n            name: \"Odei Maiz\",\n            email: \"maiz@itis.ethz.ch\"\n          }\n        ],\n        contact: \"maiz@itis.ethz.ch\",\n        inputs: {\n          inNumber: {\n            displayOrder: 0,\n            label: \"In\",\n            description: \"Chosen Number\",\n            type: \"number\",\n            defaultValue: 42\n          }\n        },\n        outputs: {\n          outNumber: {\n            displayOrder: 0,\n            label: \"Out\",\n            description: \"Chosen Number\",\n            type: \"number\"\n          }\n        }\n      }, {\n        key: \"simcore/services/computational/itis/tutti\",\n        version: \"0.0.0\",\n        type: \"computational\",\n        name: \"a little test node\",\n        description: \"just the bare minimum\",\n        authors: [\n          {\n            name: \"Tobias Oetiker\",\n            email: \"oetiker@itis.ethz.ch\"\n          }\n        ],\n        contact: \"oetiker@itis.ethz.ch\",\n        inputs: {\n          inNumber: {\n            displayOrder: 0,\n            label: \"Number Test\",\n            description: \"Test Input for Number\",\n            type: \"number\",\n            defaultValue: 5.3\n          },\n          inInt: {\n            displayOrder: 1,\n            label: \"Integer Test\",\n            description: \"Test Input for Integer\",\n            type: \"integer\",\n            defaultValue: 2\n          },\n          inBool: {\n            displayOrder: 2,\n            label: \"Boolean Test\",\n            type: \"boolean\",\n            description: \"Test Input for Boolean\",\n            defaultValue: true\n          },\n          inStr: {\n            displayOrder: 3,\n            type: \"string\",\n            label: \"String Test\",\n            description: \"Test Input for String\",\n            defaultValue: \"Gugus\"\n          },\n          inArea: {\n            displayOrder: 4,\n            type: \"string\",\n            label: \"Widget TextArea Test\",\n            description: \"Test Input for String\",\n            defaultValue: \"Gugus\\nDu\\nDa\",\n            widget: {\n              type: \"TextArea\",\n              minHeight: 50\n            }\n          },\n          inSb: {\n            displayOrder: 5,\n            label: \"Widget SelectBox Test\",\n            description: \"Test Input for SelectBox\",\n            defaultValue: \"dog\",\n            type: \"string\",\n            widget: {\n              /*\n              type: \"SelectBox\",\n              structure: [\n                {\n                  key: \"dog\",\n                  label: \"A Dog\"\n                },\n                {\n                  key: \"cat\",\n                  label: \"A Cat\"\n                }\n              ]\n              */\n              type: \"TextArea\",\n              minHeight: 50\n            }\n          },\n          inFile: {\n            displayOrder: 6,\n            label: \"File\",\n            description: \"Test Input File\",\n            type: \"data:*/*\"\n          },\n          inImage: {\n            displayOrder: 7,\n            label: \"Image\",\n            description: \"Test Input Image\",\n            type: \"data:[image/jpeg,image/png]\"\n          }\n        },\n        outputs: {\n          outNumber: {\n            label: \"Number Test\",\n            description: \"Test Output for Number\",\n            displayOrder: 0,\n            type: \"number\"\n          },\n          outInteger: {\n            label: \"Integer Test\",\n            description: \"Test Output for Integer\",\n            displayOrder: 1,\n            type: \"integer\"\n          },\n          outBool: {\n            label: \"Boolean Test\",\n            description: \"Test Output for Boolean\",\n            displayOrder: 2,\n            type: \"boolean\"\n          },\n          outPng: {\n            label: \"Png Test\",\n            description: \"Test Output for PNG Image\",\n            displayOrder: 3,\n            type: \"data:image/png\"\n          }\n        }\n      }];\n    },\n\n    getItemList: function(nodeKey, portKey) {\n      switch (portKey) {\n        case \"defaultNeuromanModels\":\n          return qxapp.dev.fake.neuroman.Data.getItemList(portKey);\n        case \"modeler\":\n          return qxapp.dev.fake.modeler.Data.getItemList();\n        case \"materialDB\":\n          return qxapp.dev.fake.materialDB.Data.getItemList();\n        case \"defaultLFMaterials\":\n        case \"defaultLFBoundaries\":\n        case \"defaultLFSensors\":\n        case \"sensorSettingAPI\":\n          return qxapp.dev.fake.lf.Data.getItemList(portKey);\n        case \"defaultNeurons\":\n        case \"defaultNeuronSources\":\n        case \"defaultNeuronPointProcesses\":\n        case \"defaultNeuronNetworkConnection\":\n        case \"defaultNeuronSensors\":\n        case \"neuronsSetting\":\n          return qxapp.dev.fake.neuron.Data.getItemList(portKey);\n        case \"defaultStimulationSelectivity\":\n          return qxapp.dev.fake.stimulationSelectivity.Data.getItemList();\n      }\n      return [];\n    },\n\n    getItem: function(nodeInstanceUUID, portKey, itemUuid) {\n      switch (portKey) {\n        case \"materialDB\":\n          return qxapp.dev.fake.materialDB.Data.getItem(itemUuid);\n        case \"defaultLFMaterials\":\n        case \"defaultLFBoundaries\":\n        case \"defaultLFSensors\":\n          return qxapp.dev.fake.lf.Data.getItem(portKey, itemUuid);\n        case \"defaultNeurons\":\n        case \"defaultNeuronSources\":\n        case \"defaultNeuronPointProcesses\":\n        case \"defaultNeuronNetworkConnection\":\n        case \"defaultNeuronSensors\":\n          return qxapp.dev.fake.neuron.Data.getItem(portKey, itemUuid);\n      }\n      return {};\n    }\n  } // statics\n\n});\n"
  ]
}