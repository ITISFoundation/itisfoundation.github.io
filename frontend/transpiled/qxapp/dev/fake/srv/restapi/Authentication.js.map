{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/dev/fake/srv/restapi/Authentication.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "REMEMBER",
    "mockData",
    "method",
    "url",
    "response",
    "request",
    "console",
    "log",
    "status",
    "headers",
    "body",
    "login",
    "qxapp",
    "dev",
    "fake",
    "srv",
    "restapi",
    "Authentication",
    "decodeAuthHeader",
    "requestHeaders",
    "userId",
    "checkCredentials",
    "debug",
    "db",
    "User",
    "DUMMYNAMES",
    "token",
    "createToken",
    "respond",
    "lang",
    "Json",
    "stringify",
    "expiration",
    "String",
    "getUserIdFromToken",
    "startsWith",
    "parts",
    "split",
    "pop",
    "findIndex",
    "userName",
    "userIndex",
    "user",
    "getObject",
    "email",
    "username",
    "password",
    "passwordHash",
    "res",
    "header",
    "value",
    "pair",
    "util",
    "Base64",
    "decode",
    "parseLoginParameters",
    "requestBody",
    "vars",
    "i",
    "length",
    "decodeURIComponent",
    "defer",
    "mystatics",
    "core",
    "Environment",
    "get",
    "FakeServer",
    "getInstance",
    "configure"
  ],
  "mappings": "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",
  "sourcesContent": [
    "qx.Class.define(\"qxapp.dev.fake.srv.restapi.Authentication\", {\n  type: \"static\",\n\n  statics: {\n    REMEMBER: false,\n\n    mockData: [{\n      method: \"GET\",\n      url: \"api/v1.0/token\",\n      response: function(request) {\n        console.log(\"Received request:\", request);\n\n        // Defaults unauthorized\n        let status = 401;\n        let headers = {\n          \"Content-Type\": \"application/json\"\n        };\n        let body = null;\n\n        const login = qxapp.dev.fake.srv.restapi.Authentication.decodeAuthHeader(request.requestHeaders);\n\n        const userId = qxapp.dev.fake.srv.restapi.Authentication.checkCredentials(login);\n        if (userId !== null) {\n          console.debug(\"User \", qxapp.dev.fake.srv.db.User.DUMMYNAMES[userId], \"is logging in ...\");\n          status = 200;\n          body = {\n            token: qxapp.dev.fake.srv.restapi.Authentication.createToken(userId)\n          };\n        }\n\n        request.respond(status, headers, qx.lang.Json.stringify(body));\n      }\n    }],\n\n    createToken: function(userId, expiration=24) {\n      return \"this-is-a-dummy-token-that-expires-in-\" + String(expiration) + \"hours-for-\" + String(userId);\n    },\n\n    getUserIdFromToken: function(token) {\n      if (token.startsWith(\"this-is-a-dummy-token-that-expires-in-\")) {\n        let parts = token.split(\"-\");\n        return parts.pop();\n      }\n      return null;\n    },\n\n    checkCredentials: function(login) {\n      let userId = qxapp.dev.fake.srv.db.User.DUMMYNAMES.findIndex(function(userName, userIndex) {\n        const user = qxapp.dev.fake.srv.db.User.getObject(userIndex);\n        return (login.email == user.email || login.email == user.username) && login.password == user.passwordHash;\n      });\n      return userId>=0? userId: null;\n    },\n\n    /**\n     * Gets {email, password} from header\n     * produced by qx.io.request.authentication.Basic\n    */\n    decodeAuthHeader: function(requestHeaders) {\n      let res = {\n        email: null,\n        password: null\n      };\n      let header = requestHeaders[\"Authorization\"];\n\n      // Remove 'Basic $value'\n      let value = header.split(\" \")[1];\n      // parse '$username : $password'\n      let pair = qx.util.Base64.decode(value).split(\":\");\n      res.email = pair[0];\n      res.password = pair[1];\n\n      return res;\n    },\n\n    /**\n     * Parse {email:, password:} object extracting\n     * parameters from body\n     *\n    */\n    parseLoginParameters: function(requestBody) {\n      let res = {\n        email: null,\n        password: null\n      };\n\n      let vars = requestBody.split(\"&\");\n      for (let i = 0; i < vars.length; ++i) {\n        let pair = vars[i].split(\"=\");\n        res[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n      }\n      return res;\n    }\n  },\n\n  defer: function(mystatics) {\n    if (qx.core.Environment.get(\"dev.enableFakeSrv\")) {\n      console.debug(\"REST API Authentication enabled\");\n      qx.dev.FakeServer.getInstance().configure(mystatics.mockData);\n    }\n  }\n\n});\n"
  ]
}