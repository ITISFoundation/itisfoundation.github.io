{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/dev/fake/srv/restapi/User.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "mockData",
    "method",
    "url",
    "response",
    "request",
    "status",
    "headers",
    "parts",
    "util",
    "StringSplit",
    "split",
    "userId",
    "length",
    "data",
    "qxapp",
    "dev",
    "fake",
    "srv",
    "db",
    "User",
    "createMock",
    "body",
    "lang",
    "Json",
    "stringify",
    "respond",
    "users",
    "DUMMYNAMES",
    "i",
    "push",
    "id",
    "username",
    "defer",
    "mystatics",
    "core",
    "Environment",
    "get",
    "console",
    "debug",
    "classname",
    "FakeServer",
    "getInstance",
    "configure",
    "restapi"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;AAAAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,iCAAhB,EAAmD;AACjDC,IAAAA,IAAI,EAAE,QAD2C;AAGjDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE,CAAC;AACTC,QAAAA,MAAM,EAAE,KADC;AAETC,QAAAA,GAAG,EAAE,oBAFI;AAGTC,QAAAA,QAAQ,EAAE,kBAASC,OAAT,EAAkB;AAC1B,cAAIC,MAAM,GAAG,GAAb,CAD0B,CACR;;AAClB,cAAIC,OAAO,GAAG;AACZ,4BAAgB;AADJ,WAAd;AAIA,cAAIC,KAAK,GAAGf,EAAE,CAACgB,IAAH,CAAQC,WAAR,CAAoBC,KAApB,CAA0BN,OAAO,CAACF,GAAlC,EAAuC,GAAvC,CAAZ;AACA,cAAIS,MAAM,GAAGJ,KAAK,CAACA,KAAK,CAACK,MAAN,GAAe,CAAhB,CAAlB;AACA,cAAIC,IAAI,GAAGC,KAAK,CAACC,GAAN,CAAUC,IAAV,CAAeC,GAAf,CAAmBC,EAAnB,CAAsBC,IAAtB,CAA2BC,UAA3B,CAAsCT,MAAtC,CAAX;AACA,cAAIU,IAAI,GAAG7B,EAAE,CAAC8B,IAAH,CAAQC,IAAR,CAAaC,SAAb,CAAuBX,IAAvB,CAAX;AACAT,UAAAA,OAAO,CAACqB,OAAR,CAAgBpB,MAAhB,EAAwBC,OAAxB,EAAiCe,IAAjC,EAV0B,CAW1B;AACD;AAfQ,OAAD,EAgBP;AACDpB,QAAAA,MAAM,EAAE,KADP;AAEDC,QAAAA,GAAG,EAAE,gBAFJ;AAGDC,QAAAA,QAAQ,EAAE,kBAASC,OAAT,EAAkB;AAC1B,cAAIsB,KAAK,GAAGZ,KAAK,CAACC,GAAN,CAAUC,IAAV,CAAeC,GAAf,CAAmBC,EAAnB,CAAsBC,IAAtB,CAA2BQ,UAAvC;AAEA,cAAId,IAAI,GAAG,EAAX;;AACA,eAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACd,MAA1B,EAAkCgB,CAAC,EAAnC,EAAuC;AACrCf,YAAAA,IAAI,CAACgB,IAAL,CAAU;AACRC,cAAAA,EAAE,EAAEF,CADI;AAERG,cAAAA,QAAQ,EAAEL,KAAK,CAACE,CAAD;AAFP,aAAV;AAID;;AACDxB,UAAAA,OAAO,CAACqB,OAAR,CAAgB,GAAhB,EACE;AACE,4BAAgB;AADlB,WADF,EAIEjC,EAAE,CAAC8B,IAAH,CAAQC,IAAR,CAAaC,SAAb,CAAuBX,IAAvB,CAJF;AAKD;AAlBA,OAhBO;AADH,KAHwC;AA0CjDmB,IAAAA,KAAK,EAAE,eAASC,SAAT,EAAoB;AACzB,UAAIzC,EAAE,CAAC0C,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,mBAAxB,CAAJ,EAAkD;AAChDC,QAAAA,OAAO,CAACC,KAAR,CAAc,kBAAd,EAAkC,KAAKC,SAAvC;AACA/C,QAAAA,EAAE,CAACuB,GAAH,CAAOyB,UAAP,CAAkBC,WAAlB,GAAgCC,SAAhC,CAA0CT,SAAS,CAACjC,QAApD;AACD;AACF;AA/CgD,GAAnD;AAAAc,EAAAA,KAAK,CAACC,GAAN,CAAUC,IAAV,CAAeC,GAAf,CAAmB0B,OAAnB,CAA2BxB,IAA3B,CAAgCxB,aAAhC,GAAgDA,aAAhD",
  "sourcesContent": [
    "qx.Class.define(\"qxapp.dev.fake.srv.restapi.User\", {\n  type: \"static\",\n\n  statics: {\n    mockData: [{\n      method: \"GET\",\n      url: \"api/v1.0/user/{id}\",\n      response: function(request) {\n        let status = 200; // OK\n        let headers = {\n          \"Content-Type\": \"application/json\"\n        };\n\n        let parts = qx.util.StringSplit.split(request.url, \"/\");\n        let userId = parts[parts.length - 1];\n        let data = qxapp.dev.fake.srv.db.User.createMock(userId);\n        let body = qx.lang.Json.stringify(data);\n        request.respond(status, headers, body);\n        // FIXME: unite api/v1/uisers\n      }\n    }, {\n      method: \"GET\",\n      url: \"api/v1.0/users\",\n      response: function(request) {\n        let users = qxapp.dev.fake.srv.db.User.DUMMYNAMES;\n\n        let data = [];\n        for (let i = 0; i < users.length; i++) {\n          data.push({\n            id: i,\n            username: users[i]\n          });\n        }\n        request.respond(200,\n          {\n            \"Content-Type\": \"application/json\"\n          },\n          qx.lang.Json.stringify(data));\n      }\n    }]\n  },\n\n  defer: function(mystatics) {\n    if (qx.core.Environment.get(\"dev.enableFakeSrv\")) {\n      console.debug(\"REST API enabled\", this.classname);\n      qx.dev.FakeServer.getInstance().configure(mystatics.mockData);\n    }\n  }\n\n});\n"
  ]
}