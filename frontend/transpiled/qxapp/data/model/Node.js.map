{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/data/model/Node.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "locale",
    "MTranslation",
    "construct",
    "workbench",
    "key",
    "version",
    "uuid",
    "setWorkbench",
    "__metaData",
    "__innerNodes",
    "__inputNodes",
    "__inputsDefault",
    "__outputs",
    "set",
    "nodeId",
    "qxapp",
    "utils",
    "Utils",
    "uuidv4",
    "store",
    "Store",
    "getInstance",
    "metaData",
    "getNodeMetaData",
    "name",
    "setLabel",
    "inputsDefault",
    "__addInputsDefault",
    "inputs",
    "__addInputs",
    "outputs",
    "__addOutputs",
    "dedicatedWidget",
    "setDedicatedWidget",
    "properties",
    "check",
    "nullable",
    "label",
    "init",
    "event",
    "propsWidget",
    "inputAccess",
    "inputsMapper",
    "parentNodeId",
    "isOutputNode",
    "serviceUrl",
    "iFrame",
    "restartIFrameButton",
    "retrieveIFrameButton",
    "progress",
    "thumbnail",
    "interactiveStatus",
    "events",
    "statics",
    "isDynamic",
    "type",
    "isComputational",
    "isRealService",
    "includes",
    "members",
    "__settingsForm",
    "__inputsDefaultWidget",
    "__outputWidget",
    "__posX",
    "__posY",
    "isInKey",
    "str",
    "getMetaData",
    "getKey",
    "hasDedicatedWidget",
    "getDedicatedWidget",
    "showDedicatedWidget",
    "isContainer",
    "hasKey",
    "hasChildren",
    "data",
    "model",
    "Node",
    "getInputValues",
    "isPropertyInitialized",
    "getPropsWidget",
    "getValues",
    "getInputsDefault",
    "getInput",
    "outputId",
    "__inputs",
    "getInputs",
    "getOutput",
    "getOutputs",
    "getOutputValues",
    "output",
    "value",
    "innerNodes",
    "getInnerNodes",
    "keys",
    "length",
    "recursive",
    "assign",
    "innerNodeId",
    "myInnerNodes",
    "addInnerNode",
    "innerNode",
    "setParentNodeId",
    "getNodeId",
    "removeInnerNode",
    "isInnerNode",
    "inputNodeId",
    "getExposedInnerNodes",
    "exposedInnerNodes",
    "getIsOutputNode",
    "getInputNodes",
    "populateNodeData",
    "nodeData",
    "setInputData",
    "setOutputData",
    "inputNodes",
    "setInputNodes",
    "outputNode",
    "setIsOutputNode",
    "position",
    "setPosition",
    "x",
    "y",
    "setProgress",
    "setThumbnail",
    "populatePortsData",
    "giveUniqueName",
    "getLabel",
    "__giveUniqueName",
    "suffix",
    "newLabel",
    "allModels",
    "getWorkbench",
    "getNodes",
    "nodes",
    "values",
    "node",
    "localeCompare",
    "repopulateOutputPortData",
    "getInputsDefaultWidget",
    "__addInputsDefaultWidgets",
    "isInputModel",
    "component",
    "widget",
    "NodePorts",
    "__removeNonSettingInputs",
    "filteredInputs",
    "JSON",
    "parse",
    "stringify",
    "inputId",
    "input",
    "__addMapper",
    "mapper",
    "InputsMapper",
    "setInputsMapper",
    "__addSettings",
    "form",
    "Auto",
    "addListener",
    "e",
    "changedField",
    "getData",
    "linkAdded",
    "linkRemoved",
    "renderer",
    "PropForm",
    "setPropsWidget",
    "removeLink",
    "portId",
    "__retrieveInputs",
    "getOutputWidget",
    "__addOutputWidget",
    "setData",
    "setAccessLevel",
    "setInputAccess",
    "outputKey",
    "edgeAdded",
    "edge",
    "inputNode",
    "getNode",
    "getInputNodeId",
    "i",
    "addInputNode",
    "createAutomaticPortConns",
    "node1",
    "node2",
    "console",
    "log",
    "outPorts",
    "inPorts",
    "outPort",
    "inPort",
    "arePortsCompatible",
    "addPortLink",
    "toPortId",
    "fromNodeId",
    "fromPortId",
    "addLink",
    "push",
    "removeInputNode",
    "index",
    "indexOf",
    "splice",
    "prototype",
    "hasOwnProperty",
    "call",
    "isInputNode",
    "renameNode",
    "Permissions",
    "canDo",
    "restartIFrame",
    "loadThis",
    "getIFrame",
    "setIFrame",
    "PersistentIframe",
    "resetSource",
    "setSource",
    "getServiceUrl",
    "srvUrl",
    "arg",
    "window",
    "addEventListener",
    "id",
    "imgData",
    "img",
    "document",
    "createElement",
    "src",
    "outerHTML",
    "__showLoadingIFrame",
    "loadingUri",
    "getLoaderUri",
    "portKey",
    "fireDataEvent",
    "retrieveInputs",
    "urlUpdate",
    "replace",
    "updReq",
    "io",
    "request",
    "Xhr",
    "reqData",
    "url",
    "method",
    "requestData",
    "util",
    "Serializer",
    "toJson",
    "getTarget",
    "getResponse",
    "retrievedPortData",
    "error",
    "send",
    "retrievingPortData",
    "startInteractiveNode",
    "retrieveBtn",
    "ui",
    "toolbar",
    "Button",
    "tr",
    "setEnabled",
    "setRetrieveIFrameButton",
    "restartBtn",
    "setRestartIFrameButton",
    "__startService",
    "msg",
    "msgData",
    "setInteractiveStatus",
    "prjId",
    "getStudy",
    "getUuid",
    "query",
    "encodeURIComponent",
    "ApiRequest",
    "__onInteractiveNodeStarted",
    "errorMsg",
    "errorMsgData",
    "failMsg",
    "failMsgData",
    "__onNodeState",
    "req",
    "serviceState",
    "interval",
    "Timer",
    "once",
    "__nodeState",
    "servicePath",
    "entryPointD",
    "entryPoint",
    "__serviceReadyIn",
    "getVersion",
    "setServiceUrl",
    "getRetrieveIFrameButton",
    "getRestartIFrameButton",
    "waitFor",
    "ev",
    "removeNode",
    "stopInteractiveService",
    "getParentNodeId",
    "parentNode",
    "removeIFrame",
    "destroy",
    "getPosition",
    "serialize",
    "saveContainers",
    "savePosition",
    "nodeEntry",
    "getInputAccess",
    "parent",
    "getProgress",
    "getThumbnail",
    "filteredNodeEntry"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;AAsBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,uBAAhB,EAAyC;AACvCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADuB;AAEvCC,IAAAA,OAAO,EAAET,EAAE,CAACU,MAAH,CAAUC,YAFoB;;AAIvC;;;;;;AAMAC,IAAAA,SAAS,EAAE,mBAASC,SAAT,EAAoBC,GAApB,EAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;AACjD,WAAKC,YAAL,CAAkBJ,SAAlB;AAEA;AAEA,WAAKK,UAAL,GAAkB,EAAlB;AACA,WAAKC,YAAL,GAAoB,EAApB;AACA,WAAKC,YAAL,GAAoB,EAApB;AACA,WAAKC,eAAL,GAAuB,EAAvB;AACA,WAAKC,SAAL,GAAiB,EAAjB;AAEA,WAAKC,GAAL,CAAS;AACPC,QAAAA,MAAM,EAAER,IAAI,IAAIS,KAAK,CAACC,KAAN,CAAYC,KAAZ,CAAkBC,MAAlB,EADT;AAEPd,QAAAA,GAAG,EAAHA,GAFO;AAGPC,QAAAA,OAAO,EAAPA;AAHO,OAAT;AAMA,UAAIc,KAAK,GAAGJ,KAAK,CAACI,KAAN,CAAYC,KAAZ,CAAkBC,WAAlB,EAAZ;AACA,UAAIC,QAAQ,GAAG,KAAKd,UAAL,GAAkBW,KAAK,CAACI,eAAN,CAAsBnB,GAAtB,EAA2BC,OAA3B,CAAjC;;AACA,UAAIiB,QAAJ,EAAc;AACZ,YAAIA,QAAQ,CAACE,IAAb,EAAmB;AACjB,eAAKC,QAAL,CAAcH,QAAQ,CAACE,IAAvB;AACD;;AACD,YAAIF,QAAQ,CAACI,aAAb,EAA4B;AAC1B,eAAKC,kBAAL,CAAwBL,QAAQ,CAACI,aAAjC;AACD;;AACD,YAAIJ,QAAQ,CAACM,MAAb,EAAqB;AACnB,eAAKC,WAAL,CAAiBP,QAAQ,CAACM,MAA1B;AACD;;AACD,YAAIN,QAAQ,CAACQ,OAAb,EAAsB;AACpB,eAAKC,YAAL,CAAkBT,QAAQ,CAACQ,OAA3B;AACD;;AACD,YAAIR,QAAQ,CAACU,eAAb,EAA8B;AAC5B,eAAKC,kBAAL,CAAwBX,QAAQ,CAACU,eAAjC;AACD;AACF;AACF,KA9CsC;AAgDvCE,IAAAA,UAAU,EAAE;AACV/B,MAAAA,SAAS,EAAE;AACTgC,QAAAA,KAAK,EAAE,4BADE;AAETC,QAAAA,QAAQ,EAAE;AAFD,OADD;AAMVhC,MAAAA,GAAG,EAAE;AACH+B,QAAAA,KAAK,EAAE,QADJ;AAEHC,QAAAA,QAAQ,EAAE;AAFP,OANK;AAWV/B,MAAAA,OAAO,EAAE;AACP8B,QAAAA,KAAK,EAAE,QADA;AAEPC,QAAAA,QAAQ,EAAE;AAFH,OAXC;AAgBVtB,MAAAA,MAAM,EAAE;AACNqB,QAAAA,KAAK,EAAE,QADD;AAENC,QAAAA,QAAQ,EAAE;AAFJ,OAhBE;AAqBVC,MAAAA,KAAK,EAAE;AACLF,QAAAA,KAAK,EAAE,QADF;AAELG,QAAAA,IAAI,EAAE,MAFD;AAGLF,QAAAA,QAAQ,EAAE,IAHL;AAILG,QAAAA,KAAK,EAAE;AAJF,OArBG;AA4BVC,MAAAA,WAAW,EAAE;AACXL,QAAAA,KAAK,EAAE,wCADI;AAEXG,QAAAA,IAAI,EAAE,IAFK;AAGXF,QAAAA,QAAQ,EAAE;AAHC,OA5BH;AAkCVK,MAAAA,WAAW,EAAE;AACXN,QAAAA,KAAK,EAAE,QADI;AAEXC,QAAAA,QAAQ,EAAE;AAFC,OAlCH;AAuCVM,MAAAA,YAAY,EAAE;AACZP,QAAAA,KAAK,EAAE,mBADK;AAEZG,QAAAA,IAAI,EAAE,IAFM;AAGZF,QAAAA,QAAQ,EAAE;AAHE,OAvCJ;AA6CVO,MAAAA,YAAY,EAAE;AACZR,QAAAA,KAAK,EAAE,QADK;AAEZC,QAAAA,QAAQ,EAAE;AAFE,OA7CJ;AAkDVJ,MAAAA,eAAe,EAAE;AACfG,QAAAA,KAAK,EAAE,SADQ;AAEfG,QAAAA,IAAI,EAAE,IAFS;AAGfF,QAAAA,QAAQ,EAAE;AAHK,OAlDP;AAwDVQ,MAAAA,YAAY,EAAE;AACZT,QAAAA,KAAK,EAAE,SADK;AAEZG,QAAAA,IAAI,EAAE,KAFM;AAGZF,QAAAA,QAAQ,EAAE;AAHE,OAxDJ;AA8DVS,MAAAA,UAAU,EAAE;AACVV,QAAAA,KAAK,EAAE,QADG;AAEVC,QAAAA,QAAQ,EAAE,IAFA;AAGVG,QAAAA,KAAK,EAAE;AAHG,OA9DF;AAoEVO,MAAAA,MAAM,EAAE;AACNX,QAAAA,KAAK,EAAE,yCADD;AAENG,QAAAA,IAAI,EAAE,IAFA;AAGNF,QAAAA,QAAQ,EAAE;AAHJ,OApEE;AA0EVW,MAAAA,mBAAmB,EAAE;AACnBZ,QAAAA,KAAK,EAAE,mBADY;AAEnBG,QAAAA,IAAI,EAAE;AAFa,OA1EX;AA+EVU,MAAAA,oBAAoB,EAAE;AACpBb,QAAAA,KAAK,EAAE,mBADa;AAEpBG,QAAAA,IAAI,EAAE;AAFc,OA/EZ;AAoFVW,MAAAA,QAAQ,EAAE;AACRd,QAAAA,KAAK,EAAE,QADC;AAERG,QAAAA,IAAI,EAAE,CAFE;AAGRC,QAAAA,KAAK,EAAE;AAHC,OApFA;AA0FVW,MAAAA,SAAS,EAAE;AACTf,QAAAA,KAAK,EAAE,QADE;AAETC,QAAAA,QAAQ,EAAE,IAFD;AAGTE,QAAAA,IAAI,EAAE;AAHG,OA1FD;AAgGVa,MAAAA,iBAAiB,EAAE;AACjBhB,QAAAA,KAAK,EAAE,QADU;AAEjBC,QAAAA,QAAQ,EAAE,IAFO;AAGjBG,QAAAA,KAAK,EAAE;AAHU;AAhGT,KAhD2B;AAuJvCa,IAAAA,MAAM,EAAE;AACN,wBAAkB,oBADZ;AAEN,sBAAgB;AAFV,KAvJ+B;AA4JvCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,mBAAShC,QAAT,EAAmB;AAC5B,eAAQA,QAAQ,IAAIA,QAAQ,CAACiC,IAArB,IAA6BjC,QAAQ,CAACiC,IAAT,KAAkB,SAAvD;AACD,OAHM;AAKPC,MAAAA,eAAe,EAAE,yBAASlC,QAAT,EAAmB;AAClC,eAAQA,QAAQ,IAAIA,QAAQ,CAACiC,IAArB,IAA6BjC,QAAQ,CAACiC,IAAT,KAAkB,eAAvD;AACD,OAPM;AASPE,MAAAA,aAAa,EAAE,uBAASnC,QAAT,EAAmB;AAChC,eAAQA,QAAQ,IAAIA,QAAQ,CAACiC,IAArB,KAA8BjC,QAAQ,CAAClB,GAAT,CAAasD,QAAb,CAAsB,0BAAtB,KAAqDpC,QAAQ,CAAClB,GAAT,CAAasD,QAAb,CAAsB,uBAAtB,CAAnF,CAAR;AACD;AAXM,KA5J8B;AA0KvCC,IAAAA,OAAO,EAAE;AACPnD,MAAAA,UAAU,EAAE,IADL;AAEPC,MAAAA,YAAY,EAAE,IAFP;AAGPC,MAAAA,YAAY,EAAE,IAHP;AAIPkD,MAAAA,cAAc,EAAE,IAJT;AAKPjD,MAAAA,eAAe,EAAE,IALV;AAMPkD,MAAAA,qBAAqB,EAAE,IANhB;AAOPjD,MAAAA,SAAS,EAAE,IAPJ;AAQPkD,MAAAA,cAAc,EAAE,IART;AASPC,MAAAA,MAAM,EAAE,IATD;AAUPC,MAAAA,MAAM,EAAE,IAVD;AAYPC,MAAAA,OAAO,EAAE,iBAASC,GAAT,EAAc;AACrB,YAAI,KAAKC,WAAL,OAAuB,IAA3B,EAAiC;AAC/B,iBAAO,KAAP;AACD;;AACD,YAAI,KAAKC,MAAL,OAAkB,IAAtB,EAA4B;AAC1B,iBAAO,KAAP;AACD;;AACD,eAAO,KAAKA,MAAL,GAAcV,QAAd,CAAuBQ,GAAvB,CAAP;AACD,OApBM;AAsBPG,MAAAA,kBAAkB,EAAE,8BAAW;AAC7B,YAAI,KAAKC,kBAAL,OAA8B,IAAlC,EAAwC;AACtC,iBAAO,KAAP;AACD;;AACD,eAAO,IAAP;AACD,OA3BM;AA6BPC,MAAAA,mBAAmB,EAAE,+BAAW;AAC9B,YAAI,KAAKF,kBAAL,EAAJ,EAA+B;AAC7B,iBAAO,KAAKC,kBAAL,EAAP;AACD;;AACD,eAAO,KAAP;AACD,OAlCM;AAoCPE,MAAAA,WAAW,EAAE,uBAAW;AACtB,YAAMC,MAAM,GAAI,KAAKL,MAAL,OAAkB,IAAlC;AACA,YAAMM,WAAW,GAAG,KAAKA,WAAL,EAApB;AACA,eAAOD,MAAM,IAAIC,WAAjB;AACD,OAxCM;AA0CPpB,MAAAA,SAAS,EAAE,qBAAW;AACpB,eAAOvC,KAAK,CAAC4D,IAAN,CAAWC,KAAX,CAAiBC,IAAjB,CAAsBvB,SAAtB,CAAgC,KAAKa,WAAL,EAAhC,CAAP;AACD,OA5CM;AA8CPX,MAAAA,eAAe,EAAE,2BAAW;AAC1B,eAAOzC,KAAK,CAAC4D,IAAN,CAAWC,KAAX,CAAiBC,IAAjB,CAAsBrB,eAAtB,CAAsC,KAAKW,WAAL,EAAtC,CAAP;AACD,OAhDM;AAkDPV,MAAAA,aAAa,EAAE,yBAAW;AACxB,eAAO1C,KAAK,CAAC4D,IAAN,CAAWC,KAAX,CAAiBC,IAAjB,CAAsBpB,aAAtB,CAAoC,KAAKU,WAAL,EAApC,CAAP;AACD,OApDM;AAsDPA,MAAAA,WAAW,EAAE,uBAAW;AACtB,eAAO,KAAK3D,UAAZ;AACD,OAxDM;AA0DPsE,MAAAA,cAAc,EAAE,0BAAW;AACzB,YAAI,KAAKC,qBAAL,CAA2B,aAA3B,KAA6C,KAAKC,cAAL,EAAjD,EAAwE;AACtE,iBAAO,KAAKA,cAAL,GAAsBC,SAAtB,EAAP;AACD;;AACD,eAAO,EAAP;AACD,OA/DM;AAiEPC,MAAAA,gBAAgB,EAAE,4BAAW;AAC3B,eAAO,KAAKvE,eAAZ;AACD,OAnEM;AAqEPwE,MAAAA,QAAQ,EAAE,kBAASC,QAAT,EAAmB;AAC3B,eAAO,KAAKC,QAAL,CAAcD,QAAd,CAAP;AACD,OAvEM;AAyEPE,MAAAA,SAAS,EAAE,qBAAW;AACpB,eAAO,KAAKD,QAAZ;AACD,OA3EM;AA6EPE,MAAAA,SAAS,EAAE,mBAASH,QAAT,EAAmB;AAC5B,eAAO,KAAKxE,SAAL,CAAewE,QAAf,CAAP;AACD,OA/EM;AAiFPI,MAAAA,UAAU,EAAE,sBAAW;AACrB,eAAO,KAAK5E,SAAZ;AACD,OAnFM;AAqFP6E,MAAAA,eAAe,EAAE,2BAAW;AAC1B,YAAIC,MAAM,GAAG,EAAb;;AACA,aAAK,IAAMN,QAAX,IAAuB,KAAKxE,SAA5B,EAAuC;AACrC,cAAI,KAAKA,SAAL,CAAewE,QAAf,EAAyBO,KAA7B,EAAoC;AAClCD,YAAAA,MAAM,CAACN,QAAD,CAAN,GAAmB,KAAKxE,SAAL,CAAewE,QAAf,EAAyBO,KAA5C;AACD;AACF;;AACD,eAAOD,MAAP;AACD,OA7FM;AA+FPhB,MAAAA,WAAW,EAAE,uBAAW;AACtB,YAAMkB,UAAU,GAAG,KAAKC,aAAL,EAAnB;;AACA,YAAID,UAAJ,EAAgB;AACd,iBAAO9F,MAAM,CAACgG,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,GAAiC,CAAxC;AACD;;AACD,eAAO,KAAP;AACD,OArGM;AAuGPF,MAAAA,aAAa,EAAE,yBAA4B;AAAA,YAAnBG,SAAmB,uEAAP,KAAO;AACzC,YAAIJ,UAAU,GAAG9F,MAAM,CAACmG,MAAP,CAAc,EAAd,EAAkB,KAAKxF,YAAvB,CAAjB;;AACA,YAAIuF,SAAJ,EAAe;AACb,eAAK,IAAME,WAAX,IAA0B,KAAKzF,YAA/B,EAA6C;AAC3C,gBAAI0F,YAAY,GAAG,KAAK1F,YAAL,CAAkByF,WAAlB,EAA+BL,aAA/B,CAA6C,IAA7C,CAAnB;;AACAD,YAAAA,UAAU,GAAG9F,MAAM,CAACmG,MAAP,CAAcL,UAAd,EAA0BO,YAA1B,CAAb;AACD;AACF;;AACD,eAAOP,UAAP;AACD,OAhHM;AAkHPQ,MAAAA,YAAY,EAAE,sBAASF,WAAT,EAAsBG,SAAtB,EAAiC;AAC7C,aAAK5F,YAAL,CAAkByF,WAAlB,IAAiCG,SAAjC;AACAA,QAAAA,SAAS,CAACC,eAAV,CAA0B,KAAKC,SAAL,EAA1B;AACD,OArHM;AAuHPC,MAAAA,eAAe,EAAE,yBAASN,WAAT,EAAsB;AACrC,eAAO,KAAKzF,YAAL,CAAkByF,WAAlB,CAAP;AACD,OAzHM;AA2HPO,MAAAA,WAAW,EAAE,qBAASC,WAAT,EAAsB;AACjC,eAAQA,WAAW,IAAI,KAAKjG,YAA5B;AACD,OA7HM;AA+HPkG,MAAAA,oBAAoB,EAAE,gCAA4B;AAAA,YAAnBX,SAAmB,uEAAP,KAAO;AAChD,YAAMJ,UAAU,GAAG,KAAKC,aAAL,CAAmBG,SAAnB,CAAnB;AACA,YAAIY,iBAAiB,GAAG,EAAxB;;AACA,aAAK,IAAMV,WAAX,IAA0BN,UAA1B,EAAsC;AACpC,cAAMS,SAAS,GAAGT,UAAU,CAACM,WAAD,CAA5B;;AACA,cAAIG,SAAS,CAACQ,eAAV,EAAJ,EAAiC;AAC/BD,YAAAA,iBAAiB,CAACV,WAAD,CAAjB,GAAiCG,SAAjC;AACD;AACF;;AACD,eAAOO,iBAAP;AACD,OAzIM;AA2IPE,MAAAA,aAAa,EAAE,yBAAW;AACxB,eAAO,KAAKpG,YAAZ;AACD,OA7IM;AA+IPqG,MAAAA,gBAAgB,EAAE,0BAASC,QAAT,EAAmB;AACnC,YAAIA,QAAJ,EAAc;AACZ,cAAIA,QAAQ,CAAC3E,KAAb,EAAoB;AAClB,iBAAKZ,QAAL,CAAcuF,QAAQ,CAAC3E,KAAvB;AACD;;AAED,eAAK4E,YAAL,CAAkBD,QAAlB;AACA,eAAKE,aAAL,CAAmBF,QAAnB;;AAEA,cAAIA,QAAQ,CAACG,UAAb,EAAyB;AACvB,iBAAKC,aAAL,CAAmBJ,QAAnB;AACD;;AAED,cAAIA,QAAQ,CAACK,UAAb,EAAyB;AACvB,iBAAKC,eAAL,CAAqBN,QAAQ,CAACK,UAA9B;AACD;;AAED,cAAIL,QAAQ,CAACO,QAAb,EAAuB;AACrB,iBAAKC,WAAL,CAAiBR,QAAQ,CAACO,QAAT,CAAkBE,CAAnC,EAAsCT,QAAQ,CAACO,QAAT,CAAkBG,CAAxD;AACD;;AAED,cAAIV,QAAQ,CAAC/D,QAAb,EAAuB;AACrB,iBAAK0E,WAAL,CAAiBX,QAAQ,CAAC/D,QAA1B;AACD;;AAED,cAAI+D,QAAQ,CAAC9D,SAAb,EAAwB;AACtB,iBAAK0E,YAAL,CAAkBZ,QAAQ,CAAC9D,SAA3B;AACD;AACF;;AAED,YAAI,KAAKW,qBAAT,EAAgC;AAC9B,eAAKA,qBAAL,CAA2BgE,iBAA3B;AACD;;AACD,YAAI,KAAK/D,cAAT,EAAyB;AACvB,eAAKA,cAAL,CAAoB+D,iBAApB;AACD;AACF,OAnLM;AAqLPC,MAAAA,cAAc,EAAE,0BAAW;AACzB,YAAMzF,KAAK,GAAG,KAAK0F,QAAL,EAAd;;AACA,aAAKC,gBAAL,CAAsB3F,KAAtB,EAA6B,CAA7B;AACD,OAxLM;AA0LP2F,MAAAA,gBAAgB,EAAE,0BAAS3F,KAAT,EAAgB4F,MAAhB,EAAwB;AACxC,YAAMC,QAAQ,GAAG7F,KAAK,GAAG,GAAR,GAAc4F,MAA/B;AACA,YAAME,SAAS,GAAG,KAAKC,YAAL,GAAoBC,QAApB,CAA6B,IAA7B,CAAlB;AACA,YAAMC,KAAK,GAAGxI,MAAM,CAACyI,MAAP,CAAcJ,SAAd,CAAd;;AACA,kCAAmBG,KAAnB,4BAA0B;AAArB,cAAME,IAAI,aAAV;;AACH,cAAIA,IAAI,CAACjC,SAAL,OAAqB,KAAKA,SAAL,EAArB,IACAiC,IAAI,CAACT,QAAL,GAAgBU,aAAhB,CAA8B,KAAKV,QAAL,EAA9B,MAAmD,CADvD,EAC0D;AACxD,iBAAKtG,QAAL,CAAcyG,QAAd;;AACA,iBAAKF,gBAAL,CAAsB3F,KAAtB,EAA6B4F,MAAM,GAAC,CAApC;AACD;AACF;AACF,OArMM;AAuMPS,MAAAA,wBAAwB,EAAE,oCAAW;AACnC,YAAI,KAAK5E,cAAT,EAAyB;AACvB,eAAKA,cAAL,CAAoB+D,iBAApB;AACD;AACF,OA3MM;AA6MPc,MAAAA,sBAAsB,EAAE,kCAAW;AACjC,eAAO,KAAK9E,qBAAZ;AACD,OA/MM;AAiNP+E,MAAAA,yBAAyB,EAAE,qCAAW;AACpC,YAAMC,YAAY,GAAG,KAArB;AACA,aAAKhF,qBAAL,GAA6B,IAAI9C,KAAK,CAAC+H,SAAN,CAAgBC,MAAhB,CAAuBC,SAA3B,CAAqC,IAArC,EAA2CH,YAA3C,CAA7B;AACD,OApNM;;AAsNP;;;;;AAKAI,MAAAA,wBAAwB,EAAE,kCAASrH,MAAT,EAAiB;AACzC,YAAIsH,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezH,MAAf,CAAX,CAArB;;AACA,aAAK,IAAM0H,OAAX,IAAsBJ,cAAtB,EAAsC;AACpC,cAAIK,KAAK,GAAGL,cAAc,CAACI,OAAD,CAA1B;;AACA,cAAIC,KAAK,CAAChG,IAAN,CAAWG,QAAX,CAAoB,2BAApB,CAAJ,EAAsD;AACpD,mBAAOwF,cAAc,CAACI,OAAD,CAArB;AACD;AACF;;AACD,eAAOJ,cAAP;AACD,OApOM;;AAuOP;;;;AAIAM,MAAAA,WAAW,EAAE,qBAAS5H,MAAT,EAAiB;AAC5B,YAAIsH,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezH,MAAf,CAAX,CAArB;;AACA,YAAIsH,cAAc,CAACO,MAAnB,EAA2B;AACzB,cAAI/G,YAAY,GAAG,IAAI3B,KAAK,CAAC+H,SAAN,CAAgBC,MAAhB,CAAuBW,YAA3B,CAAwC,IAAxC,EAA8CR,cAAc,CAAC,QAAD,CAA5D,CAAnB;AACA,eAAKS,eAAL,CAAqBjH,YAArB;AACA,iBAAOwG,cAAc,CAAC,QAAD,CAArB;AACD;;AACD,eAAOA,cAAP;AACD,OAnPM;;AAqPP;;;;AAIAU,MAAAA,aAAa,EAAE,uBAAShI,MAAT,EAAiB;AAAA;;AAC9B,YAAMiI,IAAI,GAAG,KAAKjG,cAAL,GAAsB,IAAI7C,KAAK,CAAC+H,SAAN,CAAgBe,IAAhB,CAAqBC,IAAzB,CAA8BlI,MAA9B,EAAsC,IAAtC,CAAnC;AACAiI,QAAAA,IAAI,CAACE,WAAL,CAAiB,WAAjB,EAA8B,UAAAC,CAAC,EAAI;AACjC,cAAMC,YAAY,GAAGD,CAAC,CAACE,OAAF,EAArB;;AACA,UAAA,KAAI,CAAClF,cAAL,GAAsBmF,SAAtB,CAAgCF,YAAhC;AACD,SAHD,EAGG,IAHH;AAIAJ,QAAAA,IAAI,CAACE,WAAL,CAAiB,aAAjB,EAAgC,UAAAC,CAAC,EAAI;AACnC,cAAMC,YAAY,GAAGD,CAAC,CAACE,OAAF,EAArB;;AACA,UAAA,KAAI,CAAClF,cAAL,GAAsBoF,WAAtB,CAAkCH,YAAlC;AACD,SAHD,EAGG,IAHH;AAKA,YAAMzH,WAAW,GAAG,IAAIzB,KAAK,CAAC+H,SAAN,CAAgBe,IAAhB,CAAqBQ,QAArB,CAA8BC,QAAlC,CAA2CT,IAA3C,EAAiD,KAAKzB,YAAL,EAAjD,EAAsE,IAAtE,CAApB;AACA,aAAKmC,cAAL,CAAoB/H,WAApB;AACAA,QAAAA,WAAW,CAACuH,WAAZ,CAAwB,YAAxB,EAAsC,UAAAC,CAAC,EAAI;AACzC,cAAMC,YAAY,GAAGD,CAAC,CAACE,OAAF,EAArB;;AACA,UAAA,KAAI,CAACtG,cAAL,CAAoB4G,UAApB,CAA+BP,YAA/B;AACD,SAHD,EAGG,IAHH;AAIAzH,QAAAA,WAAW,CAACuH,WAAZ,CAAwB,mBAAxB,EAA6C,UAAAC,CAAC,EAAI;AAChD,cAAMS,MAAM,GAAGT,CAAC,CAACE,OAAF,EAAf;;AACA,UAAA,KAAI,CAACQ,gBAAL,CAAsBD,MAAtB;AACD,SAHD,EAGG,IAHH;AAID,OA9QM;AAgRPE,MAAAA,eAAe,EAAE,2BAAW;AAC1B,eAAO,KAAK7G,cAAZ;AACD,OAlRM;AAoRP8G,MAAAA,iBAAiB,EAAE,6BAAW;AAC5B,YAAM/B,YAAY,GAAG,IAArB;AACA,aAAK/E,cAAL,GAAsB,IAAI/C,KAAK,CAAC+H,SAAN,CAAgBC,MAAhB,CAAuBC,SAA3B,CAAqC,IAArC,EAA2CH,YAA3C,CAAtB;AACD,OAvRM;AAyRPlH,MAAAA,kBAAkB,EAAE,4BAASD,aAAT,EAAwB;AAC1C,aAAKf,eAAL,GAAuBe,aAAvB;;AAEA,aAAKkH,yBAAL;AACD,OA7RM;AA+RP/G,MAAAA,WAAW,EAAE,qBAASD,MAAT,EAAiB;AAC5B,aAAKyD,QAAL,GAAgBzD,MAAhB;;AAEA,YAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB;AACD;;AAED,YAAIsH,cAAc,GAAG,KAAKD,wBAAL,CAA8BrH,MAA9B,CAArB;;AACAsH,QAAAA,cAAc,GAAG,KAAKM,WAAL,CAAiBN,cAAjB,CAAjB;;AACA,aAAKU,aAAL,CAAmBV,cAAnB;AACD,OAzSM;AA2SPnH,MAAAA,YAAY,EAAE,sBAASD,OAAT,EAAkB;AAC9B,aAAKlB,SAAL,GAAiBkB,OAAjB;;AAEA,aAAK8I,iBAAL;AACD,OA/SM;AAiTP3D,MAAAA,YAAY,EAAE,sBAASD,QAAT,EAAmB;AAC/B,YAAI,KAAKpD,cAAL,IAAuBoD,QAA3B,EAAqC;AACnC,eAAKpD,cAAL,CAAoBiH,OAApB,CAA4B7D,QAAQ,CAACpF,MAArC;;AACA,cAAI,iBAAiBoF,QAArB,EAA+B;AAC7B,iBAAKpD,cAAL,CAAoBkH,cAApB,CAAmC9D,QAAQ,CAACvE,WAA5C;;AACA,iBAAKsI,cAAL,CAAoB/D,QAAQ,CAACvE,WAA7B;AACD;AACF;AACF,OAzTM;AA2TPyE,MAAAA,aAAa,EAAE,uBAASF,QAAT,EAAmB;AAChC,YAAIA,QAAQ,CAAClF,OAAb,EAAsB;AACpB,eAAK,IAAMkJ,SAAX,IAAwBhE,QAAQ,CAAClF,OAAjC,EAA0C;AACxC,iBAAKlB,SAAL,CAAeoK,SAAf,EAA0BrF,KAA1B,GAAkCqB,QAAQ,CAAClF,OAAT,CAAiBkJ,SAAjB,CAAlC;AACD;AACF;AACF,OAjUM;AAmUP;AACAC,MAAAA,SAAS,EAAE,mBAASC,IAAT,EAAe;AACxB,YAAI,KAAKjH,OAAL,CAAa,YAAb,CAAJ,EAAgC;AAC9B,cAAMkH,SAAS,GAAG,KAAK/C,YAAL,GAAoBgD,OAApB,CAA4BF,IAAI,CAACG,cAAL,EAA5B,CAAlB;AACA,cAAMzF,UAAU,GAAG9F,MAAM,CAACyI,MAAP,CAAc,KAAK1C,aAAL,EAAd,CAAnB;;AACA,eAAK,IAAIyF,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC1F,UAAU,CAACG,MAA3B,EAAmCuF,CAAC,EAApC,EAAwC;AACtC,gBAAMjF,SAAS,GAAGT,UAAU,CAAC0F,CAAD,CAA5B;;AACA,gBAAIjF,SAAS,CAACkF,YAAV,CAAuBJ,SAAS,CAAC5E,SAAV,EAAvB,CAAJ,EAAmD;AACjD,mBAAKiF,wBAAL,CAA8BL,SAA9B,EAAyC9E,SAAzC;AACD;AACF;;AACD,eAAKqE,gBAAL;AACD;AACF,OAhVM;AAkVPc,MAAAA,wBAAwB,EAAE,kCAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAC/C;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCH,KAAxC,EAA+CC,KAA/C;AACA,YAAMG,QAAQ,GAAGJ,KAAK,CAACjG,UAAN,EAAjB;AACA,YAAMsG,OAAO,GAAGJ,KAAK,CAACpG,SAAN,EAAhB;;AACA,aAAK,IAAMyG,OAAX,IAAsBF,QAAtB,EAAgC;AAC9B,eAAK,IAAMG,MAAX,IAAqBF,OAArB,EAA8B;AAC5B,gBAAI/K,KAAK,CAACI,KAAN,CAAYC,KAAZ,CAAkBC,WAAlB,GAAgC4K,kBAAhC,CAAmDJ,QAAQ,CAACE,OAAD,CAA3D,EAAsED,OAAO,CAACE,MAAD,CAA7E,CAAJ,EAA4F;AAC1F,kBAAIN,KAAK,CAACQ,WAAN,CAAkBF,MAAlB,EAA0BP,KAAK,CAAClF,SAAN,EAA1B,EAA6CwF,OAA7C,CAAJ,EAA2D;AACzD;AACD;AACF;AACF;AACF;AACF,OAhWM;AAkWPG,MAAAA,WAAW,EAAE,qBAASC,QAAT,EAAmBC,UAAnB,EAA+BC,UAA/B,EAA2C;AACtD,eAAO,KAAKzI,cAAL,CAAoB0I,OAApB,CAA4BH,QAA5B,EAAsCC,UAAtC,EAAkDC,UAAlD,CAAP;AACD,OApWM;AAsWPd,MAAAA,YAAY,EAAE,sBAAS7E,WAAT,EAAsB;AAClC,YAAI,CAAC,KAAKhG,YAAL,CAAkBgD,QAAlB,CAA2BgD,WAA3B,CAAL,EAA8C;AAC5C,eAAKhG,YAAL,CAAkB6L,IAAlB,CAAuB7F,WAAvB;;AACA,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OA5WM;AA8WPU,MAAAA,aAAa,EAAE,uBAASJ,QAAT,EAAmB;AAChC,YAAIA,QAAQ,CAACG,UAAb,EAAyB;AACvB,eAAK,IAAImE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACtE,QAAQ,CAACG,UAAT,CAAoBpB,MAApC,EAA4CuF,CAAC,EAA7C,EAAiD;AAC/C,iBAAKC,YAAL,CAAkBvE,QAAQ,CAACG,UAAT,CAAoBmE,CAApB,CAAlB;AACD;AACF;AACF,OApXM;AAsXPkB,MAAAA,eAAe,EAAE,yBAAS9F,WAAT,EAAsB;AACrC,YAAM+F,KAAK,GAAG,KAAK/L,YAAL,CAAkBgM,OAAlB,CAA0BhG,WAA1B,CAAd;;AACA,YAAI+F,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd;AACA,eAAK/L,YAAL,CAAkBiM,MAAlB,CAAyBF,KAAzB,EAAgC,CAAhC,EAFc,CAId;;;AACA,cAAI7K,MAAM,GAAG,KAAKkD,cAAL,EAAb;;AACA,eAAK,IAAM2F,MAAX,IAAqB7I,MAArB,EAA6B;AAC3B,gBAAIA,MAAM,CAAC6I,MAAD,CAAN,IAAkB3K,MAAM,CAAC8M,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqClL,MAAM,CAAC6I,MAAD,CAA3C,EAAqD,UAArD,CAAtB,EAAwF;AACtF,kBAAI7I,MAAM,CAAC6I,MAAD,CAAN,CAAe,UAAf,MAA+B/D,WAAnC,EAAgD;AAC9C,qBAAK9C,cAAL,CAAoB4G,UAApB,CAA+BC,MAA/B;AACD;AACF;AACF;;AACD,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OAxYM;AA0YPsC,MAAAA,WAAW,EAAE,qBAASrG,WAAT,EAAsB;AACjC,YAAM+F,KAAK,GAAG,KAAK/L,YAAL,CAAkBgM,OAAlB,CAA0BhG,WAA1B,CAAd;;AACA,eAAQ+F,KAAK,GAAG,CAAC,CAAjB;AACD,OA7YM;AA+YPO,MAAAA,UAAU,EAAE,oBAAS9E,QAAT,EAAmB;AAC7B,YAAI,CAACnH,KAAK,CAAC4D,IAAN,CAAWsI,WAAX,CAAuB5L,WAAvB,GAAqC6L,KAArC,CAA2C,mBAA3C,EAAgE,IAAhE,CAAL,EAA4E;AAC1E,iBAAO,KAAP;AACD;;AACD,aAAKzL,QAAL,CAAcyG,QAAd;AACA,eAAO,IAAP;AACD,OArZM;AAuZPiF,MAAAA,aAAa,EAAE,uBAASC,QAAT,EAAmB;AAAA;;AAChC,YAAI,KAAKC,SAAL,OAAqB,IAAzB,EAA+B;AAC7B,eAAKC,SAAL,CAAe,IAAIvM,KAAK,CAAC+H,SAAN,CAAgBC,MAAhB,CAAuBwE,gBAA3B,EAAf;AACD;;AACD,YAAIH,QAAJ,EAAc;AACZ,eAAKC,SAAL,GAAiBG,WAAjB;AACA,eAAKH,SAAL,GAAiBI,SAAjB,CAA2BL,QAA3B;AACD,SAHD,MAGO,IAAI,KAAKM,aAAL,OAAyB,IAA7B,EAAmC;AACxC,eAAKL,SAAL,GAAiBG,WAAjB;;AACA,cAAI,KAAKpJ,MAAL,GAAcV,QAAd,CAAuB,WAAvB,CAAJ,EAAyC;AACvC;AACA;AACA,gBAAMiK,MAAM,GAAG,KAAKD,aAAL,EAAf;AACA,gBAAIE,GAAG,GAAG,kBAAV;;AACA,gBAAID,MAAM,CAACA,MAAM,CAAC5H,MAAP,GAAc,CAAf,CAAN,KAA4B,GAAhC,EAAqC;AACnC6H,cAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AACD,iBAAKP,SAAL,GAAiBI,SAAjB,CAA2BE,MAAM,GAAGC,GAApC;AACD,WATD,MASO;AACL,iBAAKP,SAAL,GAAiBI,SAAjB,CAA2B,KAAKC,aAAL,EAA3B;AACD;;AAED,cAAI,KAAKtJ,MAAL,GAAcV,QAAd,CAAuB,YAAvB,CAAJ,EAA0C;AACxC;AACAmK,YAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAAA9D,CAAC,EAAI;AAAA,4BAIlCA,CAAC,CAACrF,IAJgC;AAAA,kBAEpCoJ,EAFoC,WAEpCA,EAFoC;AAAA,kBAGpCC,OAHoC,WAGpCA,OAHoC;;AAKtC,kBAAIA,OAAO,IAAID,EAAE,KAAK,WAAtB,EAAmC;AACjC,oBAAME,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;AACAF,gBAAAA,GAAG,CAACG,GAAJ,GAAUJ,OAAV;;AACA,gBAAA,MAAI,CAACpG,YAAL,CAAkBqG,GAAG,CAACI,SAAtB;AACD;AACF,aAVD,EAUG,KAVH;AAWD;AACF;AACF,OA5bM;AA8bPC,MAAAA,mBAAmB,EAAE,+BAAW;AAC9B,YAAMC,UAAU,GAAGxN,KAAK,CAACC,KAAN,CAAYC,KAAZ,CAAkBuN,YAAlB,EAAnB;AACA,aAAKrB,aAAL,CAAmBoB,UAAnB;AACD,OAjcM;AAmcP7D,MAAAA,gBAAgB,EAAE,0BAAS+D,OAAT,EAAkB;AAClC,YAAM9J,IAAI,GAAG;AACX6D,UAAAA,IAAI,EAAE,IADK;AAEXiG,UAAAA,OAAO,EAAPA;AAFW,SAAb;AAIA,aAAKC,aAAL,CAAmB,gBAAnB,EAAqC/J,IAArC;AACD,OAzcM;AA2cPgK,MAAAA,cAAc,EAAE,0BAAyB;AAAA;;AAAA,YAAhBF,OAAgB,uEAAN,IAAM;;AACvC,YAAI,KAAKnL,SAAL,MAAoB,KAAKG,aAAL,EAAxB,EAA8C;AAC5C,cAAI,CAAC1C,KAAK,CAAC4D,IAAN,CAAWsI,WAAX,CAAuB5L,WAAvB,GAAqC6L,KAArC,CAA2C,cAA3C,CAAL,EAAiE;AAC/D;AACD;;AACD,cAAMS,MAAM,GAAG,KAAKD,aAAL,EAAf;;AACA,cAAIC,MAAJ,EAAY;AACV,gBAAIiB,SAAS,GAAGjB,MAAM,GAAG,WAAzB;AACAiB,YAAAA,SAAS,GAAGA,SAAS,CAACC,OAAV,CAAkB,YAAlB,EAAgC,WAAhC,CAAZ;AACA,gBAAMC,MAAM,GAAG,IAAIxP,EAAE,CAACyP,EAAH,CAAMC,OAAN,CAAcC,GAAlB,EAAf;AACA,gBAAMC,OAAO,GAAG;AACd,2BAAaT,OAAO,GAAG,CAACA,OAAD,CAAH,GAAe;AADrB,aAAhB;AAGAK,YAAAA,MAAM,CAACjO,GAAP,CAAW;AACTsO,cAAAA,GAAG,EAAEP,SADI;AAETQ,cAAAA,MAAM,EAAE,MAFC;AAGTC,cAAAA,WAAW,EAAE/P,EAAE,CAACgQ,IAAH,CAAQC,UAAR,CAAmBC,MAAnB,CAA0BN,OAA1B;AAHJ,aAAX;AAKAJ,YAAAA,MAAM,CAAC/E,WAAP,CAAmB,SAAnB,EAA8B,UAAAC,CAAC,EAAI;AAAA,0CAG7BA,CAAC,CAACyF,SAAF,GAAcC,WAAd,EAH6B;AAAA,kBAE/B/K,IAF+B,yBAE/BA,IAF+B;;AAIjC,cAAA,MAAI,CAACK,cAAL,GAAsB2K,iBAAtB,CAAwClB,OAAxC,EAAiD,IAAjD;;AACA9C,cAAAA,OAAO,CAACC,GAAR,CAAYjH,IAAZ;AACD,aAND,EAMG,IANH;AAOAmK,YAAAA,MAAM,CAAC/E,WAAP,CAAmB,MAAnB,EAA2B,UAAAC,CAAC,EAAI;AAAA,2CAG1BA,CAAC,CAACyF,SAAF,GAAcC,WAAd,EAH0B;AAAA,kBAE5BE,KAF4B,0BAE5BA,KAF4B;;AAI9B,cAAA,MAAI,CAAC5K,cAAL,GAAsB2K,iBAAtB,CAAwClB,OAAxC,EAAiD,KAAjD;;AACA9C,cAAAA,OAAO,CAACiE,KAAR,CAAc,MAAd,EAAsBA,KAAtB;AACD,aAND,EAMG,IANH;AAOAd,YAAAA,MAAM,CAAC/E,WAAP,CAAmB,OAAnB,EAA4B,UAAAC,CAAC,EAAI;AAAA,2CAG3BA,CAAC,CAACyF,SAAF,GAAcC,WAAd,EAH2B;AAAA,kBAE7BE,KAF6B,0BAE7BA,KAF6B;;AAI/B,cAAA,MAAI,CAAC5K,cAAL,GAAsB2K,iBAAtB,CAAwClB,OAAxC,EAAiD,KAAjD;;AACA9C,cAAAA,OAAO,CAACiE,KAAR,CAAc,OAAd,EAAuBA,KAAvB;AACD,aAND,EAMG,IANH;AAOAd,YAAAA,MAAM,CAACe,IAAP;AAEA,iBAAK7K,cAAL,GAAsB8K,kBAAtB,CAAyCrB,OAAzC;AACD;AACF;AACF,OAvfM;AAyfPsB,MAAAA,oBAAoB,EAAE,gCAAW;AAAA;;AAC/B,YAAI,KAAKzM,SAAL,MAAoB,KAAKG,aAAL,EAAxB,EAA8C;AAC5C,cAAMuM,WAAW,GAAG,IAAI1Q,EAAE,CAAC2Q,EAAH,CAAMC,OAAN,CAAcC,MAAlB,CAAyB,KAAKC,EAAL,CAAQ,UAAR,CAAzB,EAA8C,+BAA9C,CAApB;AACAJ,UAAAA,WAAW,CAACjG,WAAZ,CAAwB,SAAxB,EAAmC,UAAAC,CAAC,EAAI;AACtC,YAAA,MAAI,CAACU,gBAAL;AACD,WAFD,EAEG,IAFH;AAGAsF,UAAAA,WAAW,CAACK,UAAZ,CAAuB,KAAvB;AACA,eAAKC,uBAAL,CAA6BN,WAA7B;AAEA,cAAMO,UAAU,GAAG,IAAIjR,EAAE,CAAC2Q,EAAH,CAAMC,OAAN,CAAcC,MAAlB,CAAyB,KAAKC,EAAL,CAAQ,SAAR,CAAzB,EAA6C,gCAA7C,CAAnB;AACAG,UAAAA,UAAU,CAACxG,WAAX,CAAuB,SAAvB,EAAkC,UAAAC,CAAC,EAAI;AACrC,YAAA,MAAI,CAACmD,aAAL;AACD,WAFD,EAEG,IAFH;AAGAoD,UAAAA,UAAU,CAACF,UAAX,CAAsB,KAAtB;AACA,eAAKG,sBAAL,CAA4BD,UAA5B;;AAEA,eAAKjC,mBAAL;;AAEA,eAAKmC,cAAL;AACD;AACF,OA7gBM;AA+gBPA,MAAAA,cAAc,EAAE,0BAAW;AAAA;;AACzB,YAAMnP,QAAQ,GAAG,KAAK6C,WAAL,EAAjB;AAEA,YAAMuM,GAAG,GAAG,cAAcpP,QAAQ,CAAClB,GAAvB,GAA6B,GAA7B,GAAmCkB,QAAQ,CAACjB,OAA5C,GAAsD,KAAlE;AACA,YAAMsQ,OAAO,GAAG;AACd7P,UAAAA,MAAM,EAAE,KAAKyF,SAAL,EADM;AAEdmK,UAAAA,GAAG,EAAEA;AAFS,SAAhB;AAIA,aAAKhC,aAAL,CAAmB,cAAnB,EAAmCiC,OAAnC;AAEA,aAAKhJ,WAAL,CAAiB,CAAjB;AACA,aAAKiJ,oBAAL,CAA0B,UAA1B;AAEA,YAAMC,KAAK,GAAG,KAAKzI,YAAL,GAAoB0I,QAApB,GACXC,OADW,EAAd,CAbyB,CAezB;;AACA,YAAM5B,GAAG,GAAG,+BAAZ;AACA,YAAI6B,KAAK,GAAG,iBAAiBC,kBAAkB,CAACJ,KAAD,CAA/C;AACAG,QAAAA,KAAK,IAAI,mBAAmBC,kBAAkB,CAAC,KAAK1K,SAAL,EAAD,CAA9C;;AACA,YAAIjF,QAAQ,CAAClB,GAAT,CAAasD,QAAb,CAAsB,WAAtB,CAAJ,EAAwC;AACtC;AACAsN,UAAAA,KAAK,IAAI,kBAAkBC,kBAAkB,CAAC,4CAAD,CAA7C;AACAD,UAAAA,KAAK,IAAI,kBAAkBC,kBAAkB,CAAC,OAAD,CAA7C;AACD,SAJD,MAIO;AACLD,UAAAA,KAAK,IAAI,kBAAkBC,kBAAkB,CAAC3P,QAAQ,CAAClB,GAAV,CAA7C;AACA4Q,UAAAA,KAAK,IAAI,kBAAkBC,kBAAkB,CAAC3P,QAAQ,CAACjB,OAAV,CAA7C;AACD;;AACD,YAAI2O,OAAO,GAAG,IAAIjO,KAAK,CAACgO,EAAN,CAASC,OAAT,CAAiBkC,UAArB,CAAgC/B,GAAG,GAAC6B,KAApC,EAA2C,MAA3C,CAAd;AACAhC,QAAAA,OAAO,CAACjF,WAAR,CAAoB,SAApB,EAA+B,KAAKoH,0BAApC,EAAgE,IAAhE;AACAnC,QAAAA,OAAO,CAACjF,WAAR,CAAoB,OAApB,EAA6B,UAAAC,CAAC,EAAI;AAChC,cAAMoH,QAAQ,GAAG,yBAAyB9P,QAAQ,CAAClB,GAAlC,GAAwC,GAAxC,GAA8CkB,QAAQ,CAACjB,OAAvD,GAAiE,IAAjE,GAAwE2J,CAAC,CAACyF,SAAF,GAAcC,WAAd,GAA4B,OAA5B,CAAzF;AACA,cAAM2B,YAAY,GAAG;AACnBvQ,YAAAA,MAAM,EAAE,MAAI,CAACyF,SAAL,EADW;AAEnBmK,YAAAA,GAAG,EAAEU;AAFc,WAArB;;AAIA,UAAA,MAAI,CAAC1C,aAAL,CAAmB,cAAnB,EAAmC2C,YAAnC;;AACA,UAAA,MAAI,CAACT,oBAAL,CAA0B,QAA1B;AACD,SARD,EAQG,IARH;AASA5B,QAAAA,OAAO,CAACjF,WAAR,CAAoB,MAApB,EAA4B,UAAAC,CAAC,EAAI;AAC/B,cAAMsH,OAAO,GAAG,qBAAqBhQ,QAAQ,CAAClB,GAA9B,GAAoC,GAApC,GAA0CkB,QAAQ,CAACjB,OAAnD,GAA6D,IAA7D,GAAoE2J,CAAC,CAACyF,SAAF,GAAcC,WAAd,GAA4B,OAA5B,CAApF;AACA,cAAM6B,WAAW,GAAG;AAClBzQ,YAAAA,MAAM,EAAE,MAAI,CAACyF,SAAL,EADU;AAElBmK,YAAAA,GAAG,EAAEY;AAFa,WAApB;;AAIA,UAAA,MAAI,CAACV,oBAAL,CAA0B,QAA1B;;AACA,UAAA,MAAI,CAAClC,aAAL,CAAmB,cAAnB,EAAmC6C,WAAnC;AACD,SARD,EAQG,IARH;AASAvC,QAAAA,OAAO,CAACa,IAAR;AACD,OA/jBM;AAgkBP2B,MAAAA,aAAa,EAAE,uBAASxH,CAAT,EAAY;AAAA;;AACzB,YAAIyH,GAAG,GAAGzH,CAAC,CAACyF,SAAF,EAAV;;AADyB,+BAIrBgC,GAAG,CAAC/B,WAAJ,EAJqB;AAAA,YAGvB/K,IAHuB,oBAGvBA,IAHuB;AAAA,YAGjBiL,KAHiB,oBAGjBA,KAHiB;;AAMzB,YAAIA,KAAJ,EAAW;AACT,cAAMc,GAAG,GAAG,qBAAqBd,KAAjC;AACA,cAAMe,OAAO,GAAG;AACd7P,YAAAA,MAAM,EAAE,KAAKyF,SAAL,EADM;AAEdmK,YAAAA,GAAG,EAAEA;AAFS,WAAhB;AAIA,eAAKE,oBAAL,CAA0B,QAA1B;AACA,eAAKlC,aAAL,CAAmB,cAAnB,EAAmCiC,OAAnC;AACA;AACD;;AAED,YAAMe,YAAY,GAAG/M,IAAI,CAAC,eAAD,CAAzB;;AACA,gBAAQ+M,YAAR;AACE,eAAK,UAAL;AACA,eAAK,SAAL;AAAgB;AACd,mBAAKd,oBAAL,CAA0B,UAA1B;AACA,kBAAMe,QAAQ,GAAG,IAAjB;AACArS,cAAAA,EAAE,CAACiD,KAAH,CAASqP,KAAT,CAAeC,IAAf,CAAoB;AAAA,uBAAM,MAAI,CAACC,WAAL,EAAN;AAAA,eAApB,EAA8C,IAA9C,EAAoDH,QAApD;AACA;AACD;;AACD,eAAK,SAAL;AAAgB;AACd,mBAAKf,oBAAL,CAA0B,SAA1B;AACA,kBAAMe,SAAQ,GAAG,KAAjB;AACArS,cAAAA,EAAE,CAACiD,KAAH,CAASqP,KAAT,CAAeC,IAAf,CAAoB;AAAA,uBAAM,MAAI,CAACC,WAAL,EAAN;AAAA,eAApB,EAA8C,IAA9C,EAAoDH,SAApD;AACA;AACD;;AACD,eAAK,SAAL;AAAgB;AACd;AACA,kBAAMI,WAAW,GAACpN,IAAI,CAAC,kBAAD,CAAtB;AACA,kBAAMqN,WAAW,GAAGrN,IAAI,CAAC,aAAD,CAAxB;AACA,kBAAM7D,MAAM,GAAG6D,IAAI,CAAC,cAAD,CAAnB;;AACA,kBAAI7D,MAAM,KAAK,KAAKyF,SAAL,EAAf,EAAiC;AAC/B;AACD;;AACD,kBAAIwL,WAAJ,EAAiB;AACf,oBAAME,UAAU,GAAGD,WAAW,GAAI,MAAMA,WAAV,GAAyB,GAAvD;AACA,oBAAIrE,MAAM,GAAGoE,WAAW,GAAGE,UAA3B,CAFe,CAGf;AACA;AACA;AACA;;AAEA,qBAAKC,gBAAL,CAAsBvE,MAAtB;AACD;;AACD;AACD;;AACD,eAAK,UAAL;AACE;;AACF,eAAK,QAAL;AAAe;AACb,mBAAKiD,oBAAL,CAA0B,QAA1B;;AACA,kBAAMF,IAAG,GAAG,qBAAqB/L,IAAI,CAAC,iBAAD,CAArC;;AACA,kBAAMgM,QAAO,GAAG;AACd7P,gBAAAA,MAAM,EAAE,KAAKyF,SAAL,EADM;AAEdmK,gBAAAA,GAAG,EAAEA;AAFS,eAAhB;AAIA,mBAAKhC,aAAL,CAAmB,cAAnB,EAAmCiC,QAAnC;AACA;AACD;;AAED;AACE;AAhDJ;AAkDD,OApoBM;AAqoBPmB,MAAAA,WAAW,EAAE,uBAAW;AAAA;;AACtB,YAAM3C,GAAG,GAAG,mCAAmC8B,kBAAkB,CAAC,KAAK1K,SAAL,EAAD,CAAjE;AACA,YAAIyI,OAAO,GAAG,IAAIjO,KAAK,CAACgO,EAAN,CAASC,OAAT,CAAiBkC,UAArB,CAAgC/B,GAAhC,EAAqC,KAArC,CAAd;AACAH,QAAAA,OAAO,CAACjF,WAAR,CAAoB,SAApB,EAA+B,KAAKyH,aAApC,EAAmD,IAAnD;AACAxC,QAAAA,OAAO,CAACjF,WAAR,CAAoB,OAApB,EAA6B,UAAAC,CAAC,EAAI;AAChC,cAAMoH,QAAQ,GAAG,yBAAyB,MAAI,CAAChN,MAAL,EAAzB,GAAyC,GAAzC,GAA+C,MAAI,CAAC+N,UAAL,EAA/C,GAAmE,IAAnE,GAA0EnI,CAAC,CAACyF,SAAF,GAAcC,WAAd,GAA4B,OAA5B,CAA3F;AACA,cAAM2B,YAAY,GAAG;AACnBvQ,YAAAA,MAAM,EAAE,MAAI,CAACyF,SAAL,EADW;AAEnBmK,YAAAA,GAAG,EAAEU;AAFc,WAArB;;AAIA,UAAA,MAAI,CAAC1C,aAAL,CAAmB,cAAnB,EAAmC2C,YAAnC;AACD,SAPD,EAOG,IAPH;AAQArC,QAAAA,OAAO,CAACjF,WAAR,CAAoB,MAApB,EAA4B,UAAAC,CAAC,EAAI;AAC/B,cAAMsH,OAAO,GAAG,qBAAqB,MAAI,CAAClN,MAAL,EAArB,GAAqC,GAArC,GAA2C,MAAI,CAAC+N,UAAL,EAA3C,GAA+D,IAA/D,GAAsEnI,CAAC,CAACyF,SAAF,GAAcC,WAAd,GAA4B,OAA5B,CAAtF;AACA,cAAM6B,WAAW,GAAG;AAClBzQ,YAAAA,MAAM,EAAE,MAAI,CAACyF,SAAL,EADU;AAElBmK,YAAAA,GAAG,EAAEY;AAFa,WAApB;;AAIA,UAAA,MAAI,CAAC5C,aAAL,CAAmB,cAAnB,EAAmC6C,WAAnC;AACD,SAPD,EAOG,IAPH;AAQAvC,QAAAA,OAAO,CAACa,IAAR;AACD,OA1pBM;AA2pBPsB,MAAAA,0BAA0B,EAAE,oCAASnH,CAAT,EAAY;AACtC,YAAIyH,GAAG,GAAGzH,CAAC,CAACyF,SAAF,EAAV;;AADsC,gCAIlCgC,GAAG,CAAC/B,WAAJ,EAJkC;AAAA,YAGpCE,KAHoC,qBAGpCA,KAHoC;;AAMtC,YAAIA,KAAJ,EAAW;AACT,cAAMc,GAAG,GAAG,qBAAqBd,KAAjC;AACA,cAAMe,OAAO,GAAG;AACd7P,YAAAA,MAAM,EAAE,KAAKyF,SAAL,EADM;AAEdmK,YAAAA,GAAG,EAAEA;AAFS,WAAhB;AAIA,eAAKhC,aAAL,CAAmB,cAAnB,EAAmCiC,OAAnC;AACA;AACD;;AAED,aAAKmB,WAAL;AACD,OA5qBM;AA8qBPI,MAAAA,gBAAgB,EAAE,0BAASvE,MAAT,EAAiB;AAAA;;AACjC,aAAKyE,aAAL,CAAmBzE,MAAnB;AACA,aAAKiD,oBAAL,CAA0B,OAA1B;AACA,YAAMF,GAAG,GAAG,sBAAsB/C,MAAlC;AACA,YAAMgD,OAAO,GAAG;AACd7P,UAAAA,MAAM,EAAE,KAAKyF,SAAL,EADM;AAEdmK,UAAAA,GAAG,EAAEA;AAFS,SAAhB;AAIA,aAAKhC,aAAL,CAAmB,cAAnB,EAAmCiC,OAAnC;AAEA,aAAK0B,uBAAL,GAA+BhC,UAA/B,CAA0C,IAA1C;AACA,aAAKiC,sBAAL,GAA8BjC,UAA9B,CAAyC,IAAzC;AACA,aAAK1I,WAAL,CAAiB,GAAjB,EAZiC,CAcjC;;AACA,YAAM4K,OAAO,GAAG,IAAhB;AACAjT,QAAAA,EAAE,CAACiD,KAAH,CAASqP,KAAT,CAAeC,IAAf,CAAoB,UAAAW,EAAE,EAAI;AACxB,UAAA,MAAI,CAACrF,aAAL;AACD,SAFD,EAEG,IAFH,EAESoF,OAFT;;AAIA,aAAK7H,gBAAL;AACD,OAnsBM;AAqsBP+H,MAAAA,UAAU,EAAE,sBAAW;AACrB,aAAKC,sBAAL;AACA,YAAM9M,UAAU,GAAG9F,MAAM,CAACyI,MAAP,CAAc,KAAK1C,aAAL,EAAd,CAAnB;;AACA,wCAAwBD,UAAxB,mCAAoC;AAA/B,cAAMS,SAAS,mBAAf;AACHA,UAAAA,SAAS,CAACoM,UAAV;AACD;;AACD,YAAM9P,YAAY,GAAG,KAAKgQ,eAAL,EAArB;;AACA,YAAIhQ,YAAJ,EAAkB;AAChB,cAAIiQ,UAAU,GAAG,KAAKxK,YAAL,GAAoBgD,OAApB,CAA4BzI,YAA5B,CAAjB;AACAiQ,UAAAA,UAAU,CAACpM,eAAX,CAA2B,KAAKD,SAAL,EAA3B;AACD;AACF,OAhtBM;AAktBPsM,MAAAA,YAAY,EAAE,wBAAW;AACvB,YAAI/P,MAAM,GAAG,KAAKuK,SAAL,EAAb;;AACA,YAAIvK,MAAJ,EAAY;AACVA,UAAAA,MAAM,CAACgQ,OAAP;AACA,eAAKxF,SAAL,CAAe,IAAf;AACD;AACF,OAxtBM;AA0tBPoF,MAAAA,sBAAsB,EAAE,kCAAW;AACjC,YAAI,KAAKpP,SAAL,MAAoB,KAAKG,aAAL,EAAxB,EAA8C;AAC5C,cAAMtC,KAAK,GAAGJ,KAAK,CAACI,KAAN,CAAYC,KAAZ,CAAkBC,WAAlB,EAAd;AACAF,UAAAA,KAAK,CAACuR,sBAAN,CAA6B,KAAKnM,SAAL,EAA7B;AACA,eAAKsM,YAAL;AACD;AACF,OAhuBM;AAkuBPrL,MAAAA,WAAW,EAAE,qBAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,aAAK3D,MAAL,GAAc0D,CAAd;AACA,aAAKzD,MAAL,GAAc0D,CAAd;AACD,OAruBM;AAuuBPqL,MAAAA,WAAW,EAAE,uBAAW;AACtB,eAAO;AACLtL,UAAAA,CAAC,EAAE,KAAK1D,MADH;AAEL2D,UAAAA,CAAC,EAAE,KAAK1D;AAFH,SAAP;AAID,OA5uBM;AA8uBPgP,MAAAA,SAAS,EAAE,mBAASC,cAAT,EAAyBC,YAAzB,EAAuC;AAChD,YAAI,CAACD,cAAD,IAAmB,KAAKzO,WAAL,EAAvB,EAA2C;AACzC,iBAAO,IAAP;AACD,SAH+C,CAKhD;;;AACA,YAAI2O,SAAS,GAAG;AACd/S,UAAAA,GAAG,EAAE,KAAKgE,MAAL,EADS;AAEd/D,UAAAA,OAAO,EAAE,KAAK8R,UAAL,EAFK;AAGd9P,UAAAA,KAAK,EAAE,KAAK0F,QAAL,EAHO;AAIdnG,UAAAA,MAAM,EAAE,KAAKkD,cAAL,EAJM;AAKdrC,UAAAA,WAAW,EAAE,KAAK2Q,cAAL,EALC;AAMdjM,UAAAA,UAAU,EAAE,KAAKL,aAAL,EANE;AAOdO,UAAAA,UAAU,EAAE,KAAKR,eAAL,EAPE;AAQd/E,UAAAA,OAAO,EAAE,KAAK2D,eAAL,EARK;AASd4N,UAAAA,MAAM,EAAE,KAAKV,eAAL,EATM;AAUd1P,UAAAA,QAAQ,EAAE,KAAKqQ,WAAL,EAVI;AAWdpQ,UAAAA,SAAS,EAAE,KAAKqQ,YAAL;AAXG,SAAhB;;AAcA,YAAIL,YAAJ,EAAkB;AAChBC,UAAAA,SAAS,CAAC5L,QAAV,GAAqB;AACnBE,YAAAA,CAAC,EAAE,KAAKsL,WAAL,GAAmBtL,CADH;AAEnBC,YAAAA,CAAC,EAAE,KAAKqL,WAAL,GAAmBrL;AAFH,WAArB;AAID,SAzB+C,CA0BhD;;;AACA,YAAI8L,iBAAiB,GAAG,EAAxB;;AACA,aAAK,IAAMpT,GAAX,IAAkB+S,SAAlB,EAA6B;AAC3B,cAAIA,SAAS,CAAC/S,GAAD,CAAT,KAAmB,IAAvB,EAA6B;AAC3BoT,YAAAA,iBAAiB,CAACpT,GAAD,CAAjB,GAAyB+S,SAAS,CAAC/S,GAAD,CAAlC;AACD;AACF;;AAED,eAAOoT,iBAAP;AACD;AAjxBM;AA1K8B,GAAzC;AAvCAzS,EAAAA,KAAK,CAAC4D,IAAN,CAAWC,KAAX,CAAiBC,IAAjB,CAAsBpF,aAAtB,GAAsCA,aAAtC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Class that stores Node data.\n *\n *   For the given version-key, this class will take care of pulling the metadata, store it and\n * fill in all the information.\n *\n *                                    -> {EDGES}\n * STUDY -> METADATA + WORKBENCH ->|\n *                                    -> {LINKS}\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let node = new qxapp.data.model.Node(this, key, version, uuid);\n *   node.populateNodeData(nodeData);\n *   node.giveUniqueName();\n *   node.startInteractiveNode();\n * </pre>\n */\n\nqx.Class.define(\"qxapp.data.model.Node\", {\n  extend: qx.core.Object,\n  include: qx.locale.MTranslation,\n\n  /**\n    * @param workbench {qxapp.data.model.Workbench} workbench owning the widget the node\n    * @param key {String} key of the service represented by the node\n    * @param version {String} version of the service represented by the node\n    * @param uuid {String} uuid of the service represented by the node (not needed for new Nodes)\n  */\n  construct: function(workbench, key, version, uuid) {\n    this.setWorkbench(workbench);\n\n    this.base(arguments);\n\n    this.__metaData = {};\n    this.__innerNodes = {};\n    this.__inputNodes = [];\n    this.__inputsDefault = {};\n    this.__outputs = {};\n\n    this.set({\n      nodeId: uuid || qxapp.utils.Utils.uuidv4(),\n      key,\n      version\n    });\n\n    let store = qxapp.store.Store.getInstance();\n    let metaData = this.__metaData = store.getNodeMetaData(key, version);\n    if (metaData) {\n      if (metaData.name) {\n        this.setLabel(metaData.name);\n      }\n      if (metaData.inputsDefault) {\n        this.__addInputsDefault(metaData.inputsDefault);\n      }\n      if (metaData.inputs) {\n        this.__addInputs(metaData.inputs);\n      }\n      if (metaData.outputs) {\n        this.__addOutputs(metaData.outputs);\n      }\n      if (metaData.dedicatedWidget) {\n        this.setDedicatedWidget(metaData.dedicatedWidget);\n      }\n    }\n  },\n\n  properties: {\n    workbench: {\n      check: \"qxapp.data.model.Workbench\",\n      nullable: false\n    },\n\n    key: {\n      check: \"String\",\n      nullable: true\n    },\n\n    version: {\n      check: \"String\",\n      nullable: true\n    },\n\n    nodeId: {\n      check: \"String\",\n      nullable: false\n    },\n\n    label: {\n      check: \"String\",\n      init: \"Node\",\n      nullable: true,\n      event: \"changeLabel\"\n    },\n\n    propsWidget: {\n      check: \"qxapp.component.form.renderer.PropForm\",\n      init: null,\n      nullable: true\n    },\n\n    inputAccess: {\n      check: \"Object\",\n      nullable: true\n    },\n\n    inputsMapper: {\n      check: \"qx.ui.core.Widget\",\n      init: null,\n      nullable: true\n    },\n\n    parentNodeId: {\n      check: \"String\",\n      nullable: true\n    },\n\n    dedicatedWidget: {\n      check: \"Boolean\",\n      init: null,\n      nullable: true\n    },\n\n    isOutputNode: {\n      check: \"Boolean\",\n      init: false,\n      nullable: false\n    },\n\n    serviceUrl: {\n      check: \"String\",\n      nullable: true,\n      event: \"changeServiceUrl\"\n    },\n\n    iFrame: {\n      check: \"qxapp.component.widget.PersistentIframe\",\n      init: null,\n      nullable: true\n    },\n\n    restartIFrameButton: {\n      check: \"qx.ui.form.Button\",\n      init: null\n    },\n\n    retrieveIFrameButton: {\n      check: \"qx.ui.form.Button\",\n      init: null\n    },\n\n    progress: {\n      check: \"Number\",\n      init: 0,\n      event: \"changeProgress\"\n    },\n\n    thumbnail: {\n      check: \"String\",\n      nullable: true,\n      init: \"\"\n    },\n\n    interactiveStatus: {\n      check: \"String\",\n      nullable: true,\n      event: \"changeInteractiveStatus\"\n    }\n  },\n\n  events: {\n    \"retrieveInputs\": \"qx.event.type.Data\",\n    \"showInLogger\": \"qx.event.type.Data\"\n  },\n\n  statics: {\n    isDynamic: function(metaData) {\n      return (metaData && metaData.type && metaData.type === \"dynamic\");\n    },\n\n    isComputational: function(metaData) {\n      return (metaData && metaData.type && metaData.type === \"computational\");\n    },\n\n    isRealService: function(metaData) {\n      return (metaData && metaData.type && (metaData.key.includes(\"simcore/services/dynamic\") || metaData.key.includes(\"simcore/services/comp\")));\n    }\n  },\n\n  members: {\n    __metaData: null,\n    __innerNodes: null,\n    __inputNodes: null,\n    __settingsForm: null,\n    __inputsDefault: null,\n    __inputsDefaultWidget: null,\n    __outputs: null,\n    __outputWidget: null,\n    __posX: null,\n    __posY: null,\n\n    isInKey: function(str) {\n      if (this.getMetaData() === null) {\n        return false;\n      }\n      if (this.getKey() === null) {\n        return false;\n      }\n      return this.getKey().includes(str);\n    },\n\n    hasDedicatedWidget: function() {\n      if (this.getDedicatedWidget() === null) {\n        return false;\n      }\n      return true;\n    },\n\n    showDedicatedWidget: function() {\n      if (this.hasDedicatedWidget()) {\n        return this.getDedicatedWidget();\n      }\n      return false;\n    },\n\n    isContainer: function() {\n      const hasKey = (this.getKey() === null);\n      const hasChildren = this.hasChildren();\n      return hasKey || hasChildren;\n    },\n\n    isDynamic: function() {\n      return qxapp.data.model.Node.isDynamic(this.getMetaData());\n    },\n\n    isComputational: function() {\n      return qxapp.data.model.Node.isComputational(this.getMetaData());\n    },\n\n    isRealService: function() {\n      return qxapp.data.model.Node.isRealService(this.getMetaData());\n    },\n\n    getMetaData: function() {\n      return this.__metaData;\n    },\n\n    getInputValues: function() {\n      if (this.isPropertyInitialized(\"propsWidget\") && this.getPropsWidget()) {\n        return this.getPropsWidget().getValues();\n      }\n      return {};\n    },\n\n    getInputsDefault: function() {\n      return this.__inputsDefault;\n    },\n\n    getInput: function(outputId) {\n      return this.__inputs[outputId];\n    },\n\n    getInputs: function() {\n      return this.__inputs;\n    },\n\n    getOutput: function(outputId) {\n      return this.__outputs[outputId];\n    },\n\n    getOutputs: function() {\n      return this.__outputs;\n    },\n\n    getOutputValues: function() {\n      let output = {};\n      for (const outputId in this.__outputs) {\n        if (this.__outputs[outputId].value) {\n          output[outputId] = this.__outputs[outputId].value;\n        }\n      }\n      return output;\n    },\n\n    hasChildren: function() {\n      const innerNodes = this.getInnerNodes();\n      if (innerNodes) {\n        return Object.keys(innerNodes).length > 0;\n      }\n      return false;\n    },\n\n    getInnerNodes: function(recursive = false) {\n      let innerNodes = Object.assign({}, this.__innerNodes);\n      if (recursive) {\n        for (const innerNodeId in this.__innerNodes) {\n          let myInnerNodes = this.__innerNodes[innerNodeId].getInnerNodes(true);\n          innerNodes = Object.assign(innerNodes, myInnerNodes);\n        }\n      }\n      return innerNodes;\n    },\n\n    addInnerNode: function(innerNodeId, innerNode) {\n      this.__innerNodes[innerNodeId] = innerNode;\n      innerNode.setParentNodeId(this.getNodeId());\n    },\n\n    removeInnerNode: function(innerNodeId) {\n      delete this.__innerNodes[innerNodeId];\n    },\n\n    isInnerNode: function(inputNodeId) {\n      return (inputNodeId in this.__innerNodes);\n    },\n\n    getExposedInnerNodes: function(recursive = false) {\n      const innerNodes = this.getInnerNodes(recursive);\n      let exposedInnerNodes = {};\n      for (const innerNodeId in innerNodes) {\n        const innerNode = innerNodes[innerNodeId];\n        if (innerNode.getIsOutputNode()) {\n          exposedInnerNodes[innerNodeId] = innerNode;\n        }\n      }\n      return exposedInnerNodes;\n    },\n\n    getInputNodes: function() {\n      return this.__inputNodes;\n    },\n\n    populateNodeData: function(nodeData) {\n      if (nodeData) {\n        if (nodeData.label) {\n          this.setLabel(nodeData.label);\n        }\n\n        this.setInputData(nodeData);\n        this.setOutputData(nodeData);\n\n        if (nodeData.inputNodes) {\n          this.setInputNodes(nodeData);\n        }\n\n        if (nodeData.outputNode) {\n          this.setIsOutputNode(nodeData.outputNode);\n        }\n\n        if (nodeData.position) {\n          this.setPosition(nodeData.position.x, nodeData.position.y);\n        }\n\n        if (nodeData.progress) {\n          this.setProgress(nodeData.progress);\n        }\n\n        if (nodeData.thumbnail) {\n          this.setThumbnail(nodeData.thumbnail);\n        }\n      }\n\n      if (this.__inputsDefaultWidget) {\n        this.__inputsDefaultWidget.populatePortsData();\n      }\n      if (this.__outputWidget) {\n        this.__outputWidget.populatePortsData();\n      }\n    },\n\n    giveUniqueName: function() {\n      const label = this.getLabel();\n      this.__giveUniqueName(label, 2);\n    },\n\n    __giveUniqueName: function(label, suffix) {\n      const newLabel = label + \"_\" + suffix;\n      const allModels = this.getWorkbench().getNodes(true);\n      const nodes = Object.values(allModels);\n      for (const node of nodes) {\n        if (node.getNodeId() !== this.getNodeId() &&\n            node.getLabel().localeCompare(this.getLabel()) === 0) {\n          this.setLabel(newLabel);\n          this.__giveUniqueName(label, suffix+1);\n        }\n      }\n    },\n\n    repopulateOutputPortData: function() {\n      if (this.__outputWidget) {\n        this.__outputWidget.populatePortsData();\n      }\n    },\n\n    getInputsDefaultWidget: function() {\n      return this.__inputsDefaultWidget;\n    },\n\n    __addInputsDefaultWidgets: function() {\n      const isInputModel = false;\n      this.__inputsDefaultWidget = new qxapp.component.widget.NodePorts(this, isInputModel);\n    },\n\n    /**\n     * Remove those inputs that can't be respresented in the settings form\n     * (Those are needed for creating connections between nodes)\n     *\n     */\n    __removeNonSettingInputs: function(inputs) {\n      let filteredInputs = JSON.parse(JSON.stringify(inputs));\n      for (const inputId in filteredInputs) {\n        let input = filteredInputs[inputId];\n        if (input.type.includes(\"data:application/s4l-api/\")) {\n          delete filteredInputs[inputId];\n        }\n      }\n      return filteredInputs;\n    },\n\n\n    /**\n     * Add mapper widget if any\n     *\n     */\n    __addMapper: function(inputs) {\n      let filteredInputs = JSON.parse(JSON.stringify(inputs));\n      if (filteredInputs.mapper) {\n        let inputsMapper = new qxapp.component.widget.InputsMapper(this, filteredInputs[\"mapper\"]);\n        this.setInputsMapper(inputsMapper);\n        delete filteredInputs[\"mapper\"];\n      }\n      return filteredInputs;\n    },\n\n    /**\n     * Add settings widget with those inputs that can be represented in a form\n     *\n     */\n    __addSettings: function(inputs) {\n      const form = this.__settingsForm = new qxapp.component.form.Auto(inputs, this);\n      form.addListener(\"linkAdded\", e => {\n        const changedField = e.getData();\n        this.getPropsWidget().linkAdded(changedField);\n      }, this);\n      form.addListener(\"linkRemoved\", e => {\n        const changedField = e.getData();\n        this.getPropsWidget().linkRemoved(changedField);\n      }, this);\n\n      const propsWidget = new qxapp.component.form.renderer.PropForm(form, this.getWorkbench(), this);\n      this.setPropsWidget(propsWidget);\n      propsWidget.addListener(\"removeLink\", e => {\n        const changedField = e.getData();\n        this.__settingsForm.removeLink(changedField);\n      }, this);\n      propsWidget.addListener(\"dataFieldModified\", e => {\n        const portId = e.getData();\n        this.__retrieveInputs(portId);\n      }, this);\n    },\n\n    getOutputWidget: function() {\n      return this.__outputWidget;\n    },\n\n    __addOutputWidget: function() {\n      const isInputModel = true;\n      this.__outputWidget = new qxapp.component.widget.NodePorts(this, isInputModel);\n    },\n\n    __addInputsDefault: function(inputsDefault) {\n      this.__inputsDefault = inputsDefault;\n\n      this.__addInputsDefaultWidgets();\n    },\n\n    __addInputs: function(inputs) {\n      this.__inputs = inputs;\n\n      if (inputs === null) {\n        return;\n      }\n\n      let filteredInputs = this.__removeNonSettingInputs(inputs);\n      filteredInputs = this.__addMapper(filteredInputs);\n      this.__addSettings(filteredInputs);\n    },\n\n    __addOutputs: function(outputs) {\n      this.__outputs = outputs;\n\n      this.__addOutputWidget();\n    },\n\n    setInputData: function(nodeData) {\n      if (this.__settingsForm && nodeData) {\n        this.__settingsForm.setData(nodeData.inputs);\n        if (\"inputAccess\" in nodeData) {\n          this.__settingsForm.setAccessLevel(nodeData.inputAccess);\n          this.setInputAccess(nodeData.inputAccess);\n        }\n      }\n    },\n\n    setOutputData: function(nodeData) {\n      if (nodeData.outputs) {\n        for (const outputKey in nodeData.outputs) {\n          this.__outputs[outputKey].value = nodeData.outputs[outputKey];\n        }\n      }\n    },\n\n    // post edge creation routine\n    edgeAdded: function(edge) {\n      if (this.isInKey(\"multi-plot\")) {\n        const inputNode = this.getWorkbench().getNode(edge.getInputNodeId());\n        const innerNodes = Object.values(this.getInnerNodes());\n        for (let i=0; i<innerNodes.length; i++) {\n          const innerNode = innerNodes[i];\n          if (innerNode.addInputNode(inputNode.getNodeId())) {\n            this.createAutomaticPortConns(inputNode, innerNode);\n          }\n        }\n        this.__retrieveInputs();\n      }\n    },\n\n    createAutomaticPortConns: function(node1, node2) {\n      // create automatic port connections\n      console.log(\"createAutomaticPortConns\", node1, node2);\n      const outPorts = node1.getOutputs();\n      const inPorts = node2.getInputs();\n      for (const outPort in outPorts) {\n        for (const inPort in inPorts) {\n          if (qxapp.store.Store.getInstance().arePortsCompatible(outPorts[outPort], inPorts[inPort])) {\n            if (node2.addPortLink(inPort, node1.getNodeId(), outPort)) {\n              break;\n            }\n          }\n        }\n      }\n    },\n\n    addPortLink: function(toPortId, fromNodeId, fromPortId) {\n      return this.__settingsForm.addLink(toPortId, fromNodeId, fromPortId);\n    },\n\n    addInputNode: function(inputNodeId) {\n      if (!this.__inputNodes.includes(inputNodeId)) {\n        this.__inputNodes.push(inputNodeId);\n        return true;\n      }\n      return false;\n    },\n\n    setInputNodes: function(nodeData) {\n      if (nodeData.inputNodes) {\n        for (let i=0; i<nodeData.inputNodes.length; i++) {\n          this.addInputNode(nodeData.inputNodes[i]);\n        }\n      }\n    },\n\n    removeInputNode: function(inputNodeId) {\n      const index = this.__inputNodes.indexOf(inputNodeId);\n      if (index > -1) {\n        // remove node connection\n        this.__inputNodes.splice(index, 1);\n\n        // remove port connections\n        let inputs = this.getInputValues();\n        for (const portId in inputs) {\n          if (inputs[portId] && Object.prototype.hasOwnProperty.call(inputs[portId], \"nodeUuid\")) {\n            if (inputs[portId][\"nodeUuid\"] === inputNodeId) {\n              this.__settingsForm.removeLink(portId);\n            }\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n\n    isInputNode: function(inputNodeId) {\n      const index = this.__inputNodes.indexOf(inputNodeId);\n      return (index > -1);\n    },\n\n    renameNode: function(newLabel) {\n      if (!qxapp.data.Permissions.getInstance().canDo(\"study.node.rename\", true)) {\n        return false;\n      }\n      this.setLabel(newLabel);\n      return true;\n    },\n\n    restartIFrame: function(loadThis) {\n      if (this.getIFrame() === null) {\n        this.setIFrame(new qxapp.component.widget.PersistentIframe());\n      }\n      if (loadThis) {\n        this.getIFrame().resetSource();\n        this.getIFrame().setSource(loadThis);\n      } else if (this.getServiceUrl() !== null) {\n        this.getIFrame().resetSource();\n        if (this.getKey().includes(\"3d-viewer\")) {\n          // HACK: add this argument to only load the defined colorMaps\n          // https://github.com/Kitware/visualizer/commit/197acaf\n          const srvUrl = this.getServiceUrl();\n          let arg = \"?serverColorMaps\";\n          if (srvUrl[srvUrl.length-1] !== \"/\") {\n            arg = \"/\" + arg;\n          }\n          this.getIFrame().setSource(srvUrl + arg);\n        } else {\n          this.getIFrame().setSource(this.getServiceUrl());\n        }\n\n        if (this.getKey().includes(\"raw-graphs\")) {\n          // Listen to the postMessage from RawGraphs, posting a new graph\n          window.addEventListener(\"message\", e => {\n            const {\n              id,\n              imgData\n            } = e.data;\n            if (imgData && id === \"svgChange\") {\n              const img = document.createElement(\"img\");\n              img.src = imgData;\n              this.setThumbnail(img.outerHTML);\n            }\n          }, false);\n        }\n      }\n    },\n\n    __showLoadingIFrame: function() {\n      const loadingUri = qxapp.utils.Utils.getLoaderUri();\n      this.restartIFrame(loadingUri);\n    },\n\n    __retrieveInputs: function(portKey) {\n      const data = {\n        node: this,\n        portKey\n      };\n      this.fireDataEvent(\"retrieveInputs\", data);\n    },\n\n    retrieveInputs: function(portKey = null) {\n      if (this.isDynamic() && this.isRealService()) {\n        if (!qxapp.data.Permissions.getInstance().canDo(\"study.update\")) {\n          return;\n        }\n        const srvUrl = this.getServiceUrl();\n        if (srvUrl) {\n          let urlUpdate = srvUrl + \"/retrieve\";\n          urlUpdate = urlUpdate.replace(\"//retrieve\", \"/retrieve\");\n          const updReq = new qx.io.request.Xhr();\n          const reqData = {\n            \"port_keys\": portKey ? [portKey] : []\n          };\n          updReq.set({\n            url: urlUpdate,\n            method: \"POST\",\n            requestData: qx.util.Serializer.toJson(reqData)\n          });\n          updReq.addListener(\"success\", e => {\n            const {\n              data\n            } = e.getTarget().getResponse();\n            this.getPropsWidget().retrievedPortData(portKey, true);\n            console.log(data);\n          }, this);\n          updReq.addListener(\"fail\", e => {\n            const {\n              error\n            } = e.getTarget().getResponse();\n            this.getPropsWidget().retrievedPortData(portKey, false);\n            console.error(\"fail\", error);\n          }, this);\n          updReq.addListener(\"error\", e => {\n            const {\n              error\n            } = e.getTarget().getResponse();\n            this.getPropsWidget().retrievedPortData(portKey, false);\n            console.error(\"error\", error);\n          }, this);\n          updReq.send();\n\n          this.getPropsWidget().retrievingPortData(portKey);\n        }\n      }\n    },\n\n    startInteractiveNode: function() {\n      if (this.isDynamic() && this.isRealService()) {\n        const retrieveBtn = new qx.ui.toolbar.Button(this.tr(\"Retrieve\"), \"@FontAwesome5Solid/spinner/14\");\n        retrieveBtn.addListener(\"execute\", e => {\n          this.__retrieveInputs();\n        }, this);\n        retrieveBtn.setEnabled(false);\n        this.setRetrieveIFrameButton(retrieveBtn);\n\n        const restartBtn = new qx.ui.toolbar.Button(this.tr(\"Restart\"), \"@FontAwesome5Solid/redo-alt/14\");\n        restartBtn.addListener(\"execute\", e => {\n          this.restartIFrame();\n        }, this);\n        restartBtn.setEnabled(false);\n        this.setRestartIFrameButton(restartBtn);\n\n        this.__showLoadingIFrame();\n\n        this.__startService();\n      }\n    },\n\n    __startService: function() {\n      const metaData = this.getMetaData();\n\n      const msg = \"Starting \" + metaData.key + \":\" + metaData.version + \"...\";\n      const msgData = {\n        nodeId: this.getNodeId(),\n        msg: msg\n      };\n      this.fireDataEvent(\"showInLogger\", msgData);\n\n      this.setProgress(0);\n      this.setInteractiveStatus(\"starting\");\n\n      const prjId = this.getWorkbench().getStudy()\n        .getUuid();\n      // start the service\n      const url = \"/running_interactive_services\";\n      let query = \"?project_id=\" + encodeURIComponent(prjId);\n      query += \"&service_uuid=\" + encodeURIComponent(this.getNodeId());\n      if (metaData.key.includes(\"/neuroman\")) {\n        // HACK: Only Neuroman should enter here\n        query += \"&service_key=\" + encodeURIComponent(\"simcore/services/dynamic/modeler/webserver\");\n        query += \"&service_tag=\" + encodeURIComponent(\"2.8.0\");\n      } else {\n        query += \"&service_key=\" + encodeURIComponent(metaData.key);\n        query += \"&service_tag=\" + encodeURIComponent(metaData.version);\n      }\n      let request = new qxapp.io.request.ApiRequest(url+query, \"POST\");\n      request.addListener(\"success\", this.__onInteractiveNodeStarted, this);\n      request.addListener(\"error\", e => {\n        const errorMsg = \"Error when starting \" + metaData.key + \":\" + metaData.version + \": \" + e.getTarget().getResponse()[\"error\"];\n        const errorMsgData = {\n          nodeId: this.getNodeId(),\n          msg: errorMsg\n        };\n        this.fireDataEvent(\"showInLogger\", errorMsgData);\n        this.setInteractiveStatus(\"failed\");\n      }, this);\n      request.addListener(\"fail\", e => {\n        const failMsg = \"Failed starting \" + metaData.key + \":\" + metaData.version + \": \" + e.getTarget().getResponse()[\"error\"];\n        const failMsgData = {\n          nodeId: this.getNodeId(),\n          msg: failMsg\n        };\n        this.setInteractiveStatus(\"failed\");\n        this.fireDataEvent(\"showInLogger\", failMsgData);\n      }, this);\n      request.send();\n    },\n    __onNodeState: function(e) {\n      let req = e.getTarget();\n      const {\n        data, error\n      } = req.getResponse();\n\n      if (error) {\n        const msg = \"Error received: \" + error;\n        const msgData = {\n          nodeId: this.getNodeId(),\n          msg: msg\n        };\n        this.setInteractiveStatus(\"failed\");\n        this.fireDataEvent(\"showInLogger\", msgData);\n        return;\n      }\n\n      const serviceState = data[\"service_state\"];\n      switch (serviceState) {\n        case \"starting\":\n        case \"pulling\": {\n          this.setInteractiveStatus(\"starting\");\n          const interval = 5000;\n          qx.event.Timer.once(() => this.__nodeState(), this, interval);\n          break;\n        }\n        case \"pending\": {\n          this.setInteractiveStatus(\"pending\");\n          const interval = 10000;\n          qx.event.Timer.once(() => this.__nodeState(), this, interval);\n          break;\n        }\n        case \"running\": {\n          // const publishedPort = data[\"published_port\"];\n          const servicePath=data[\"service_basepath\"];\n          const entryPointD = data[\"entry_point\"];\n          const nodeId = data[\"service_uuid\"];\n          if (nodeId !== this.getNodeId()) {\n            return;\n          }\n          if (servicePath) {\n            const entryPoint = entryPointD ? (\"/\" + entryPointD) : \"/\";\n            let srvUrl = servicePath + entryPoint;\n            // FIXME: this is temporary until the reverse proxy works for these services\n            // if (this.getKey().includes(\"neuroman\") || this.getKey().includes(\"modeler\")) {\n            //   srvUrl = \"http://\" + window.location.hostname + \":\" + publishedPort + srvUrl;\n            // }\n\n            this.__serviceReadyIn(srvUrl);\n          }\n          break;\n        }\n        case \"complete\":\n          break;\n        case \"failed\": {\n          this.setInteractiveStatus(\"failed\");\n          const msg = \"Service failed: \" + data[\"service_message\"];\n          const msgData = {\n            nodeId: this.getNodeId(),\n            msg: msg\n          };\n          this.fireDataEvent(\"showInLogger\", msgData);\n          return;\n        }\n\n        default:\n          break;\n      }\n    },\n    __nodeState: function() {\n      const url = \"/running_interactive_services/\" + encodeURIComponent(this.getNodeId());\n      let request = new qxapp.io.request.ApiRequest(url, \"GET\");\n      request.addListener(\"success\", this.__onNodeState, this);\n      request.addListener(\"error\", e => {\n        const errorMsg = \"Error when starting \" + this.getKey() + \":\" + this.getVersion() + \": \" + e.getTarget().getResponse()[\"error\"];\n        const errorMsgData = {\n          nodeId: this.getNodeId(),\n          msg: errorMsg\n        };\n        this.fireDataEvent(\"showInLogger\", errorMsgData);\n      }, this);\n      request.addListener(\"fail\", e => {\n        const failMsg = \"Failed starting \" + this.getKey() + \":\" + this.getVersion() + \": \" + e.getTarget().getResponse()[\"error\"];\n        const failMsgData = {\n          nodeId: this.getNodeId(),\n          msg: failMsg\n        };\n        this.fireDataEvent(\"showInLogger\", failMsgData);\n      }, this);\n      request.send();\n    },\n    __onInteractiveNodeStarted: function(e) {\n      let req = e.getTarget();\n      const {\n        error\n      } = req.getResponse();\n\n      if (error) {\n        const msg = \"Error received: \" + error;\n        const msgData = {\n          nodeId: this.getNodeId(),\n          msg: msg\n        };\n        this.fireDataEvent(\"showInLogger\", msgData);\n        return;\n      }\n\n      this.__nodeState();\n    },\n\n    __serviceReadyIn: function(srvUrl) {\n      this.setServiceUrl(srvUrl);\n      this.setInteractiveStatus(\"ready\");\n      const msg = \"Service ready on \" + srvUrl;\n      const msgData = {\n        nodeId: this.getNodeId(),\n        msg: msg\n      };\n      this.fireDataEvent(\"showInLogger\", msgData);\n\n      this.getRetrieveIFrameButton().setEnabled(true);\n      this.getRestartIFrameButton().setEnabled(true);\n      this.setProgress(100);\n\n      // FIXME: Apparently no all services are inmediately ready when they publish the port\n      const waitFor = 4000;\n      qx.event.Timer.once(ev => {\n        this.restartIFrame();\n      }, this, waitFor);\n\n      this.__retrieveInputs();\n    },\n\n    removeNode: function() {\n      this.stopInteractiveService();\n      const innerNodes = Object.values(this.getInnerNodes());\n      for (const innerNode of innerNodes) {\n        innerNode.removeNode();\n      }\n      const parentNodeId = this.getParentNodeId();\n      if (parentNodeId) {\n        let parentNode = this.getWorkbench().getNode(parentNodeId);\n        parentNode.removeInnerNode(this.getNodeId());\n      }\n    },\n\n    removeIFrame: function() {\n      let iFrame = this.getIFrame();\n      if (iFrame) {\n        iFrame.destroy();\n        this.setIFrame(null);\n      }\n    },\n\n    stopInteractiveService: function() {\n      if (this.isDynamic() && this.isRealService()) {\n        const store = qxapp.store.Store.getInstance();\n        store.stopInteractiveService(this.getNodeId());\n        this.removeIFrame();\n      }\n    },\n\n    setPosition: function(x, y) {\n      this.__posX = x;\n      this.__posY = y;\n    },\n\n    getPosition: function() {\n      return {\n        x: this.__posX,\n        y: this.__posY\n      };\n    },\n\n    serialize: function(saveContainers, savePosition) {\n      if (!saveContainers && this.isContainer()) {\n        return null;\n      }\n\n      // node generic\n      let nodeEntry = {\n        key: this.getKey(),\n        version: this.getVersion(),\n        label: this.getLabel(),\n        inputs: this.getInputValues(),\n        inputAccess: this.getInputAccess(),\n        inputNodes: this.getInputNodes(),\n        outputNode: this.getIsOutputNode(),\n        outputs: this.getOutputValues(),\n        parent: this.getParentNodeId(),\n        progress: this.getProgress(),\n        thumbnail: this.getThumbnail()\n      };\n\n      if (savePosition) {\n        nodeEntry.position = {\n          x: this.getPosition().x,\n          y: this.getPosition().y\n        };\n      }\n      // remove null entries from the payload\n      let filteredNodeEntry = {};\n      for (const key in nodeEntry) {\n        if (nodeEntry[key] !== null) {\n          filteredNodeEntry[key] = nodeEntry[key];\n        }\n      }\n\n      return filteredNodeEntry;\n    }\n  }\n});\n"
  ]
}