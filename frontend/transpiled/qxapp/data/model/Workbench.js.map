{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/data/model/Workbench.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "study",
    "workbenchData",
    "setStudy",
    "setStudyName",
    "getName",
    "__deserializeWorkbench",
    "properties",
    "check",
    "nullable",
    "studyName",
    "events",
    "members",
    "__nodesTopLevel",
    "__edges",
    "isContainer",
    "getNode",
    "nodeId",
    "allNodes",
    "getNodes",
    "exists",
    "prototype",
    "hasOwnProperty",
    "call",
    "recursive",
    "nodes",
    "assign",
    "topLevelNodes",
    "values",
    "topLevelNode",
    "innerNodes",
    "getInnerNodes",
    "getPathIds",
    "undefined",
    "nodePath",
    "unshift",
    "node",
    "parentNodeId",
    "getParentNodeId",
    "checkThisNode",
    "getConnectedEdges",
    "connectedEdges",
    "edges",
    "edge",
    "getInputNodeId",
    "push",
    "getEdgeId",
    "getOutputNodeId",
    "getEdge",
    "edgeId",
    "node1Id",
    "node2Id",
    "createEdge",
    "existingEdge",
    "qxapp",
    "data",
    "Permissions",
    "getInstance",
    "canDo",
    "model",
    "Edge",
    "addEdge",
    "edgeAdded",
    "createNode",
    "key",
    "version",
    "uuid",
    "parent",
    "populateNodeData",
    "existingNode",
    "Node",
    "metaData",
    "getMetaData",
    "innerNodeMetaDatas",
    "innerNodeMetaData",
    "__initNodeSignals",
    "giveUniqueName",
    "addNode",
    "startInteractiveNode",
    "addListener",
    "e",
    "fireDataEvent",
    "getData",
    "cloneNode",
    "nodeToClone",
    "getKey",
    "getVersion",
    "parentNode",
    "nodeData",
    "serialize",
    "setInputData",
    "setOutputData",
    "setInputNodes",
    "setIsOutputNode",
    "getIsOutputNode",
    "getNodeId",
    "addInnerNode",
    "fireEvent",
    "removeNode",
    "i",
    "length",
    "removeEdge",
    "isTopLevel",
    "currentNodeId",
    "currentNode",
    "inputNode",
    "cNodeId",
    "isInputNode",
    "isInnerNode",
    "inputNodeId",
    "outputNodeId",
    "removeInputNode",
    "clearProgressData",
    "isComputational",
    "isInKey",
    "setProgress",
    "__deserializeNodes",
    "__deserializeEdges",
    "keys",
    "nKeys",
    "console",
    "log",
    "initWorkbench",
    "allModels",
    "inputNodes",
    "addInputNode",
    "outputNode",
    "serializeWorkbench",
    "saveContainers",
    "savePosition",
    "workbench",
    "Workbench"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Class that stores Workbench data.\n *\n * It takes care of creating, storing and managing nodes and edges.\n *\n *                                    -> {EDGES}\n * STUDY -> METADATA + WORKBENCH ->|\n *                                    -> {LINKS}\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   study.setWorkbench(new qxapp.data.model.Workbench(study, study.workbench));\n * </pre>\n */\n\nqx.Class.define(\"qxapp.data.model.Workbench\", {\n  extend: qx.core.Object,\n\n  /**\n    * @param study {qxapp.data.model.Study} Study owning the Workbench\n    * @param workbenchData {qx.core.Object} Object containing the workbench raw data\n    */\n  construct: function(study, workbenchData) {\n    this.base(arguments);\n\n    this.setStudy(study);\n    this.setStudyName(study.getName());\n\n    this.__deserializeWorkbench(workbenchData);\n  },\n\n  properties: {\n    study: {\n      check: \"qxapp.data.model.Study\",\n      nullable: false\n    },\n\n    studyName: {\n      check: \"String\",\n      nullable: false\n    }\n  },\n\n  events: {\n    \"workbenchChanged\": \"qx.event.type.Event\",\n    \"retrieveInputs\": \"qx.event.type.Data\",\n    \"showInLogger\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    __nodesTopLevel: null,\n    __edges: null,\n\n    isContainer: function() {\n      return false;\n    },\n\n    getNode: function(nodeId) {\n      const allNodes = this.getNodes(true);\n      const exists = Object.prototype.hasOwnProperty.call(allNodes, nodeId);\n      if (exists) {\n        return allNodes[nodeId];\n      }\n      return null;\n    },\n\n    getNodes: function(recursive = false) {\n      let nodes = Object.assign({}, this.__nodesTopLevel);\n      if (recursive) {\n        let topLevelNodes = Object.values(this.__nodesTopLevel);\n        for (const topLevelNode of topLevelNodes) {\n          let innerNodes = topLevelNode.getInnerNodes(true);\n          nodes = Object.assign(nodes, innerNodes);\n        }\n      }\n      return nodes;\n    },\n\n    getPathIds: function(nodeId) {\n      if (nodeId === \"root\" || nodeId === undefined) {\n        return [\"root\"];\n      }\n      const nodePath = [];\n      nodePath.unshift(nodeId);\n      const node = this.getNode(nodeId);\n      let parentNodeId = node.getParentNodeId();\n      while (parentNodeId) {\n        const checkThisNode = this.getNode(parentNodeId);\n        if (checkThisNode) {\n          nodePath.unshift(parentNodeId);\n          parentNodeId = checkThisNode.getParentNodeId();\n        }\n      }\n      nodePath.unshift(\"root\");\n      return nodePath;\n    },\n\n    getConnectedEdges: function(nodeId) {\n      const connectedEdges = [];\n      const edges = Object.values(this.__edges);\n      for (const edge of edges) {\n        if (edge.getInputNodeId() === nodeId) {\n          connectedEdges.push(edge.getEdgeId());\n        }\n        if (edge.getOutputNodeId() === nodeId) {\n          connectedEdges.push(edge.getEdgeId());\n        }\n      }\n      return connectedEdges;\n    },\n\n    getEdge: function(edgeId, node1Id, node2Id) {\n      const exists = Object.prototype.hasOwnProperty.call(this.__edges, edgeId);\n      if (exists) {\n        return this.__edges[edgeId];\n      }\n      const edges = Object.values(this.__edges);\n      for (const edge of edges) {\n        if (edge.getInputNodeId() === node1Id &&\n          edge.getOutputNodeId() === node2Id) {\n          return edge;\n        }\n      }\n      return null;\n    },\n\n    createEdge: function(edgeId, node1Id, node2Id) {\n      const existingEdge = this.getEdge(edgeId, node1Id, node2Id);\n      if (existingEdge) {\n        return existingEdge;\n      }\n      if (!qxapp.data.Permissions.getInstance().canDo(\"study.edge.create\", true)) {\n        return null;\n      }\n      const edge = new qxapp.data.model.Edge(edgeId, node1Id, node2Id);\n      this.addEdge(edge);\n\n      // post edge creation\n      this.getNode(node2Id).edgeAdded(edge);\n\n      return edge;\n    },\n\n    addEdge: function(edge) {\n      const edgeId = edge.getEdgeId();\n      const node1Id = edge.getInputNodeId();\n      const node2Id = edge.getOutputNodeId();\n      let exists = this.getEdge(edgeId, node1Id, node2Id);\n      if (!exists) {\n        this.__edges[edgeId] = edge;\n      }\n    },\n\n    createNode: function(key, version, uuid, parent, populateNodeData) {\n      const existingNode = this.getNode(uuid);\n      if (existingNode) {\n        return existingNode;\n      }\n      if (!qxapp.data.Permissions.getInstance().canDo(\"study.node.create\", true)) {\n        return null;\n      }\n      const node = new qxapp.data.model.Node(this, key, version, uuid);\n      const metaData = node.getMetaData();\n      if (metaData && Object.prototype.hasOwnProperty.call(metaData, \"innerNodes\")) {\n        const innerNodeMetaDatas = Object.values(metaData[\"innerNodes\"]);\n        for (const innerNodeMetaData of innerNodeMetaDatas) {\n          this.createNode(innerNodeMetaData.key, innerNodeMetaData.version, null, node, true);\n        }\n      }\n      this.__initNodeSignals(node);\n      if (populateNodeData) {\n        node.populateNodeData();\n        node.giveUniqueName();\n      }\n      this.addNode(node, parent);\n      if (populateNodeData) {\n        node.startInteractiveNode();\n      }\n\n      return node;\n    },\n\n    __initNodeSignals: function(node) {\n      if (node) {\n        node.addListener(\"showInLogger\", e => {\n          this.fireDataEvent(\"showInLogger\", e.getData());\n        }, this);\n        node.addListener(\"retrieveInputs\", e => {\n          this.fireDataEvent(\"retrieveInputs\", e.getData());\n        }, this);\n      }\n    },\n\n    cloneNode: function(nodeToClone) {\n      const key = nodeToClone.getKey();\n      const version = nodeToClone.getVersion();\n      const parentNode = this.getNode(nodeToClone.getParentNodeId());\n      let node = this.createNode(key, version, null, parentNode, true);\n      const nodeData = nodeToClone.serialize();\n      node.setInputData(nodeData);\n      node.setOutputData(nodeData);\n      node.setInputNodes(nodeData);\n      node.setIsOutputNode(nodeToClone.getIsOutputNode());\n      return node;\n    },\n\n    addNode: function(node, parentNode) {\n      const uuid = node.getNodeId();\n      if (parentNode) {\n        parentNode.addInnerNode(uuid, node);\n      } else {\n        this.__nodesTopLevel[uuid] = node;\n      }\n      this.fireEvent(\"workbenchChanged\");\n    },\n\n    removeNode: function(nodeId) {\n      if (!qxapp.data.Permissions.getInstance().canDo(\"study.node.delete\", true)) {\n        return false;\n      }\n\n      // remove first the connected edges\n      const connectedEdges = this.getConnectedEdges(nodeId);\n      for (let i=0; i<connectedEdges.length; i++) {\n        const edgeId = connectedEdges[i];\n        this.removeEdge(edgeId);\n      }\n\n      let node = this.getNode(nodeId);\n      if (node) {\n        node.removeNode();\n        const isTopLevel = Object.prototype.hasOwnProperty.call(this.__nodesTopLevel, nodeId);\n        if (isTopLevel) {\n          delete this.__nodesTopLevel[nodeId];\n        }\n        this.fireEvent(\"workbenchChanged\");\n        return true;\n      }\n      return false;\n    },\n\n    removeEdge: function(edgeId, currentNodeId) {\n      if (!qxapp.data.Permissions.getInstance().canDo(\"study.edge.delete\", true)) {\n        return false;\n      }\n\n      const edge = this.getEdge(edgeId);\n      if (currentNodeId !== undefined) {\n        const currentNode = this.getNode(currentNodeId);\n        if (currentNode && currentNode.isContainer() && edge.getOutputNodeId() === currentNode.getNodeId()) {\n          const inputNode = this.getNode(edge.getInputNodeId());\n          inputNode.setIsOutputNode(false);\n\n          // Remove also dependencies from outter nodes\n          const cNodeId = inputNode.getNodeId();\n          const allNodes = this.getNodes(true);\n          for (const nodeId in allNodes) {\n            const node = allNodes[nodeId];\n            if (node.isInputNode(cNodeId) && !currentNode.isInnerNode(node.getNodeId())) {\n              this.removeEdge(edgeId);\n            }\n          }\n        }\n      }\n\n      if (edge) {\n        const inputNodeId = edge.getInputNodeId();\n        const outputNodeId = edge.getOutputNodeId();\n        const node = this.getNode(outputNodeId);\n        if (node) {\n          node.removeInputNode(inputNodeId);\n          delete this.__edges[edgeId];\n          return true;\n        }\n      }\n      return false;\n    },\n\n    clearProgressData: function() {\n      const allNodes = this.getNodes(true);\n      const nodes = Object.values(allNodes);\n      for (const node of nodes) {\n        if (node.isComputational() && !node.isInKey(\"file-picker\")) {\n          node.setProgress(0);\n        }\n      }\n    },\n\n    __deserializeWorkbench: function(workbenchData) {\n      this.__nodesTopLevel = {};\n      this.__edges = {};\n\n      this.__deserializeNodes(workbenchData);\n      this.__deserializeEdges(workbenchData);\n    },\n\n    __deserializeNodes: function(workbenchData) {\n      let keys = Object.keys(workbenchData);\n      // Create first all the nodes\n      for (let i=0; i<keys.length; i++) {\n        const nodeId = keys[i];\n        const nodeData = workbenchData[nodeId];\n        if (nodeData.parent && nodeData.parent !== null) {\n          let parentNode = this.getNode(nodeData.parent);\n          if (parentNode === null) {\n            // If parent was not yet created, delay the creation of its' children\n            keys.push(nodeId);\n            // check if there is an inconsitency\n            const nKeys = keys.length;\n            if (nKeys > 1) {\n              if (keys[nKeys-1] === keys[nKeys-2]) {\n                console.log(nodeId, \"will never be created, parent missing\", nodeData.parent);\n                return;\n              }\n            }\n            continue;\n          }\n        }\n        let parentNode = null;\n        if (nodeData.parent) {\n          parentNode = this.getNode(nodeData.parent);\n        }\n        let node = null;\n        if (nodeData.key) {\n          // not container\n          // this.createNode(nodeData.key, nodeData.version, nodeId, parentNode, false);\n          node = new qxapp.data.model.Node(this, nodeData.key, nodeData.version, nodeId);\n        } else {\n          // container\n          // this.createNode(null, null, nodeId, parentNode, false);\n          node = new qxapp.data.model.Node(this, null, null, nodeId);\n        }\n        if (node) {\n          this.__initNodeSignals(node);\n          this.addNode(node, parentNode);\n        }\n      }\n\n      // Then populate them (this will avoid issues of connecting nodes that might not be created yet)\n      for (let i=0; i<keys.length; i++) {\n        const nodeId = keys[i];\n        const nodeData = workbenchData[nodeId];\n        this.getNode(nodeId).populateNodeData(nodeData);\n      }\n      for (let i=0; i<keys.length; i++) {\n        const nodeId = keys[i];\n        this.getNode(nodeId).giveUniqueName();\n      }\n    },\n\n    initWorkbench: function() {\n      const allModels = this.getNodes(true);\n      const nodes = Object.values(allModels);\n      for (const node of nodes) {\n        node.startInteractiveNode();\n      }\n    },\n\n    __deserializeEdges: function(workbenchData) {\n      for (const nodeId in workbenchData) {\n        const nodeData = workbenchData[nodeId];\n        const node = this.getNode(nodeId);\n        if (node === null) {\n          continue;\n        }\n        if (nodeData.inputNodes) {\n          for (let i=0; i < nodeData.inputNodes.length; i++) {\n            const outputNodeId = nodeData.inputNodes[i];\n            const edge = new qxapp.data.model.Edge(null, outputNodeId, nodeId);\n            this.addEdge(edge);\n            node.addInputNode(outputNodeId);\n          }\n        }\n        if (nodeData.outputNode) {\n          const edge = new qxapp.data.model.Edge(null, nodeId, nodeData.parent);\n          this.addEdge(edge);\n        }\n      }\n    },\n\n    serializeWorkbench: function(saveContainers = true, savePosition = true) {\n      let workbench = {};\n      const allModels = this.getNodes(true);\n      const nodes = Object.values(allModels);\n      for (const node of nodes) {\n        const data = node.serialize(saveContainers, savePosition);\n        if (data) {\n          workbench[node.getNodeId()] = data;\n        }\n      }\n      return workbench;\n    }\n  }\n});\n"
  ]
}