{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/data/MimeType.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "properties",
    "type",
    "subType",
    "parameters",
    "construct",
    "string",
    "parse",
    "statics",
    "getMimeType",
    "match",
    "members",
    "input",
    "String",
    "split",
    "essence",
    "shift",
    "setType",
    "toLowerCase",
    "setSubType",
    "para",
    "forEach",
    "p",
    "kv",
    "setParameters",
    "toString",
    "getParameters",
    "keys",
    "sort",
    "a",
    "b",
    "map",
    "k",
    "join",
    "getEssence",
    "getType",
    "getSubType",
    "partner",
    "matchType",
    "matchSubType",
    "qxapp",
    "data",
    "MimeType"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Tobi Oetiker (oetiker)\n\n************************************************************************ */\n\n/**\n * Collection of methods for doing MymeType operations.\n * https://en.wikipedia.org/wiki/Media_type\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   const sameType = qxapp.data.MimeType(mtA).match(new qxapp.data.MimeType(mtB));\n * </pre>\n */\n\nqx.Class.define(\"qxapp.data.MimeType\", {\n  extend: qx.core.Object,\n\n  properties: {\n    type: {},\n    subType: {},\n    parameters: {}\n  },\n\n  /**\n    * @param string {String} source string\n  */\n  construct: function(string) {\n    this.base(arguments);\n    this.parse(string);\n  },\n\n  statics: {\n    getMimeType: function(type) {\n      let match = type.match(/data:([^/\\s]+\\/[^/;\\s]*)/);\n      if (match) {\n        return match[1];\n      }\n      return null;\n    }\n  },\n\n  members: {\n    parse: function(string) {\n      let input = String(string).split(\";\");\n      let essence = input.shift().split(\"/\", 2);\n      this.setType(essence[0].toLowerCase());\n      this.setSubType(essence[1].toLowerCase());\n      let para = {};\n      input.forEach(function(p) {\n        let kv = p.split(\"=\", 2);\n        para[kv[0]] = kv[1];\n      });\n      this.setParameters(para);\n    },\n    toString: function() {\n      let p = this.getParameters();\n      let kv = Object.keys(p)\n        .sort(function(a, b) {\n          a=String(a);\n          b=String(b);\n          if (a > b) {\n            return 1;\n          }\n          if (a < b) {\n            return -1;\n          }\n          return 0;\n        })\n        .map(function(k) {\n          return k+\"=\"+p[k];\n        })\n        .join(\";\");\n      return this.getEssence() + (kv ? \";\"+kv : \"\");\n    },\n    getEssence: function() {\n      return this.getType() + \"/\" + this.getSubType();\n    },\n    match: function(partner) {\n      let matchType = this.getType() === partner.getType() || this.getType() === \"*\" || partner.getType() === \"*\";\n      let matchSubType = this.getSubType() === partner.getSubType() || this.getSubType() === \"*\" || partner.getSubType() === \"*\";\n      return matchType && matchSubType;\n    }\n  }\n});\n"
  ]
}