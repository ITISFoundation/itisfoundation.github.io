{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/InputsMapper.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "node",
    "mapper",
    "widgetLayout",
    "layout",
    "VBox",
    "_setLayout",
    "setNode",
    "setMapper",
    "tree",
    "__tree",
    "VirtualTree",
    "set",
    "openMode",
    "_add",
    "flex",
    "getSelection",
    "addListener",
    "__onTreeSelectionChanged",
    "that",
    "setDelegate",
    "createItem",
    "qxapp",
    "component",
    "widget",
    "InputsMapperTreeItem",
    "bindItem",
    "c",
    "item",
    "id",
    "bindDefaultProperties",
    "bindProperty",
    "configureItem",
    "droppable",
    "e",
    "getIsDir",
    "compatible",
    "supportsType",
    "from",
    "getRelatedTarget",
    "to",
    "getCurrentTarget",
    "fromKey",
    "getNodeKey",
    "getIsRoot",
    "getLabel",
    "__willBeBranch",
    "getModel",
    "getChildren",
    "length",
    "__willBeLeaf",
    "preventDefault",
    "fromNodeKey",
    "fromPortKey",
    "getPortKey",
    "mat2ent",
    "dev",
    "fake",
    "Data",
    "i",
    "push",
    "children",
    "child",
    "toArray",
    "data",
    "key",
    "getKey",
    "label",
    "nodeKey",
    "portKey",
    "isDir",
    "__createItemAndPush",
    "setOpen",
    "focus",
    "isRoot",
    "defaultValue",
    "defValues",
    "defValue",
    "defValueId",
    "newBranch",
    "replace",
    "newItemBranch",
    "marshal",
    "Json",
    "createModel",
    "itemProps",
    "store",
    "Store",
    "getInstance",
    "getItem",
    "Object",
    "keys",
    "getInputsDefault",
    "form",
    "Auto",
    "getNode",
    "propsWidget",
    "renderer",
    "PropForm",
    "values",
    "j",
    "newLeaf",
    "newItemLeaf",
    "model",
    "setModel",
    "keyEvent",
    "treeSelection",
    "selectedItem",
    "getKeyIdentifier",
    "treeItemRenamer",
    "TreeItemRenamer",
    "newLabel",
    "getData",
    "setLabel",
    "center",
    "open",
    "branches",
    "removed",
    "remove",
    "br",
    "branch",
    "properties",
    "check",
    "nullable",
    "members",
    "willBeBranch",
    "newItem",
    "candidate",
    "isBranch",
    "maps",
    "getMapper",
    "isDefault",
    "isLeave",
    "leaf",
    "_getChildren",
    "_removeAt",
    "selectedItems",
    "InputsMapper"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qCAAhB,EAAuD;AACrDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADkC;;AAGrD;;;;AAIAC,IAAAA,SAAS,EAAE,mBAASC,IAAT,EAAeC,MAAf,EAAuB;AAAA;;AAChC;AAEA,UAAIC,YAAY,GAAG,IAAIb,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaC,IAAjB,CAAsB,CAAtB,CAAnB;;AACA,WAAKC,UAAL,CAAgBH,YAAhB;;AAEA,WAAKI,OAAL,CAAaN,IAAb;AACA,WAAKO,SAAL,CAAeN,MAAf;AAEA,UAAIO,IAAI,GAAG,KAAKC,MAAL,GAAc,IAAIpB,EAAE,CAACO,EAAH,CAAMY,IAAN,CAAWE,WAAf,CAA2B,IAA3B,EAAiC,OAAjC,EAA0C,UAA1C,EAAsDC,GAAtD,CAA0D;AACjFC,QAAAA,QAAQ,EAAE;AADuE,OAA1D,CAAzB;;AAGA,WAAKC,IAAL,CAAUL,IAAV,EAAgB;AACdM,QAAAA,IAAI,EAAE;AADQ,OAAhB;;AAGAN,MAAAA,IAAI,CAACO,YAAL,GAAoBC,WAApB,CAAgC,QAAhC,EAA0C,KAAKC,wBAA/C,EAAyE,IAAzE;AAEA,UAAIC,IAAI,GAAG,IAAX;AACAV,MAAAA,IAAI,CAACW,WAAL,CAAiB;AACfC,QAAAA,UAAU,EAAE;AAAA,iBAAM,IAAIC,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,oBAA3B,EAAN;AAAA,SADG;AAEfC,QAAAA,QAAQ,EAAE,kBAACC,CAAD,EAAIC,IAAJ,EAAUC,EAAV,EAAiB;AACzBF,UAAAA,CAAC,CAACG,qBAAF,CAAwBF,IAAxB,EAA8BC,EAA9B;AACAF,UAAAA,CAAC,CAACI,YAAF,CAAe,OAAf,EAAwB,OAAxB,EAAiC,IAAjC,EAAuCH,IAAvC,EAA6CC,EAA7C;AACAF,UAAAA,CAAC,CAACI,YAAF,CAAe,QAAf,EAAyB,QAAzB,EAAmC,IAAnC,EAAyCH,IAAzC,EAA+CC,EAA/C;AACD,SANc;AAOfG,QAAAA,aAAa,EAAE,uBAAAJ,IAAI,EAAI;AACrBA,UAAAA,IAAI,CAAChB,GAAL,CAAS;AACPqB,YAAAA,SAAS,EAAE;AADJ,WAAT;AAGAL,UAAAA,IAAI,CAACX,WAAL,CAAiB,UAAjB,EAA6B,UAAAiB,CAAC,EAAI;AAChCN,YAAAA,IAAI,CAAChB,GAAL,CAAS;AACPqB,cAAAA,SAAS,EAAEL,IAAI,CAACO,QAAL;AADJ,aAAT;AAGA,gBAAIC,UAAU,GAAG,KAAjB;;AACA,gBAAIF,CAAC,CAACG,YAAF,CAAe,gBAAf,CAAJ,EAAsC;AACpC,kBAAMC,IAAI,GAAGJ,CAAC,CAACK,gBAAF,EAAb;AACA,kBAAMC,EAAE,GAAGN,CAAC,CAACO,gBAAF,EAAX;AACA,kBAAMC,OAAO,GAAGJ,IAAI,CAACK,UAAL,EAAhB;;AACA,kBAAIH,EAAE,CAACI,SAAH,EAAJ,EAAoB;AAClB;AACA,oBAAIN,IAAI,CAACO,QAAL,OAAoB,8BAAxB,EAAwD;AACtDT,kBAAAA,UAAU,GAAG,IAAb;AACD,iBAFD,MAEO;AACL;AACAA,kBAAAA,UAAU,GAAGE,IAAI,CAACH,QAAL,MAAmBhB,IAAI,CAAC2B,cAAL,CAAoBJ,OAApB,CAAhC;AACD;AACF,eARD,MAQO,IAAIJ,IAAI,CAACS,QAAL,GAAgBC,WAAhB,IAA+BV,IAAI,CAACS,QAAL,GAAgBC,WAAhB,GAA8BC,MAA9B,GAAqC,CAAxE,EAA2E;AAChF;AACAb,gBAAAA,UAAU,GAAG,IAAb;AACD,eAHM,MAGA;AACLA,gBAAAA,UAAU,GAAGI,EAAE,CAACL,QAAH,MAAiB,CAACG,IAAI,CAACH,QAAL,EAAlB,IAAqChB,IAAI,CAAC+B,YAAL,CAAkBR,OAAlB,CAAlD;AACD;AACF;;AACD,gBAAI,CAACN,UAAL,EAAiB;AACfF,cAAAA,CAAC,CAACiB,cAAF;AACD;AACF,WA3BD;AA4BAvB,UAAAA,IAAI,CAACX,WAAL,CAAiB,MAAjB,EAAyB,UAAAiB,CAAC,EAAI;AAC5B,gBAAIA,CAAC,CAACG,YAAF,CAAe,gBAAf,CAAJ,EAAsC;AACpC,kBAAMC,IAAI,GAAGJ,CAAC,CAACK,gBAAF,EAAb;AACA,kBAAMa,WAAW,GAAGd,IAAI,CAACK,UAAL,EAApB;AACA,kBAAMU,WAAW,GAAGf,IAAI,CAACgB,UAAL,EAApB;AACA,kBAAMd,EAAE,GAAGN,CAAC,CAACO,gBAAF,EAAX;;AACA,kBAAIH,IAAI,CAACO,QAAL,OAAoB,8BAAxB,EAAwD;AACtD;AACA,oBAAMU,OAAO,GAAGjC,KAAK,CAACkC,GAAN,CAAUC,IAAV,CAAeF,OAAf,CAAuBG,IAAvB,CAA4BH,OAA5B,CAAoCjB,IAAI,CAACO,QAAL,EAApC,CAAhB;;AACA,qBAAK,IAAIc,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACJ,OAAO,CAACN,MAAxB,EAAgCU,CAAC,EAAjC,EAAqC;AACnCnB,kBAAAA,EAAE,CAACO,QAAH,GAAcC,WAAd,GACGY,IADH,CACQL,OAAO,CAACI,CAAD,CADf;AAED;AACF,eAPD,MAOO,IAAIrB,IAAI,CAACS,QAAL,GAAgBC,WAAhB,IAA+BV,IAAI,CAACS,QAAL,GAAgBC,WAAhB,GAA8BC,MAA9B,GAAqC,CAAxE,EAA2E;AAChF;AACA,oBAAIY,QAAQ,GAAGvB,IAAI,CAACS,QAAL,GAAgBC,WAAhB,EAAf;;AACA,qBAAK,IAAIW,EAAC,GAAC,CAAX,EAAcA,EAAC,GAACE,QAAQ,CAACZ,MAAzB,EAAiCU,EAAC,EAAlC,EAAsC;AACpC,sBAAIG,KAAK,GAAGD,QAAQ,CAACE,OAAT,GAAmBJ,EAAnB,CAAZ;;AACA,sBAAI,CAACG,KAAK,CAACd,WAAX,EAAwB;AACtB,wBAAIgB,KAAI,GAAG;AACTC,sBAAAA,GAAG,EAAEH,KAAK,CAACI,MAAN,EADI;AAETC,sBAAAA,KAAK,EAAEL,KAAK,CAACjB,QAAN,EAFE;AAGTuB,sBAAAA,OAAO,EAAE9B,IAAI,CAACK,UAAL,EAHA;AAIT0B,sBAAAA,OAAO,EAAE/B,IAAI,CAACgB,UAAL,EAJA;AAKTgB,sBAAAA,KAAK,EAAE;AALE,qBAAX;;AAOA,oBAAA,KAAI,CAACC,mBAAL,CAAyBP,KAAzB,EAA+BxB,EAA/B,EAAmCY,WAAnC,EAAgDC,WAAhD;AACD;AACF;AACF,eAhBM,MAgBA;AACL,oBAAIW,MAAI,GAAG;AACTC,kBAAAA,GAAG,EAAE3B,IAAI,CAACS,QAAL,EADI;AAEToB,kBAAAA,KAAK,EAAE7B,IAAI,CAACO,QAAL,EAFE;AAGTuB,kBAAAA,OAAO,EAAE9B,IAAI,CAACK,UAAL,EAHA;AAIT0B,kBAAAA,OAAO,EAAE/B,IAAI,CAACgB,UAAL,EAJA;AAKTgB,kBAAAA,KAAK,EAAEhC,IAAI,CAACH,QAAL;AALE,iBAAX;;AAOA,gBAAA,KAAI,CAACoC,mBAAL,CAAyBP,MAAzB,EAA+BxB,EAA/B,EAAmCY,WAAnC,EAAgDC,WAAhD;AACD;;AACDb,cAAAA,EAAE,CAACgC,OAAH,CAAW,IAAX;AACA/D,cAAAA,IAAI,CAACgE,KAAL;AACD;AACF,WA1CD;AA2CD;AAlFc,OAAjB;AAqFA,UAAIT,IAAI,GAAG;AACTG,QAAAA,KAAK,EAAElE,IAAI,CAAC4C,QAAL,EADE;AAET6B,QAAAA,MAAM,EAAE,IAFC;AAGTb,QAAAA,QAAQ,EAAE;AAHD,OAAX;;AAKA,UAAI3D,MAAM,CAACyE,YAAX,EAAyB;AACvB,YAAMC,SAAS,GAAG1E,MAAM,CAAC,cAAD,CAAxB;;AACA,aAAK,IAAIyD,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACiB,SAAS,CAAC3B,MAA1B,EAAkCU,CAAC,EAAnC,EAAuC;AACrC,cAAMkB,QAAQ,GAAGD,SAAS,CAACjB,CAAD,CAA1B;;AACA,eAAK,IAAMmB,UAAX,IAAyBD,QAAzB,EAAmC;AACjC,gBAAIE,SAAS,GAAG;AACdd,cAAAA,GAAG,EAAEa,UADS;AAEdX,cAAAA,KAAK,EAAEW,UAAU,CAACE,OAAX,CAAmB,OAAnB,EAA4B,EAA5B,CAFO;AAGdZ,cAAAA,OAAO,EAAEnE,IAAI,CAACiE,MAAL,EAHK;AAIdG,cAAAA,OAAO,EAAE,QAJK;AAKdC,cAAAA,KAAK,EAAE,IALO;AAMdT,cAAAA,QAAQ,EAAE;AANI,aAAhB;AAQA,gBAAIoB,aAAa,GAAG3F,EAAE,CAAC0E,IAAH,CAAQkB,OAAR,CAAgBC,IAAhB,CAAqBC,WAArB,CAAiCL,SAAjC,EAA4C,IAA5C,CAApB;AACA,gBAAMM,SAAS,GAAG/D,KAAK,CAACgE,KAAN,CAAYC,KAAZ,CAAkBC,WAAlB,GAAgCC,OAAhC,CAAwC,IAAxC,EAA8CC,MAAM,CAACC,IAAP,CAAY1F,IAAI,CAAC2F,gBAAL,EAAZ,EAAqC,CAArC,CAA9C,EAAuFd,UAAvF,CAAlB;;AACA,gBAAIO,SAAJ,EAAe;AACb,kBAAIQ,IAAI,GAAG,IAAIvE,KAAK,CAACC,SAAN,CAAgBsE,IAAhB,CAAqBC,IAAzB,CAA8BT,SAA9B,EAAyC,KAAKU,OAAL,EAAzC,CAAX;AACA,kBAAIC,WAAW,GAAG,IAAI1E,KAAK,CAACC,SAAN,CAAgBsE,IAAhB,CAAqBI,QAArB,CAA8BC,QAAlC,CAA2CL,IAA3C,CAAlB;AACAZ,cAAAA,aAAa,CAAC,aAAD,CAAb,GAA+Be,WAA/B;AACD;;AACDhC,YAAAA,IAAI,CAACH,QAAL,CAAcD,IAAd,CAAmBqB,aAAnB;AACA,gBAAMkB,MAAM,GAAGtB,QAAQ,CAACC,UAAD,CAAvB;;AACA,iBAAK,IAAIsB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,MAAM,CAAClD,MAAvB,EAA+BmD,CAAC,EAAhC,EAAoC;AAClC,kBAAIC,OAAO,GAAG;AACZpC,gBAAAA,GAAG,EAAEkC,MAAM,CAACC,CAAD,CADC;AAEZjC,gBAAAA,KAAK,EAAEgC,MAAM,CAACC,CAAD,CAFD;AAGZhC,gBAAAA,OAAO,EAAEnE,IAAI,CAACiE,MAAL,EAHG;AAIZG,gBAAAA,OAAO,EAAE,QAJG;AAKZC,gBAAAA,KAAK,EAAE;AALK,eAAd;AAOA,kBAAIgC,WAAW,GAAGhH,EAAE,CAAC0E,IAAH,CAAQkB,OAAR,CAAgBC,IAAhB,CAAqBC,WAArB,CAAiCiB,OAAjC,EAA0C,IAA1C,CAAlB;AACApB,cAAAA,aAAa,CAACjC,WAAd,GAA4BY,IAA5B,CAAiC0C,WAAjC;AACD;AACF;AACF;AACF;;AACD,UAAIC,KAAK,GAAGjH,EAAE,CAAC0E,IAAH,CAAQkB,OAAR,CAAgBC,IAAhB,CAAqBC,WAArB,CAAiCpB,IAAjC,EAAuC,IAAvC,CAAZ;AACAvD,MAAAA,IAAI,CAAC+F,QAAL,CAAcD,KAAd;AAEA,WAAKtF,WAAL,CAAiB,UAAjB,EAA6B,UAASwF,QAAT,EAAmB;AAC9C,YAAIC,aAAa,GAAG,KAAKhG,MAAL,CAAYM,YAAZ,EAApB;;AACA,YAAI0F,aAAa,CAACzD,MAAd,GAAuB,CAA3B,EAA8B;AAC5B;AACD;;AACD,YAAI0D,YAAY,GAAGD,aAAa,CAAC3C,OAAd,GAAwB,CAAxB,CAAnB;;AACA,YAAI4C,YAAY,CAAC/D,SAAb,IAA0B+D,YAAY,CAAC/D,SAAb,EAA9B,EAAwD;AACtD;AACD;;AACD,gBAAQ6D,QAAQ,CAACG,gBAAT,EAAR;AACE,eAAK,IAAL;AAAW;AACT,kBAAIC,eAAe,GAAG,IAAIvF,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBsF,eAA3B,CAA2CH,YAA3C,CAAtB;AACAE,cAAAA,eAAe,CAAC5F,WAAhB,CAA4B,cAA5B,EAA4C,UAAAiB,CAAC,EAAI;AAC/C,oBAAI6E,QAAQ,GAAG7E,CAAC,CAAC8E,OAAF,GAAY,UAAZ,CAAf;AACAL,gBAAAA,YAAY,CAACM,QAAb,CAAsBF,QAAtB;AACD,eAHD,EAGG,IAHH;AAIAF,cAAAA,eAAe,CAACK,MAAhB;AACAL,cAAAA,eAAe,CAACM,IAAhB;AACA;AACD;;AACD,eAAK,QAAL;AAAe;AACb,kBAAIC,QAAQ,GAAG,KAAK1G,MAAL,CAAYqC,QAAZ,GAAuBC,WAAvB,EAAf,CADa,CAEb;;;AACA,kBAAIqE,OAAO,GAAGD,QAAQ,CAACE,MAAT,CAAgBX,YAAhB,CAAd;;AACA,kBAAI,CAACU,OAAL,EAAc;AACZ;AACA,oBAAIE,EAAE,GAAGH,QAAQ,CAACrD,OAAT,EAAT;;AACA,qBAAK,IAAIJ,GAAC,GAAC,CAAX,EAAcA,GAAC,GAAC4D,EAAE,CAACtE,MAAnB,EAA2BU,GAAC,EAA5B,EAAgC;AAC9B,sBAAI6D,MAAM,GAAGD,EAAE,CAAC5D,GAAD,CAAf;AACA0D,kBAAAA,OAAO,GAAGG,MAAM,CAACxE,WAAP,GAAqBsE,MAArB,CAA4BX,YAA5B,CAAV;;AACA,sBAAIU,OAAJ,EAAa;AACX;AACD;AACF;AACF;;AACD;AACD;AA3BH;AA6BD,OAtCD,EAsCG,IAtCH;AAuCD,KAjMoD;AAmMrDI,IAAAA,UAAU,EAAE;AACVxH,MAAAA,IAAI,EAAE;AACJyH,QAAAA,KAAK,EAAE,uBADH;AAEJC,QAAAA,QAAQ,EAAE;AAFN,OADI;AAMVzH,MAAAA,MAAM,EAAE;AACNyH,QAAAA,QAAQ,EAAE;AADJ;AANE,KAnMyC;AA8MrDC,IAAAA,OAAO,EAAE;AACPlH,MAAAA,MAAM,EAAE,IADD;AAGP6D,MAAAA,mBAAmB,EAAE,6BAASP,IAAT,EAAexB,EAAf,EAAmBY,WAAnB,EAAgCC,WAAhC,EAA6C;AAChE,YAAMwE,YAAY,GAAG,KAAK/E,cAAL,CAAoBM,WAApB,CAArB;;AACA,YAAIyE,YAAJ,EAAkB;AAChB7D,UAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmB,EAAnB;AACD;;AACD,YAAI8D,OAAO,GAAGxI,EAAE,CAAC0E,IAAH,CAAQkB,OAAR,CAAgBC,IAAhB,CAAqBC,WAArB,CAAiCpB,IAAjC,EAAuC,IAAvC,CAAd;AACAxB,QAAAA,EAAE,CAACO,QAAH,GAAcC,WAAd,GACGY,IADH,CACQkE,OADR;;AAEA,YAAID,YAAJ,EAAkB;AAChB;AACA,cAAMxC,SAAS,GAAG/D,KAAK,CAACgE,KAAN,CAAYC,KAAZ,CAAkBC,WAAlB,GAAgCC,OAAhC,CAAwC,IAAxC,EAA8CpC,WAA9C,EAA2DyE,OAAO,CAAC5D,MAAR,GAAiBA,MAAjB,EAA3D,CAAlB;;AACA,cAAImB,SAAJ,EAAe;AACb,gBAAIQ,IAAI,GAAG,IAAIvE,KAAK,CAACC,SAAN,CAAgBsE,IAAhB,CAAqBC,IAAzB,CAA8BT,SAA9B,EAAyC,KAAKU,OAAL,EAAzC,CAAX;AACA,gBAAIC,WAAW,GAAG,IAAI1E,KAAK,CAACC,SAAN,CAAgBsE,IAAhB,CAAqBI,QAArB,CAA8BC,QAAlC,CAA2CL,IAA3C,CAAlB;AACAiC,YAAAA,OAAO,CAAC,aAAD,CAAP,GAAyB9B,WAAzB;AACD;AACF;AACF,OApBM;AAsBPlD,MAAAA,cAAc,EAAE,wBAASiF,SAAT,EAAoB;AAClC,YAAIC,QAAQ,GAAG,KAAf;AACA,YAAMC,IAAI,GAAG,KAAKC,SAAL,GAAiBD,IAA9B;;AACA,YAAIA,IAAI,CAACT,MAAT,EAAiB;AACf,cAAIS,IAAI,CAAC,QAAD,CAAJ,KAAmBF,SAAvB,EAAkC;AAChCC,YAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AACD,YAAMG,SAAS,GAAGJ,SAAS,KAAK,KAAKhC,OAAL,GAAe7B,MAAf,EAAhC;AACA,eAAOiE,SAAS,IAAIH,QAApB;AACD,OAhCM;AAkCP9E,MAAAA,YAAY,EAAE,sBAAS6E,SAAT,EAAoB;AAChC,YAAIK,OAAO,GAAG,KAAd;AACA,YAAMH,IAAI,GAAG,KAAKC,SAAL,GAAiBD,IAA9B;;AACA,YAAIA,IAAI,CAACI,IAAT,EAAe;AACb,cAAIJ,IAAI,CAAC,MAAD,CAAJ,KAAiBF,SAArB,EAAgC;AAC9BK,YAAAA,OAAO,GAAG,IAAV;AACD;AACF;;AACD,eAAOA,OAAP;AACD,OA3CM;AA6CPlH,MAAAA,wBAAwB,EAAE,oCAAW;AACnC;AACA,eAAO,KAAKoH,YAAL,GAAoBrF,MAApB,GAA6B,CAApC,EAAuC;AACrC,eAAKsF,SAAL,CAAe,CAAf;AACD;;AACD,YAAIC,aAAa,GAAG,KAAK9H,MAAL,CAAYM,YAAZ,EAApB;;AACA,YAAIwH,aAAa,CAACvF,MAAd,GAAuB,CAA3B,EAA8B;AAC5B;AACD;;AACD,YAAI0D,YAAY,GAAG6B,aAAa,CAACzE,OAAd,GAAwB,CAAxB,CAAnB;;AACA,YAAI4C,YAAY,CAACX,WAAjB,EAA8B;AAC5B,eAAKlF,IAAL,CAAU6F,YAAY,CAAC,aAAD,CAAtB;AACD;AACF;AA1DM;AA9M4C,GAAvD;AAvDArF,EAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBiH,YAAvB,CAAoChJ,aAApC,GAAoDA,aAApD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/* eslint no-underscore-dangle: [\"error\", { \"allowAfterThis\": true, \"allow\": [\"__willBeBranch\", \"__willBeLeaf\", \"__tree\"] }] */\n\n/**\n *   This widget contains a VirtualTree populated with InputsMapperTreeItems. It represents a mapping\n * of different inputs that can be either branches or leaves. Also implements a Drag&Drop mechanism.\n *\n *   When dropping an entry into the tree, this class asks the backend for further information for the given id,\n * if any, it renders it as a PropForm.\n *\n *   If the second argument in the constructor contains a defualt value entry, a by default entry will be added\n * to the VirtualTree.\n *\n * mapper: {\n *   displayOrder: 1,\n *   label: \"Material Settings\",\n *   description: \"Maps Model entities into Materials\",\n *   type: \"mapper\",\n *   maps: {\n *     branch: \"simcore/services/demodec/dynamic/itis/s4l/MaterialDB\",\n *     leaf: \"simcore/services/dynamic/modeler/webserver\"\n *   },\n *   defaultValue: [{\n *    \"Air-UUID\": [\n *       \"Background\"\n *      ]\n *   }]\n * }\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let inputsMapper = new qxapp.component.widget.InputsMapper(node, inputs[\"mapper\"]);\n *   this.getRoot().add(inputsMapper);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.widget.InputsMapper\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n    * @param node {qxapp.data.model.Node} Node owning the widget\n    * @param mapper {Object} mapper object provided by service's metadata\n  */\n  construct: function(node, mapper) {\n    this.base();\n\n    let widgetLayout = new qx.ui.layout.VBox(5);\n    this._setLayout(widgetLayout);\n\n    this.setNode(node);\n    this.setMapper(mapper);\n\n    let tree = this.__tree = new qx.ui.tree.VirtualTree(null, \"label\", \"children\").set({\n      openMode: \"none\"\n    });\n    this._add(tree, {\n      flex: 1\n    });\n    tree.getSelection().addListener(\"change\", this.__onTreeSelectionChanged, this);\n\n    let that = this;\n    tree.setDelegate({\n      createItem: () => new qxapp.component.widget.InputsMapperTreeItem(),\n      bindItem: (c, item, id) => {\n        c.bindDefaultProperties(item, id);\n        c.bindProperty(\"isDir\", \"isDir\", null, item, id);\n        c.bindProperty(\"isRoot\", \"isRoot\", null, item, id);\n      },\n      configureItem: item => {\n        item.set({\n          droppable: true\n        });\n        item.addListener(\"dragover\", e => {\n          item.set({\n            droppable: item.getIsDir()\n          });\n          let compatible = false;\n          if (e.supportsType(\"osparc-mapping\")) {\n            const from = e.getRelatedTarget();\n            const to = e.getCurrentTarget();\n            const fromKey = from.getNodeKey();\n            if (to.getIsRoot()) {\n              // HACK\n              if (from.getLabel() === \"20181113_Yoon-sun_V4_preview\") {\n                compatible = true;\n              } else {\n                // root\n                compatible = from.getIsDir() && that.__willBeBranch(fromKey);\n              }\n            } else if (from.getModel().getChildren && from.getModel().getChildren().length>0) {\n              // non root\n              compatible = true;\n            } else {\n              compatible = to.getIsDir() && !from.getIsDir() && that.__willBeLeaf(fromKey);\n            }\n          }\n          if (!compatible) {\n            e.preventDefault();\n          }\n        });\n        item.addListener(\"drop\", e => {\n          if (e.supportsType(\"osparc-mapping\")) {\n            const from = e.getRelatedTarget();\n            const fromNodeKey = from.getNodeKey();\n            const fromPortKey = from.getPortKey();\n            const to = e.getCurrentTarget();\n            if (from.getLabel() === \"20181113_Yoon-sun_V4_preview\") {\n              // HACK\n              const mat2ent = qxapp.dev.fake.mat2ent.Data.mat2ent(from.getLabel());\n              for (let i=0; i<mat2ent.length; i++) {\n                to.getModel().getChildren()\n                  .push(mat2ent[i]);\n              }\n            } else if (from.getModel().getChildren && from.getModel().getChildren().length>0) {\n              // allow folder drag&drop\n              let children = from.getModel().getChildren();\n              for (let i=0; i<children.length; i++) {\n                let child = children.toArray()[i];\n                if (!child.getChildren) {\n                  let data = {\n                    key: child.getKey(),\n                    label: child.getLabel(),\n                    nodeKey: from.getNodeKey(),\n                    portKey: from.getPortKey(),\n                    isDir: false\n                  };\n                  this.__createItemAndPush(data, to, fromNodeKey, fromPortKey);\n                }\n              }\n            } else {\n              let data = {\n                key: from.getModel(),\n                label: from.getLabel(),\n                nodeKey: from.getNodeKey(),\n                portKey: from.getPortKey(),\n                isDir: from.getIsDir()\n              };\n              this.__createItemAndPush(data, to, fromNodeKey, fromPortKey);\n            }\n            to.setOpen(true);\n            tree.focus();\n          }\n        });\n      }\n    });\n\n    let data = {\n      label: node.getLabel(),\n      isRoot: true,\n      children: []\n    };\n    if (mapper.defaultValue) {\n      const defValues = mapper[\"defaultValue\"];\n      for (let i=0; i<defValues.length; i++) {\n        const defValue = defValues[i];\n        for (const defValueId in defValue) {\n          let newBranch = {\n            key: defValueId,\n            label: defValueId.replace(\"-UUID\", \"\"),\n            nodeKey: node.getKey(),\n            portKey: \"myPort\",\n            isDir: true,\n            children: []\n          };\n          let newItemBranch = qx.data.marshal.Json.createModel(newBranch, true);\n          const itemProps = qxapp.store.Store.getInstance().getItem(null, Object.keys(node.getInputsDefault())[0], defValueId);\n          if (itemProps) {\n            let form = new qxapp.component.form.Auto(itemProps, this.getNode());\n            let propsWidget = new qxapp.component.form.renderer.PropForm(form);\n            newItemBranch[\"propsWidget\"] = propsWidget;\n          }\n          data.children.push(newItemBranch);\n          const values = defValue[defValueId];\n          for (let j=0; j<values.length; j++) {\n            let newLeaf = {\n              key: values[j],\n              label: values[j],\n              nodeKey: node.getKey(),\n              portKey: \"myPort\",\n              isDir: true\n            };\n            let newItemLeaf = qx.data.marshal.Json.createModel(newLeaf, true);\n            newItemBranch.getChildren().push(newItemLeaf);\n          }\n        }\n      }\n    }\n    let model = qx.data.marshal.Json.createModel(data, true);\n    tree.setModel(model);\n\n    this.addListener(\"keypress\", function(keyEvent) {\n      let treeSelection = this.__tree.getSelection();\n      if (treeSelection.length < 1) {\n        return;\n      }\n      let selectedItem = treeSelection.toArray()[0];\n      if (selectedItem.getIsRoot && selectedItem.getIsRoot()) {\n        return;\n      }\n      switch (keyEvent.getKeyIdentifier()) {\n        case \"F2\": {\n          let treeItemRenamer = new qxapp.component.widget.TreeItemRenamer(selectedItem);\n          treeItemRenamer.addListener(\"labelChanged\", e => {\n            let newLabel = e.getData()[\"newLabel\"];\n            selectedItem.setLabel(newLabel);\n          }, this);\n          treeItemRenamer.center();\n          treeItemRenamer.open();\n          break;\n        }\n        case \"Delete\": {\n          let branches = this.__tree.getModel().getChildren();\n          // branch\n          let removed = branches.remove(selectedItem);\n          if (!removed) {\n            // leaf\n            let br = branches.toArray();\n            for (let i=0; i<br.length; i++) {\n              let branch = br[i];\n              removed = branch.getChildren().remove(selectedItem);\n              if (removed) {\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n    }, this);\n  },\n\n  properties: {\n    node: {\n      check: \"qxapp.data.model.Node\",\n      nullable: false\n    },\n\n    mapper: {\n      nullable: false\n    }\n  },\n\n  members: {\n    __tree: null,\n\n    __createItemAndPush: function(data, to, fromNodeKey, fromPortKey) {\n      const willBeBranch = this.__willBeBranch(fromNodeKey);\n      if (willBeBranch) {\n        data[\"children\"] = [];\n      }\n      let newItem = qx.data.marshal.Json.createModel(data, true);\n      to.getModel().getChildren()\n        .push(newItem);\n      if (willBeBranch) {\n        // Hmmmm not sure about the double getKey :(\n        const itemProps = qxapp.store.Store.getInstance().getItem(null, fromPortKey, newItem.getKey().getKey());\n        if (itemProps) {\n          let form = new qxapp.component.form.Auto(itemProps, this.getNode());\n          let propsWidget = new qxapp.component.form.renderer.PropForm(form);\n          newItem[\"propsWidget\"] = propsWidget;\n        }\n      }\n    },\n\n    __willBeBranch: function(candidate) {\n      let isBranch = false;\n      const maps = this.getMapper().maps;\n      if (maps.branch) {\n        if (maps[\"branch\"] === candidate) {\n          isBranch = true;\n        }\n      }\n      const isDefault = candidate === this.getNode().getKey();\n      return isDefault || isBranch;\n    },\n\n    __willBeLeaf: function(candidate) {\n      let isLeave = false;\n      const maps = this.getMapper().maps;\n      if (maps.leaf) {\n        if (maps[\"leaf\"] === candidate) {\n          isLeave = true;\n        }\n      }\n      return isLeave;\n    },\n\n    __onTreeSelectionChanged: function() {\n      // remove all but the tree\n      while (this._getChildren().length > 1) {\n        this._removeAt(1);\n      }\n      let selectedItems = this.__tree.getSelection();\n      if (selectedItems.length < 1) {\n        return;\n      }\n      let selectedItem = selectedItems.toArray()[0];\n      if (selectedItem.propsWidget) {\n        this._add(selectedItem[\"propsWidget\"]);\n      }\n    }\n  }\n});\n"
  ]
}