{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/NodeDataManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "node",
    "set",
    "nodeDataManagerLayout",
    "layout",
    "VBox",
    "_setLayout",
    "treesLayout",
    "container",
    "Composite",
    "HBox",
    "_add",
    "flex",
    "nodeTreeLayout",
    "nodeReloadBtn",
    "_createChildControlImpl",
    "addListener",
    "__reloadNodeTree",
    "add",
    "nodeFilesTree",
    "__nodeFilesTree",
    "setDragMechnism",
    "__selectionChanged",
    "userTreeLayout",
    "userReloadBtn",
    "__userFilesTree",
    "resetCache",
    "__reloadUserTree",
    "userFilesTree",
    "setDropMechnism",
    "e",
    "fileMetadata",
    "getData",
    "addFileEntry",
    "selectedFileLayout",
    "__selectedFileLayout",
    "properties",
    "check",
    "members",
    "id",
    "control",
    "form",
    "Button",
    "label",
    "tr",
    "icon",
    "allowGrowX",
    "qxapp",
    "file",
    "FilesTree",
    "FileLabelWithActions",
    "alignY",
    "populateTree",
    "getNode",
    "getNodeId",
    "locationId",
    "selectedTree",
    "selectionData",
    "resetSelection",
    "getSelectedFile",
    "itemSelected",
    "component",
    "widget",
    "NodeDataManager"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;AAkBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wCAAhB,EAA0D;AACxDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADqC;;AAGxD;;;AAGAC,IAAAA,SAAS,EAAE,mBAASC,IAAT,EAAe;AAAA;;AACxB;AAEA,WAAKC,GAAL,CAAS;AACPD,QAAAA,IAAI,EAAEA;AADC,OAAT;AAIA,UAAME,qBAAqB,GAAG,IAAIb,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaC,IAAjB,CAAsB,EAAtB,CAA9B;;AACA,WAAKC,UAAL,CAAgBH,qBAAhB;;AAEA,UAAMI,WAAW,GAAG,IAAIjB,EAAE,CAACO,EAAH,CAAMW,SAAN,CAAgBC,SAApB,CAA8B,IAAInB,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaM,IAAjB,CAAsB,EAAtB,CAA9B,CAApB;;AACA,WAAKC,IAAL,CAAUJ,WAAV,EAAuB;AACrBK,QAAAA,IAAI,EAAE;AADe,OAAvB;;AAIA,UAAMC,cAAc,GAAG,IAAIvB,EAAE,CAACO,EAAH,CAAMW,SAAN,CAAgBC,SAApB,CAA8B,IAAInB,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaC,IAAjB,EAA9B,CAAvB;;AACA,UAAMS,aAAa,GAAG,KAAKC,uBAAL,CAA6B,cAA7B,CAAtB;;AACAD,MAAAA,aAAa,CAACE,WAAd,CAA0B,SAA1B,EAAqC,YAAW;AAC9C,aAAKC,gBAAL;AACD,OAFD,EAEG,IAFH;AAGAJ,MAAAA,cAAc,CAACK,GAAf,CAAmBJ,aAAnB;;AACA,UAAMK,aAAa,GAAG,KAAKC,eAAL,GAAuB,KAAKL,uBAAL,CAA6B,UAA7B,CAA7C;;AACAI,MAAAA,aAAa,CAACE,eAAd,CAA8B,IAA9B;AACAF,MAAAA,aAAa,CAACH,WAAd,CAA0B,kBAA1B,EAA8C,YAAM;AAClD,QAAA,KAAI,CAACM,kBAAL,CAAwB,MAAxB;AACD,OAFD,EAEG,IAFH;AAGAT,MAAAA,cAAc,CAACK,GAAf,CAAmBC,aAAnB,EAAkC;AAChCP,QAAAA,IAAI,EAAE;AAD0B,OAAlC;AAGAL,MAAAA,WAAW,CAACW,GAAZ,CAAgBL,cAAhB,EAAgC;AAC9BD,QAAAA,IAAI,EAAE;AADwB,OAAhC;AAIA,UAAMW,cAAc,GAAG,IAAIjC,EAAE,CAACO,EAAH,CAAMW,SAAN,CAAgBC,SAApB,CAA8B,IAAInB,EAAE,CAACO,EAAH,CAAMO,MAAN,CAAaC,IAAjB,EAA9B,CAAvB;;AACA,UAAMmB,aAAa,GAAG,KAAKT,uBAAL,CAA6B,cAA7B,CAAtB;;AACAS,MAAAA,aAAa,CAACR,WAAd,CAA0B,SAA1B,EAAqC,YAAW;AAC9C,aAAKS,eAAL,CAAqBC,UAArB;;AACA,aAAKC,gBAAL;AACD,OAHD,EAGG,IAHH;AAIAJ,MAAAA,cAAc,CAACL,GAAf,CAAmBM,aAAnB;;AACA,UAAMI,aAAa,GAAG,KAAKH,eAAL,GAAuB,KAAKV,uBAAL,CAA6B,UAA7B,CAA7C;;AACAa,MAAAA,aAAa,CAACC,eAAd,CAA8B,IAA9B;AACAD,MAAAA,aAAa,CAACZ,WAAd,CAA0B,kBAA1B,EAA8C,YAAM;AAClD,QAAA,KAAI,CAACM,kBAAL,CAAwB,MAAxB;AACD,OAFD,EAEG,IAFH;AAGAM,MAAAA,aAAa,CAACZ,WAAd,CAA0B,YAA1B,EAAwC,UAAAc,CAAC,EAAI;AAC3C,YAAMC,YAAY,GAAGD,CAAC,CAACE,OAAF,EAArB;;AACA,YAAID,YAAJ,EAAkB;AAChB,UAAA,KAAI,CAACN,eAAL,CAAqBQ,YAArB,CAAkCF,YAAlC;AACD;AACF,OALD,EAKG,IALH;AAMAR,MAAAA,cAAc,CAACL,GAAf,CAAmBU,aAAnB,EAAkC;AAChChB,QAAAA,IAAI,EAAE;AAD0B,OAAlC;AAGAL,MAAAA,WAAW,CAACW,GAAZ,CAAgBK,cAAhB,EAAgC;AAC9BX,QAAAA,IAAI,EAAE;AADwB,OAAhC;;AAIA,UAAMsB,kBAAkB,GAAG,KAAKC,oBAAL,GAA4B,KAAKpB,uBAAL,CAA6B,oBAA7B,CAAvD;;AACAmB,MAAAA,kBAAkB,CAAClB,WAAnB,CAA+B,aAA/B,EAA8C,UAAAc,CAAC,EAAI;AACjD,YAAMC,YAAY,GAAGD,CAAC,CAACE,OAAF,EAArB;;AACA,QAAA,KAAI,CAACf,gBAAL;;AACA,QAAA,KAAI,CAACU,gBAAL,CAAsBI,YAAY,CAAC,YAAD,CAAlC;AACD,OAJD,EAIG,IAJH;;AAMA,WAAKd,gBAAL;;AACA,WAAKU,gBAAL;AACD,KAzEuD;AA2ExDS,IAAAA,UAAU,EAAE;AACVnC,MAAAA,IAAI,EAAE;AACJoC,QAAAA,KAAK,EAAE;AADH;AADI,KA3E4C;AAiFxDC,IAAAA,OAAO,EAAE;AACPlB,MAAAA,eAAe,EAAE,IADV;AAEPK,MAAAA,eAAe,EAAE,IAFV;AAGPU,MAAAA,oBAAoB,EAAE,IAHf;AAKPpB,MAAAA,uBAAuB,EAAE,iCAASwB,EAAT,EAAa;AACpC,YAAIC,OAAJ;;AACA,gBAAQD,EAAR;AACE,eAAK,cAAL;AACEC,YAAAA,OAAO,GAAG,IAAIlD,EAAE,CAACO,EAAH,CAAM4C,IAAN,CAAWC,MAAf,GAAwBxC,GAAxB,CAA4B;AACpCyC,cAAAA,KAAK,EAAE,KAAKC,EAAL,CAAQ,QAAR,CAD6B;AAEpCC,cAAAA,IAAI,EAAE,gCAF8B;AAGpCC,cAAAA,UAAU,EAAE;AAHwB,aAA5B,CAAV;AAKA;;AACF,eAAK,UAAL;AACA,eAAK,UAAL;AACEN,YAAAA,OAAO,GAAG,IAAIO,KAAK,CAACC,IAAN,CAAWC,SAAf,EAAV;AACA;;AACF,eAAK,oBAAL;AACET,YAAAA,OAAO,GAAG,IAAIO,KAAK,CAACC,IAAN,CAAWE,oBAAf,GAAsChD,GAAtC,CAA0C;AAClDiD,cAAAA,MAAM,EAAE;AAD0C,aAA1C,CAAV;;AAGA,iBAAKxC,IAAL,CAAU6B,OAAV;;AACA;AAjBJ;;AAoBA,eAAOA,OAAO,6FAAyBD,EAAzB,CAAd;AACD,OA5BM;AA8BPtB,MAAAA,gBAAgB,EAAE,4BAAW;AAC3B,aAAKG,eAAL,CAAqBgC,YAArB,CAAkC,KAAKC,OAAL,GAAeC,SAAf,EAAlC;AACD,OAhCM;AAkCP3B,MAAAA,gBAAgB,EAAE,4BAA4B;AAAA,YAAnB4B,UAAmB,uEAAN,IAAM;;AAC5C,aAAK9B,eAAL,CAAqB2B,YAArB,CAAkC,IAAlC,EAAwCG,UAAxC;AACD,OApCM;AAsCPjC,MAAAA,kBAAkB,EAAE,4BAASkC,YAAT,EAAuB;AACzC,YAAIC,aAAa,GAAG,IAApB;;AACA,YAAID,YAAY,KAAK,MAArB,EAA6B;AAC3B,eAAKpC,eAAL,CAAqBsC,cAArB;;AACAD,UAAAA,aAAa,GAAG,KAAKhC,eAAL,CAAqBkC,eAArB,EAAhB;AACD,SAHD,MAGO;AACL,eAAKlC,eAAL,CAAqBiC,cAArB;;AACAD,UAAAA,aAAa,GAAG,KAAKrC,eAAL,CAAqBuC,eAArB,EAAhB;AACD;;AACD,YAAIF,aAAJ,EAAmB;AACjB,eAAKtB,oBAAL,CAA0ByB,YAA1B,CAAuCH,aAAa,CAAC,cAAD,CAApD,EAAsEA,aAAa,CAAC,QAAD,CAAnF;AACD;AACF;AAlDM;AAjF+C,GAA1D;AAnCAV,EAAAA,KAAK,CAACc,SAAN,CAAgBC,MAAhB,CAAuBC,eAAvB,CAAuCtE,aAAvC,GAAuDA,aAAvD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Widget that contains 2 FilesTree showing:\n * - data generated by the node\n * - data owned by the user\n * and a FileLabelWithActions for letting the user download and/or remove files.\n *\n *   It also provideds Drag&Drop mechanism for copying data from the node into user's data.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let nodeDataManager = new qxapp.component.widget.NodeDataManager(node);\n *   this.getRoot().add(nodeDataManager);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.widget.NodeDataManager\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n    * @param node {qxapp.data.model.Node} Node owning the widget\n  */\n  construct: function(node) {\n    this.base(arguments);\n\n    this.set({\n      node: node\n    });\n\n    const nodeDataManagerLayout = new qx.ui.layout.VBox(10);\n    this._setLayout(nodeDataManagerLayout);\n\n    const treesLayout = new qx.ui.container.Composite(new qx.ui.layout.HBox(10));\n    this._add(treesLayout, {\n      flex: 1\n    });\n\n    const nodeTreeLayout = new qx.ui.container.Composite(new qx.ui.layout.VBox());\n    const nodeReloadBtn = this._createChildControlImpl(\"reloadButton\");\n    nodeReloadBtn.addListener(\"execute\", function() {\n      this.__reloadNodeTree();\n    }, this);\n    nodeTreeLayout.add(nodeReloadBtn);\n    const nodeFilesTree = this.__nodeFilesTree = this._createChildControlImpl(\"nodeTree\");\n    nodeFilesTree.setDragMechnism(true);\n    nodeFilesTree.addListener(\"selectionChanged\", () => {\n      this.__selectionChanged(\"node\");\n    }, this);\n    nodeTreeLayout.add(nodeFilesTree, {\n      flex: 1\n    });\n    treesLayout.add(nodeTreeLayout, {\n      flex: 1\n    });\n\n    const userTreeLayout = new qx.ui.container.Composite(new qx.ui.layout.VBox());\n    const userReloadBtn = this._createChildControlImpl(\"reloadButton\");\n    userReloadBtn.addListener(\"execute\", function() {\n      this.__userFilesTree.resetCache();\n      this.__reloadUserTree();\n    }, this);\n    userTreeLayout.add(userReloadBtn);\n    const userFilesTree = this.__userFilesTree = this._createChildControlImpl(\"userTree\");\n    userFilesTree.setDropMechnism(true);\n    userFilesTree.addListener(\"selectionChanged\", () => {\n      this.__selectionChanged(\"user\");\n    }, this);\n    userFilesTree.addListener(\"fileCopied\", e => {\n      const fileMetadata = e.getData();\n      if (fileMetadata) {\n        this.__userFilesTree.addFileEntry(fileMetadata);\n      }\n    }, this);\n    userTreeLayout.add(userFilesTree, {\n      flex: 1\n    });\n    treesLayout.add(userTreeLayout, {\n      flex: 1\n    });\n\n    const selectedFileLayout = this.__selectedFileLayout = this._createChildControlImpl(\"selectedFileLayout\");\n    selectedFileLayout.addListener(\"fileDeleted\", e => {\n      const fileMetadata = e.getData();\n      this.__reloadNodeTree();\n      this.__reloadUserTree(fileMetadata[\"locationId\"]);\n    }, this);\n\n    this.__reloadNodeTree();\n    this.__reloadUserTree();\n  },\n\n  properties: {\n    node: {\n      check: \"qxapp.data.model.Node\"\n    }\n  },\n\n  members: {\n    __nodeFilesTree: null,\n    __userFilesTree: null,\n    __selectedFileLayout: null,\n\n    _createChildControlImpl: function(id) {\n      let control;\n      switch (id) {\n        case \"reloadButton\":\n          control = new qx.ui.form.Button().set({\n            label: this.tr(\"Reload\"),\n            icon: \"@FontAwesome5Solid/sync-alt/16\",\n            allowGrowX: false\n          });\n          break;\n        case \"nodeTree\":\n        case \"userTree\":\n          control = new qxapp.file.FilesTree();\n          break;\n        case \"selectedFileLayout\":\n          control = new qxapp.file.FileLabelWithActions().set({\n            alignY: \"middle\"\n          });\n          this._add(control);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n    __reloadNodeTree: function() {\n      this.__nodeFilesTree.populateTree(this.getNode().getNodeId());\n    },\n\n    __reloadUserTree: function(locationId = null) {\n      this.__userFilesTree.populateTree(null, locationId);\n    },\n\n    __selectionChanged: function(selectedTree) {\n      let selectionData = null;\n      if (selectedTree === \"user\") {\n        this.__nodeFilesTree.resetSelection();\n        selectionData = this.__userFilesTree.getSelectedFile();\n      } else {\n        this.__userFilesTree.resetSelection();\n        selectionData = this.__nodeFilesTree.getSelectedFile();\n      }\n      if (selectionData) {\n        this.__selectedFileLayout.itemSelected(selectionData[\"selectedItem\"], selectionData[\"isFile\"]);\n      }\n    }\n  }\n});\n"
  ]
}