{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/PlotlyWidget.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "elemId",
    "addListenerOnce",
    "__plotlyWrapper",
    "qxapp",
    "wrapper",
    "Plotly",
    "addListener",
    "e",
    "ready",
    "getData",
    "plotlyPlaceholder",
    "dom",
    "Element",
    "create",
    "bom",
    "element",
    "Attribute",
    "set",
    "Style",
    "getContentElement",
    "getDomElement",
    "appendChild",
    "createEmptyPlot",
    "fireDataEvent",
    "console",
    "debug",
    "init",
    "resize",
    "events",
    "members",
    "setData",
    "ids",
    "labels",
    "values",
    "tooltips",
    "title",
    "component",
    "widget",
    "PlotlyWidget"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;AAeAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qCAAhB,EAAuD;AACrDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADkC;;AAGrD;;;AAGAC,IAAAA,SAAS,EAAE,mBAASC,MAAT,EAAiB;AAAA;;AAC1B;AAEA,WAAKC,eAAL,CAAqB,QAArB,EAA+B,YAAM;AACnC,QAAA,KAAI,CAACC,eAAL,GAAuB,IAAIC,KAAK,CAACC,OAAN,CAAcC,MAAlB,EAAvB;;AACA,QAAA,KAAI,CAACH,eAAL,CAAqBI,WAArB,CAAkC,gBAAlC,EAAqD,UAAAC,CAAC,EAAI;AACxD,cAAIC,KAAK,GAAGD,CAAC,CAACE,OAAF,EAAZ;;AACA,cAAID,KAAJ,EAAW;AACT,gBAAIE,iBAAiB,GAAGrB,EAAE,CAACsB,GAAH,CAAOC,OAAP,CAAeC,MAAf,CAAsB,KAAtB,CAAxB;AACAxB,YAAAA,EAAE,CAACyB,GAAH,CAAOC,OAAP,CAAeC,SAAf,CAAyBC,GAAzB,CAA6BP,iBAA7B,EAAgD,IAAhD,EAAsDV,MAAtD;AACAX,YAAAA,EAAE,CAACyB,GAAH,CAAOC,OAAP,CAAeG,KAAf,CAAqBD,GAArB,CAAyBP,iBAAzB,EAA4C,OAA5C,EAAqD,MAArD;AACArB,YAAAA,EAAE,CAACyB,GAAH,CAAOC,OAAP,CAAeG,KAAf,CAAqBD,GAArB,CAAyBP,iBAAzB,EAA4C,QAA5C,EAAsD,MAAtD;;AACA,YAAA,KAAI,CAACS,iBAAL,GAAyBC,aAAzB,GACGC,WADH,CACeX,iBADf;;AAEA,YAAA,KAAI,CAACR,eAAL,CAAqBoB,eAArB,CAAqCtB,MAArC;;AACA,YAAA,KAAI,CAACuB,aAAL,CAAmB,mBAAnB,EAAwC,IAAxC;AACD,WATD,MASO;AACLC,YAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd;;AACA,YAAA,KAAI,CAACF,aAAL,CAAmB,mBAAnB,EAAwC,KAAxC;AACD;AACF,SAfD,EAeG,KAfH;;AAiBA,QAAA,KAAI,CAACrB,eAAL,CAAqBwB,IAArB;AACD,OApBD,EAoBG,IApBH;AAsBA,WAAKpB,WAAL,CAAiB,QAAjB,EAA2B,YAAW;AACpC,YAAI,KAAKJ,eAAT,EAA0B;AACxB,eAAKA,eAAL,CAAqByB,MAArB;AACD;AACF,OAJD,EAIG,IAJH;AAKD,KApCoD;AAsCrDC,IAAAA,MAAM,EAAE;AACN,2BAAqB;AADf,KAtC6C;AA0CrDC,IAAAA,OAAO,EAAE;AACP3B,MAAAA,eAAe,EAAE,IADV;AAGPyB,MAAAA,MAAM,EAAE,kBAAW;AACjB,aAAKzB,eAAL,CAAqByB,MAArB;AACD,OALM;AAOPG,MAAAA,OAAO,EAAE,iBAASC,GAAT,EAAcC,MAAd,EAAsBC,MAAtB,EAA8BC,QAA9B,EAAwCC,KAAxC,EAA+C;AACtD,aAAKjC,eAAL,CAAqB4B,OAArB,CAA6BC,GAA7B,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkDC,QAAlD,EAA4DC,KAA5D;AACD;AATM;AA1C4C,GAAvD;AAhCAhC,EAAAA,KAAK,CAACiC,SAAN,CAAgBC,MAAhB,CAAuBC,YAAvB,CAAoC9C,aAApC,GAAoDA,aAApD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Widget containing a Plotly dom element.\n *\n * Data for being plotted can be dynamically set adn rendered.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let plotlyWidget = new qxapp.component.widget.PlotlyWidget(\"elemId\");\n *   this.getRoot().add(plotlyWidget);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.widget.PlotlyWidget\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n    * @param elemId {String} Element id to set it as dom attribute\n  */\n  construct: function(elemId) {\n    this.base();\n\n    this.addListenerOnce(\"appear\", () => {\n      this.__plotlyWrapper = new qxapp.wrapper.Plotly();\n      this.__plotlyWrapper.addListener((\"plotlyLibReady\"), e => {\n        let ready = e.getData();\n        if (ready) {\n          let plotlyPlaceholder = qx.dom.Element.create(\"div\");\n          qx.bom.element.Attribute.set(plotlyPlaceholder, \"id\", elemId);\n          qx.bom.element.Style.set(plotlyPlaceholder, \"width\", \"100%\");\n          qx.bom.element.Style.set(plotlyPlaceholder, \"height\", \"100%\");\n          this.getContentElement().getDomElement()\n            .appendChild(plotlyPlaceholder);\n          this.__plotlyWrapper.createEmptyPlot(elemId);\n          this.fireDataEvent(\"plotlyWidgetReady\", true);\n        } else {\n          console.debug(\"plotly.js was not loaded\");\n          this.fireDataEvent(\"plotlyWidgetReady\", false);\n        }\n      }, this);\n\n      this.__plotlyWrapper.init();\n    }, this);\n\n    this.addListener(\"resize\", function() {\n      if (this.__plotlyWrapper) {\n        this.__plotlyWrapper.resize();\n      }\n    }, this);\n  },\n\n  events: {\n    \"plotlyWidgetReady\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    __plotlyWrapper: null,\n\n    resize: function() {\n      this.__plotlyWrapper.resize();\n    },\n\n    setData: function(ids, labels, values, tooltips, title) {\n      this.__plotlyWrapper.setData(ids, labels, values, tooltips, title);\n    }\n  }\n});\n"
  ]
}