{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/NodePorts.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxapp",
    "desktop",
    "PanelView",
    "construct",
    "node",
    "isInputModel",
    "setIsInputModel",
    "setNode",
    "_setLayout",
    "ui",
    "layout",
    "Grow",
    "getLabel",
    "bind",
    "properties",
    "check",
    "init",
    "nullable",
    "members",
    "getNodeId",
    "getNode",
    "getMetaData",
    "populatePortsData",
    "metaData",
    "getIsInputModel",
    "__createUIPorts",
    "outputs",
    "inputsDefault",
    "isInput",
    "ports",
    "isContainer",
    "Object",
    "keys",
    "length",
    "defaultNeuromanModels",
    "nodeOutputList",
    "component",
    "widget",
    "inputs",
    "NodeOutputListIcon",
    "setContent",
    "getOutputWidget",
    "portTree",
    "NodeOutputTree",
    "NodePorts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;AAeAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kCAAhB,EAAoD;AAClDC,IAAAA,MAAM,EAAEC,KAAK,CAACC,OAAN,CAAcC,SAD4B;;AAElD;;;;AAIAC,IAAAA,SAAS,EAAE,mBAASC,IAAT,EAAoC;AAAA,UAArBC,YAAqB,uEAAN,IAAM;AAC7C,WAAKC,eAAL,CAAqBD,YAArB;AACA,WAAKE,OAAL,CAAaH,IAAb;;AAEA,WAAKI,UAAL,CAAgB,IAAIf,EAAE,CAACgB,EAAH,CAAMC,MAAN,CAAaC,IAAjB,EAAhB;;AAEA,qDAAqBP,IAAI,CAACQ,QAAL,EAArB;AAEAR,MAAAA,IAAI,CAACS,IAAL,CAAU,OAAV,EAAmB,IAAnB,EAAyB,OAAzB;AACD,KAfiD;AAiBlDC,IAAAA,UAAU,EAAE;AACVT,MAAAA,YAAY,EAAE;AACZU,QAAAA,KAAK,EAAE,SADK;AAEZC,QAAAA,IAAI,EAAE,IAFM;AAGZC,QAAAA,QAAQ,EAAE;AAHE,OADJ;AAOVb,MAAAA,IAAI,EAAE;AACJW,QAAAA,KAAK,EAAE,uBADH;AAEJE,QAAAA,QAAQ,EAAE;AAFN;AAPI,KAjBsC;AA8BlDC,IAAAA,OAAO,EAAE;AAEPC,MAAAA,SAAS,EAAE,qBAAW;AACpB,eAAO,KAAKC,OAAL,GAAeD,SAAf,EAAP;AACD,OAJM;AAMPE,MAAAA,WAAW,EAAE,uBAAW;AACtB,eAAO,KAAKD,OAAL,GAAeC,WAAf,EAAP;AACD,OARM;AAUPC,MAAAA,iBAAiB,EAAE,6BAAW;AAC5B,YAAMC,QAAQ,GAAG,KAAKH,OAAL,GAAeC,WAAf,EAAjB;;AACA,YAAI,KAAKG,eAAL,EAAJ,EAA4B;AAC1B,eAAKC,eAAL,CAAqB,KAArB,EAA4BF,QAAQ,CAACG,OAArC;AACD,SAFD,MAEO,IAAIH,QAAQ,CAACI,aAAb,EAA4B;AACjC,eAAKF,eAAL,CAAqB,KAArB,EAA4BF,QAAQ,CAACI,aAArC;AACD;AACF,OAjBM;AAmBPF,MAAAA,eAAe,EAAE,yBAASG,OAAT,EAAkBC,KAAlB,EAAyB;AACxC;AACA,YAAI,CAAC,KAAKT,OAAL,GAAeU,WAAf,EAAD,IAAiCC,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,MAAnB,GAA4B,CAAjE,EAAoE;AAClE;AACD;;AACD,YAAIJ,KAAK,CAACK,qBAAV,EAAiC;AAC/B;AACA,cAAMC,cAAc,GAAG,IAAInC,KAAK,CAACoC,SAAN,CAAgBC,MAAhB,CAAuBC,MAAvB,CAA8BC,kBAAlC,CAAqD,KAAKnB,OAAL,EAArD,EAAqES,KAAK,CAACK,qBAA3E,EAAkG,uBAAlG,CAAvB;AACA,eAAKM,UAAL,CAAgBL,cAAc,CAACM,eAAf,EAAhB;AACD,SAJD,MAIO;AACL,cAAMC,QAAQ,GAAG,IAAI1C,KAAK,CAACoC,SAAN,CAAgBC,MAAhB,CAAuBC,MAAvB,CAA8BK,cAAlC,CAAiD,KAAKvB,OAAL,EAAjD,EAAiES,KAAjE,CAAjB;AACA,eAAKW,UAAL,CAAgBE,QAAhB;AACD;AACF;AAhCM;AA9ByC,GAApD;AAhCA1C,EAAAA,KAAK,CAACoC,SAAN,CAAgBC,MAAhB,CAAuBO,SAAvB,CAAiChD,aAAjC,GAAiDA,aAAjD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Widget that represents the output of an input node.\n * It creates a VBox with widgets representing each of the output ports of the node.\n * It can also create widget for representing default inputs (isInputModel = false).\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let nodePorts = new qxapp.component.widget.NodePorts(node, isInputModel);\n *   this.getRoot().add(nodePorts);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.widget.NodePorts\", {\n  extend: qxapp.desktop.PanelView,\n  /**\n   * @param node {qxapp.data.model.Node} Node owning the widget\n   * @param isInputModel {Boolean} false for representing defaultInputs\n   */\n  construct: function(node, isInputModel = true) {\n    this.setIsInputModel(isInputModel);\n    this.setNode(node);\n\n    this._setLayout(new qx.ui.layout.Grow());\n\n    this.base(arguments, node.getLabel());\n\n    node.bind(\"label\", this, \"title\");\n  },\n\n  properties: {\n    isInputModel: {\n      check: \"Boolean\",\n      init: true,\n      nullable: false\n    },\n\n    node: {\n      check: \"qxapp.data.model.Node\",\n      nullable: false\n    }\n  },\n\n  members: {\n\n    getNodeId: function() {\n      return this.getNode().getNodeId();\n    },\n\n    getMetaData: function() {\n      return this.getNode().getMetaData();\n    },\n\n    populatePortsData: function() {\n      const metaData = this.getNode().getMetaData();\n      if (this.getIsInputModel()) {\n        this.__createUIPorts(false, metaData.outputs);\n      } else if (metaData.inputsDefault) {\n        this.__createUIPorts(false, metaData.inputsDefault);\n      }\n    },\n\n    __createUIPorts: function(isInput, ports) {\n      // Always create ports if node is a container\n      if (!this.getNode().isContainer() && Object.keys(ports).length < 1) {\n        return;\n      }\n      if (ports.defaultNeuromanModels) {\n        // Maintaining NodeOutputListIcon for Neuroman\n        const nodeOutputList = new qxapp.component.widget.inputs.NodeOutputListIcon(this.getNode(), ports.defaultNeuromanModels, \"defaultNeuromanModels\");\n        this.setContent(nodeOutputList.getOutputWidget());\n      } else {\n        const portTree = new qxapp.component.widget.inputs.NodeOutputTree(this.getNode(), ports);\n        this.setContent(portTree);\n      }\n    }\n  }\n});\n"
  ]
}