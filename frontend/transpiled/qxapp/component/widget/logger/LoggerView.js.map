{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/logger/LoggerView.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "LOG_LEVEL",
    "debug",
    "info",
    "warning",
    "error",
    "Object",
    "freeze",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "workbench",
    "set",
    "_setLayout",
    "layout",
    "VBox",
    "filterToolbar",
    "__createFilterToolbar",
    "_add",
    "table",
    "__createTableLayout",
    "flex",
    "__messengerColors",
    "Set",
    "__createInitMsg",
    "__textFilterField",
    "addListener",
    "__applyFilters",
    "events",
    "properties",
    "logLevel",
    "apply",
    "nullable",
    "check",
    "init",
    "caseSensitive",
    "currentNodeId",
    "statics",
    "getLevelColorTag",
    "i",
    "length",
    "logString",
    "keys",
    "logNumber",
    "logColor",
    "qxapp",
    "theme",
    "Color",
    "colors",
    "logColorDef",
    "getNewColor",
    "luminanceBG",
    "utils",
    "Utils",
    "getColorLuminance",
    "luminanceText",
    "color",
    "getRandomColor",
    "Math",
    "abs",
    "members",
    "__currentNodeButton",
    "__logModel",
    "__logView",
    "toolbar",
    "ToolBar",
    "currentNodeButton",
    "form",
    "ToggleButton",
    "tr",
    "appearance",
    "e",
    "currectNodeClicked",
    "getData",
    "add",
    "Separator",
    "textFilterField",
    "TextField",
    "liveUpdate",
    "placeholder",
    "part",
    "Part",
    "group",
    "RadioGroup",
    "logLevelSet",
    "level",
    "data",
    "Permissions",
    "getInstance",
    "canDo",
    "label",
    "charAt",
    "toUpperCase",
    "slice",
    "button",
    "setLogLevel",
    "tableModel",
    "component",
    "widget",
    "logger",
    "RemoteTableModel",
    "custom",
    "tableColumnModel",
    "obj",
    "columnmodel",
    "Resize",
    "Table",
    "selectable",
    "statusBarVisible",
    "showCellFocusIndicator",
    "colModel",
    "getTableColumnModel",
    "setDataCellRenderer",
    "cellrenderer",
    "Html",
    "defaultCellStyle",
    "resizeBehavior",
    "getBehavior",
    "setWidth",
    "__currentNodeIdChanged",
    "newValue",
    "setValue",
    "checked",
    "getCurrentNodeId",
    "__nodeSelected",
    "nodeId",
    "getWorkbench",
    "node",
    "getNode",
    "getLabel",
    "msg",
    "__addLogs",
    "infos",
    "msgs",
    "warn",
    "newLabel",
    "nodeLabelChanged",
    "__updateTable",
    "nodeColor",
    "__getNodesColor",
    "msgColor",
    "LoggerView",
    "msgLogs",
    "msgLog",
    "push",
    "addRows",
    "reloadData",
    "nFilteredRows",
    "getFilteredRowCount",
    "scrollCellVisible",
    "item",
    "setFilterString",
    "getValue",
    "setFilterLogLevel",
    "getLogLevel"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Widget that shows a logging view.\n *\n * It consists of:\n * - a toolbar containing:\n *   - clear button\n *   - filter as you type textfiled\n *   - some log type filtering buttons\n * - log messages table\n *\n * Log messages have two inputs: \"Origin\" and \"Message\".\n *\n *   Depending on the log level, \"Origin\"'s color will change, also \"Message\"s coming from the same\n * origin will be rendered with the same color.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let loggerView = new qxapp.component.widget.logger.LoggerView(workbench);\n *   this.getRoot().add(loggerView);\n *   loggerView.info(null, \"Hello world\");\n * </pre>\n */\n\nconst LOG_LEVEL = [\n  {\n    debug: -1\n  }, {\n    info: 0\n  }, {\n    warning: 1\n  }, {\n    error: 2\n  }\n];\nObject.freeze(LOG_LEVEL);\n\nqx.Class.define(\"qxapp.component.widget.logger.LoggerView\", {\n  extend: qx.ui.core.Widget,\n\n  construct: function(workbench) {\n    this.base();\n\n    this.set({\n      workbench\n    });\n\n    this._setLayout(new qx.ui.layout.VBox());\n\n    const filterToolbar = this.__createFilterToolbar();\n    this._add(filterToolbar);\n\n    const table = this.__createTableLayout();\n    this._add(table, {\n      flex: 1\n    });\n\n    this.__messengerColors = new Set();\n\n    this.__createInitMsg();\n\n    this.__textFilterField.addListener(\"changeValue\", this.__applyFilters, this);\n  },\n\n  events: {},\n\n  properties: {\n    logLevel: {\n      apply : \"__applyFilters\",\n      nullable: false,\n      check : \"Number\",\n      init: LOG_LEVEL[0].debug\n    },\n\n    caseSensitive: {\n      nullable: false,\n      check : \"Boolean\",\n      init: false\n    },\n\n    workbench: {\n      check: \"qxapp.data.model.Workbench\",\n      nullable: false\n    },\n\n    currentNodeId: {\n      check: \"String\",\n      nullable: true,\n      apply: \"__currentNodeIdChanged\"\n    }\n  },\n\n  statics: {\n    getLevelColorTag: function(logLevel) {\n      for (let i=0; i<LOG_LEVEL.length; i++) {\n        const logString = Object.keys(LOG_LEVEL[i])[0];\n        const logNumber = LOG_LEVEL[i][logString];\n        if (logNumber === logLevel) {\n          const logColor = qxapp.theme.Color.colors[\"logger-\"+logString+\"-message\"];\n          return logColor;\n        }\n      }\n      const logColorDef = qxapp.theme.Color.colors[\"logger-info-message\"];\n      return logColorDef;\n    },\n\n    getNewColor: function() {\n      const luminanceBG = qxapp.utils.Utils.getColorLuminance(qxapp.theme.Color.colors[\"table-row-background-selected\"]);\n      let luminanceText = null;\n      let color = null;\n      do {\n        color = qxapp.utils.Utils.getRandomColor();\n        luminanceText = qxapp.utils.Utils.getColorLuminance(color);\n      } while (Math.abs(luminanceBG-luminanceText) < 0.4);\n      return color;\n    }\n  },\n\n  members: {\n    __currentNodeButton: null,\n    __textFilterField: null,\n    __logModel: null,\n    __logView: null,\n    __messengerColors: null,\n\n    __createFilterToolbar: function() {\n      const toolbar = new qx.ui.toolbar.ToolBar();\n\n      const currentNodeButton = this.__currentNodeButton = new qx.ui.form.ToggleButton(this.tr(\"This node\")).set({\n        appearance: \"toolbar-button\"\n      });\n      currentNodeButton.addListener(\"changeValue\", e => {\n        // this.currectNodeClicked(currentNodeButton.getValue());\n        this.currectNodeClicked(e.getData());\n      }, this);\n      toolbar.add(currentNodeButton);\n\n      toolbar.add(new qx.ui.toolbar.Separator());\n      const textFilterField = this.__textFilterField = new qx.ui.form.TextField().set({\n        appearance: \"toolbar-textfield\",\n        liveUpdate: true,\n        placeholder: this.tr(\"Filter\")\n      });\n      toolbar.add(textFilterField, {\n        flex: 1\n      });\n\n      const part = new qx.ui.toolbar.Part();\n      const group = new qx.ui.form.RadioGroup();\n      let logLevelSet = false;\n      for (let i=0; i<LOG_LEVEL.length; i++) {\n        const level = Object.keys(LOG_LEVEL[i])[0];\n        const logLevel = LOG_LEVEL[i][level];\n        if (level === \"debug\" && !qxapp.data.Permissions.getInstance().canDo(\"study.logger.debug.read\")) {\n          continue;\n        }\n        const label = level.charAt(0).toUpperCase() + level.slice(1);\n        const button = new qx.ui.form.ToggleButton(label).set({\n          appearance: \"toolbar-button\"\n        });\n        button.logLevel = logLevel;\n        group.add(button);\n        part.add(button);\n        if (!logLevelSet) {\n          this.setLogLevel(logLevel);\n          logLevelSet = true;\n        }\n      }\n      group.addListener(\"changeValue\", e => {\n        this.setLogLevel(e.getData().logLevel);\n      }, this);\n      toolbar.add(part);\n\n      return toolbar;\n    },\n\n    __createTableLayout: function() {\n      const tableModel = this.__logModel = new qxapp.component.widget.logger.RemoteTableModel();\n\n      const custom = {\n        tableColumnModel : function(obj) {\n          return new qx.ui.table.columnmodel.Resize(obj);\n        }\n      };\n\n      // table\n      const table = this.__logView = new qx.ui.table.Table(tableModel, custom).set({\n        selectable: true,\n        statusBarVisible: false,\n        showCellFocusIndicator: false\n      });\n      const colModel = table.getTableColumnModel();\n      colModel.setDataCellRenderer(0, new qx.ui.table.cellrenderer.Html());\n      colModel.setDataCellRenderer(1, new qxapp.ui.table.cellrenderer.Html().set({\n        defaultCellStyle: \"user-select: text\"\n      }));\n      let resizeBehavior = colModel.getBehavior();\n      resizeBehavior.setWidth(0, \"15%\");\n      resizeBehavior.setWidth(1, \"85%\");\n\n      this.__applyFilters();\n\n      return table;\n    },\n\n    __currentNodeIdChanged: function(newValue) {\n      this.__currentNodeButton.setValue(false);\n    },\n\n    currectNodeClicked: function(checked) {\n      const currentNodeId = this.getCurrentNodeId();\n      if (checked && currentNodeId !== \"root\") {\n        this.__nodeSelected(currentNodeId);\n      } else {\n        this.__nodeSelected();\n      }\n    },\n\n    __nodeSelected: function(nodeId) {\n      const workbench = this.getWorkbench();\n      const node = workbench.getNode(nodeId);\n      if (node) {\n        this.__textFilterField.setValue(node.getLabel());\n      } else {\n        this.__textFilterField.setValue(\"\");\n      }\n    },\n\n    debug: function(nodeId, msg = \"\") {\n      this.__addLogs(nodeId, [msg], LOG_LEVEL.debug);\n    },\n\n    info: function(nodeId, msg = \"\") {\n      this.__addLogs(nodeId, [msg], LOG_LEVEL.info);\n    },\n\n    infos: function(nodeId, msgs = [\"\"]) {\n      this.__addLogs(nodeId, msgs, LOG_LEVEL.info);\n    },\n\n    warn: function(nodeId, msg = \"\") {\n      this.__addLogs(nodeId, [msg], LOG_LEVEL.warning);\n    },\n\n    error: function(nodeId, msg = \"\") {\n      this.__addLogs(nodeId, [msg], LOG_LEVEL.error);\n    },\n\n    __addLogs: function(nodeId, msgs = [\"\"], logLevel = 0) {\n      let label = null;\n      if (nodeId === \"root\") {\n        label = \"Workbench\";\n      } else {\n        const workbench = this.getWorkbench();\n        const node = workbench.getNode(nodeId);\n        if (node) {\n          label = node.getLabel();\n          node.addListener(\"changeLabel\", e => {\n            const newLabel = e.getData();\n            this.__logModel.nodeLabelChanged(nodeId, newLabel);\n            this.__updateTable();\n          }, this);\n        } else {\n          return;\n        }\n      }\n\n      const nodeColor = this.__getNodesColor(nodeId);\n      const msgColor = qxapp.component.widget.logger.LoggerView.getLevelColorTag(logLevel);\n      const msgLogs = [];\n      for (let i=0; i<msgs.length; i++) {\n        const msgLog = {\n          nodeId,\n          label,\n          msg: msgs[i],\n          logLevel,\n          nodeColor,\n          msgColor\n        };\n        msgLogs.push(msgLog);\n      }\n      this.__logModel.addRows(msgLogs);\n\n      this.__updateTable();\n    },\n\n    __updateTable: function() {\n      this.__logModel.reloadData();\n      const nFilteredRows = this.__logModel.getFilteredRowCount();\n      this.__logView.scrollCellVisible(0, nFilteredRows);\n    },\n\n    __getNodesColor: function(nodeId) {\n      for (const item of this.__messengerColors) {\n        if (item[0] === nodeId) {\n          return item[1];\n        }\n      }\n      const color = qxapp.component.widget.logger.LoggerView.getNewColor();\n      this.__messengerColors.add([nodeId, color]);\n      return color;\n    },\n\n    __applyFilters: function() {\n      if (this.__logModel === null) {\n        return;\n      }\n\n      this.__logModel.setFilterString(this.__textFilterField.getValue());\n      this.__logModel.setFilterLogLevel(this.getLogLevel());\n      this.__logModel.reloadData();\n    },\n\n    __createInitMsg: function() {\n      const nodeId = null;\n      const msg = \"Logger initialized\";\n      this.debug(nodeId, msg);\n    }\n  }\n});\n"
  ]
}