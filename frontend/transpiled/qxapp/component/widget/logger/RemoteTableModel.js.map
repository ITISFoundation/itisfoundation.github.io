{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/logger/RemoteTableModel.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "model",
    "Remote",
    "construct",
    "setColumns",
    "__rawData",
    "properties",
    "filterLogLevel",
    "nullable",
    "check",
    "init",
    "filterString",
    "caseSensitive",
    "statics",
    "addColorTag",
    "msg",
    "color",
    "members",
    "__filteredData",
    "addRows",
    "newRows",
    "i",
    "length",
    "newRow",
    "qxapp",
    "component",
    "widget",
    "logger",
    "RemoteTableModel",
    "label",
    "nodeColor",
    "msgColor",
    "push",
    "nodeLabelChanged",
    "nodeId",
    "newLabel",
    "row",
    "clearTable",
    "rawLength",
    "removeRow",
    "reloadData",
    "getRawRowCount",
    "getFilteredRowCount",
    "_loadRowCount",
    "rowData",
    "__checkFilters",
    "__setRowCount",
    "_loadRowData",
    "firstRow",
    "lastRow",
    "__rowDataLoadded",
    "__filterByString",
    "searchString",
    "getFilterString",
    "isCaseSensitive",
    "toUpperCase",
    "undefined",
    "includes",
    "__filterByLogLevel",
    "logLevel",
    "show",
    "getFilterLogLevel",
    "showStrWho",
    "showStrWhat",
    "showLog",
    "number",
    "self",
    "_onRowCountLoaded",
    "data",
    "_onRowDataLoaded"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/* eslint no-underscore-dangle: \"off\" */\n\n/**\n * Remote table model for showing log messages\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let tableModel = this.__logModel = new qxapp.component.widget.logger.RemoteTableModel();\n *   tableModel.setColumns([\"Origin\", \"Message\"], [\"whoRich\", \"whatRich\"]);\n *   let custom = {\n *     tableColumnModel : function(obj) {\n *       return new qx.ui.table.columnmodel.Resize(obj);\n *     }\n *   };\n *   let table = new qx.ui.table.Table(tableModel, custom);\n *   this.getRoot().add(table);\n * </pre>\n */\n\n/**\n *\n * @asset(demobrowser/backend/remote_table.php)\n */\n\nqx.Class.define(\"qxapp.component.widget.logger.RemoteTableModel\", {\n\n  extend : qx.ui.table.model.Remote,\n\n  construct : function() {\n    this.base(arguments);\n\n    this.setColumns([\"Origin\", \"Message\"], [\"whoRich\", \"msgRich\"]);\n\n    this.__rawData = [];\n  },\n\n  properties: {\n    filterLogLevel: {\n      nullable: false,\n      check : \"Number\",\n      init: -1\n    },\n    filterString: {\n      nullable: true,\n      check : \"String\",\n      init: \"\"\n    },\n    caseSensitive: {\n      nullable: false,\n      check : \"Boolean\",\n      init: false\n    }\n  },\n\n  statics: {\n    addColorTag: function(msg, color) {\n      return (\"<font color=\" + color +\">\" + msg + \"</font>\");\n    }\n  },\n\n  members : {\n    __rawData: null,\n    __filteredData: null,\n\n    addRows: function(newRows) {\n      for (let i=0; i<newRows.length; i++) {\n        const newRow = newRows[i];\n        newRow[\"whoRich\"] = qxapp.component.widget.logger.RemoteTableModel.addColorTag(newRow.label, newRow.nodeColor);\n        newRow[\"msgRich\"] = qxapp.component.widget.logger.RemoteTableModel.addColorTag(newRow.msg, newRow.msgColor);\n        this.__rawData.push(newRow);\n      }\n    },\n\n    nodeLabelChanged: function(nodeId, newLabel) {\n      for (let i=0; i<this.__rawData.length; i++) {\n        const row = this.__rawData[i];\n        if (row.nodeId === nodeId) {\n          row.label = newLabel;\n          row[\"whoRich\"] = qxapp.component.widget.logger.RemoteTableModel.addColorTag(row.label, row.nodeColor);\n        }\n      }\n    },\n\n    clearTable: function() {\n      const rawLength = this.__rawData.length;\n      this.__rawData = [];\n      for (let i=rawLength-1; i>=0; i--) {\n        this.removeRow(i);\n      }\n      this.reloadData();\n    },\n\n    getRawRowCount: function() {\n      return this.__rawData.length;\n    },\n\n    getFilteredRowCount: function() {\n      return this.__filteredData.length;\n    },\n\n    // overloaded - called whenever the table requests the row count\n    _loadRowCount : function() {\n      this.__filteredData = [];\n      for (let i=0; i<this.__rawData.length; i++) {\n        const rowData = this.__rawData[i];\n        if (this.__checkFilters(rowData)) {\n          this.__filteredData.push(rowData);\n        }\n      }\n      this.__setRowCount(this.__filteredData.length);\n    },\n\n    _loadRowData : function(firstRow, lastRow) {\n      this.__rowDataLoadded(firstRow, lastRow);\n    },\n\n    __filterByString: function(msg) {\n      let searchString = this.getFilterString();\n      if (searchString === null || searchString === \"\") {\n        return true;\n      }\n      if (searchString && !this.isCaseSensitive()) {\n        searchString = searchString.toUpperCase();\n      }\n      if (msg !== null && msg !== undefined) {\n        if (!this.isCaseSensitive()) {\n          msg = msg.toUpperCase();\n        }\n        return msg.includes(searchString);\n      }\n      return false;\n    },\n\n    __filterByLogLevel: function(logLevel) {\n      const show = logLevel >= this.getFilterLogLevel();\n      return show;\n    },\n\n    __checkFilters: function(rowData) {\n      const showStrWho = this.__filterByString(rowData.label);\n      const showStrWhat = this.__filterByString(rowData.msg);\n      const showLog = this.__filterByLogLevel(rowData.logLevel);\n\n      return ((showStrWho || showStrWhat) && showLog);\n    },\n\n    // Fake the server localy\n    __setRowCount : function(number) {\n      var self = this;\n      self._onRowCountLoaded(number);\n    },\n\n    __rowDataLoadded : function(firstRow, lastRow) {\n      var self = this;\n      var data = [];\n      for (var i=firstRow; i<=lastRow; i++) {\n        data.push(this.__filteredData[i]);\n      }\n      self._onRowDataLoaded(data);\n    }\n  }\n});\n"
  ]
}