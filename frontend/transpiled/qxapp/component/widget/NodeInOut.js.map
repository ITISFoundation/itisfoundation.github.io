{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/NodeInOut.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "node",
    "setNode",
    "nodeInOutLayout",
    "layout",
    "VBox",
    "_setLayout",
    "set",
    "decorator",
    "atom",
    "__atom",
    "basic",
    "Atom",
    "rich",
    "center",
    "draggable",
    "droppable",
    "getChildControl",
    "font",
    "bom",
    "Font",
    "fromConfig",
    "qxapp",
    "theme",
    "fonts",
    "textAlign",
    "_add",
    "flex",
    "properties",
    "check",
    "nullable",
    "inputPort",
    "init",
    "outputPort",
    "events",
    "members",
    "getAtom",
    "getNodeId",
    "getNode",
    "getMetaData",
    "emptyPorts",
    "setInputPort",
    "setOutputPort",
    "getEdgePoint",
    "port",
    "nodeBounds",
    "getCurrentBounds",
    "x",
    "isInput",
    "y",
    "top",
    "height",
    "bounds",
    "getBounds",
    "cel",
    "getContentElement",
    "domeEle",
    "getDomElement",
    "left",
    "parseInt",
    "style",
    "_createUIPorts",
    "ports",
    "isContainer",
    "Object",
    "keys",
    "length",
    "__createUIPortConnections",
    "label",
    "uiPort",
    "forEach",
    "eventPair",
    "addListener",
    "e",
    "eData",
    "event",
    "nodeId",
    "fireDataEvent",
    "component",
    "widget",
    "NodeInOut"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Base class for NodeInput and NodeOutput\n */\n\nqx.Class.define(\"qxapp.component.widget.NodeInOut\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n    * @param node {qxapp.data.model.Node} Node owning the widget\n  */\n  construct: function(node) {\n    this.setNode(node);\n\n    this.base();\n\n    let nodeInOutLayout = new qx.ui.layout.VBox(10);\n    this._setLayout(nodeInOutLayout);\n\n    this.set({\n      decorator: \"main\"\n    });\n\n    let atom = this.__atom = new qx.ui.basic.Atom().set({\n      rich: true,\n      center: true,\n      draggable: true,\n      droppable: true\n    });\n    atom.getChildControl(\"label\").set({\n      font: qx.bom.Font.fromConfig(qxapp.theme.Font.fonts[\"title-16\"]),\n      textAlign: \"center\"\n    });\n\n    this._add(atom, {\n      flex: 1\n    });\n  },\n\n  properties: {\n    node: {\n      check: \"qxapp.data.model.Node\",\n      nullable: false\n    },\n\n    inputPort: {\n      init: null,\n      nullable: true\n    },\n\n    outputPort: {\n      init: null,\n      nullable: true\n    }\n  },\n\n  events: {\n    \"edgeDragStart\": \"qx.event.type.Data\",\n    \"edgeDragOver\": \"qx.event.type.Data\",\n    \"edgeDrop\": \"qx.event.type.Data\",\n    \"edgeDragEnd\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    __atom: null,\n\n    getAtom: function() {\n      return this.__atom;\n    },\n\n    getNodeId: function() {\n      return this.getNode().getNodeId();\n    },\n\n    getMetaData: function() {\n      return this.getNode().getMetaData();\n    },\n\n    emptyPorts: function() {\n      this.setInputPort(null);\n      this.setOutputPort(null);\n    },\n\n    getEdgePoint: function(port) {\n      const nodeBounds = this.getCurrentBounds();\n      if (nodeBounds === null) {\n        // not rendered yet\n        return null;\n      }\n      const x = port.isInput ? null : 0;\n      const y = nodeBounds.top + nodeBounds.height/2;\n      return [x, y];\n    },\n\n    getCurrentBounds: function() {\n      let bounds = this.getBounds();\n      let cel = this.getContentElement();\n      if (cel) {\n        let domeEle = cel.getDomElement();\n        if (domeEle) {\n          bounds.left = parseInt(domeEle.style.left);\n          bounds.top = parseInt(domeEle.style.top);\n        }\n      }\n      return bounds;\n    },\n\n    _createUIPorts: function(isInput, ports) {\n      // Always create ports if node is a container\n      if (!this.getNode().isContainer() && Object.keys(ports).length < 1) {\n        return;\n      }\n      this.__createUIPortConnections(this, isInput);\n      let label = {\n        isInput: isInput,\n        ui: this\n      };\n      label.ui.isInput = isInput;\n      isInput ? this.setInputPort(label) : this.setOutputPort(label);\n    },\n\n    __createUIPortConnections: function(uiPort, isInput) {\n      [\n        [\"dragstart\", \"edgeDragStart\"],\n        [\"dragover\", \"edgeDragOver\"],\n        [\"drop\", \"edgeDrop\"],\n        [\"dragend\", \"edgeDragEnd\"]\n      ].forEach(eventPair => {\n        uiPort.addListener(eventPair[0], e => {\n          const eData = {\n            event: e,\n            nodeId: this.getNodeId(),\n            isInput: isInput\n          };\n          this.fireDataEvent(eventPair[1], eData);\n        }, this);\n      }, this);\n    }\n  }\n});\n"
  ]
}