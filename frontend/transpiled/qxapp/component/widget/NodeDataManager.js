(function () {
  var $$dbClassInfo = {
    "dependsOn": {
      "qx.Class": {
        "usage": "dynamic",
        "require": true
      },
      "qx.ui.core.Widget": {
        "construct": true,
        "require": true
      },
      "qx.ui.layout.VBox": {
        "construct": true
      },
      "qx.ui.container.Composite": {
        "construct": true
      },
      "qx.ui.layout.HBox": {
        "construct": true
      },
      "qx.ui.form.Button": {},
      "qxapp.file.FilesTree": {},
      "qxapp.file.FileLabelWithActions": {}
    }
  };
  qx.Bootstrap.executePendingDefers($$dbClassInfo);

  /* ************************************************************************
  
     qxapp - the simcore frontend
  
     https://osparc.io
  
     Copyright:
       2018 IT'IS Foundation, https://itis.swiss
  
     License:
       MIT: https://opensource.org/licenses/MIT
  
     Authors:
       * Odei Maiz (odeimaiz)
  
  ************************************************************************ */

  /**
   * Widget that contains 2 FilesTree showing:
   * - data generated by the node
   * - data owned by the user
   * and a FileLabelWithActions for letting the user download and/or remove files.
   *
   *   It also provideds Drag&Drop mechanism for copying data from the node into user's data.
   *
   * *Example*
   *
   * Here is a little example of how to use the widget.
   *
   * <pre class='javascript'>
   *   let nodeDataManager = new qxapp.component.widget.NodeDataManager(node);
   *   this.getRoot().add(nodeDataManager);
   * </pre>
   */
  qx.Class.define("qxapp.component.widget.NodeDataManager", {
    extend: qx.ui.core.Widget,

    /**
      * @param node {qxapp.data.model.Node} Node owning the widget
    */
    construct: function construct(node) {
      var _this = this;

      qx.ui.core.Widget.constructor.call(this);
      this.set({
        node: node
      });
      var nodeDataManagerLayout = new qx.ui.layout.VBox(10);

      this._setLayout(nodeDataManagerLayout);

      var treesLayout = new qx.ui.container.Composite(new qx.ui.layout.HBox(10));

      this._add(treesLayout, {
        flex: 1
      });

      var nodeTreeLayout = new qx.ui.container.Composite(new qx.ui.layout.VBox());

      var nodeReloadBtn = this._createChildControlImpl("reloadButton");

      nodeReloadBtn.addListener("execute", function () {
        this.__reloadNodeTree();
      }, this);
      nodeTreeLayout.add(nodeReloadBtn);

      var nodeFilesTree = this.__nodeFilesTree = this._createChildControlImpl("nodeTree");

      nodeFilesTree.setDragMechnism(true);
      nodeFilesTree.addListener("selectionChanged", function () {
        _this.__selectionChanged("node");
      }, this);
      nodeTreeLayout.add(nodeFilesTree, {
        flex: 1
      });
      treesLayout.add(nodeTreeLayout, {
        flex: 1
      });
      var userTreeLayout = new qx.ui.container.Composite(new qx.ui.layout.VBox());

      var userReloadBtn = this._createChildControlImpl("reloadButton");

      userReloadBtn.addListener("execute", function () {
        this.__userFilesTree.resetCache();

        this.__reloadUserTree();
      }, this);
      userTreeLayout.add(userReloadBtn);

      var userFilesTree = this.__userFilesTree = this._createChildControlImpl("userTree");

      userFilesTree.setDropMechnism(true);
      userFilesTree.addListener("selectionChanged", function () {
        _this.__selectionChanged("user");
      }, this);
      userFilesTree.addListener("fileCopied", function (e) {
        var fileMetadata = e.getData();

        if (fileMetadata) {
          _this.__userFilesTree.addFileEntry(fileMetadata);
        }
      }, this);
      userTreeLayout.add(userFilesTree, {
        flex: 1
      });
      treesLayout.add(userTreeLayout, {
        flex: 1
      });

      var selectedFileLayout = this.__selectedFileLayout = this._createChildControlImpl("selectedFileLayout");

      selectedFileLayout.addListener("fileDeleted", function (e) {
        var fileMetadata = e.getData();

        _this.__reloadNodeTree();

        _this.__reloadUserTree(fileMetadata["locationId"]);
      }, this);

      this.__reloadNodeTree();

      this.__reloadUserTree();
    },
    properties: {
      node: {
        check: "qxapp.data.model.Node"
      }
    },
    members: {
      __nodeFilesTree: null,
      __userFilesTree: null,
      __selectedFileLayout: null,
      _createChildControlImpl: function _createChildControlImpl(id) {
        var control;

        switch (id) {
          case "reloadButton":
            control = new qx.ui.form.Button().set({
              label: this.tr("Reload"),
              icon: "@FontAwesome5Solid/sync-alt/16",
              allowGrowX: false
            });
            break;

          case "nodeTree":
          case "userTree":
            control = new qxapp.file.FilesTree();
            break;

          case "selectedFileLayout":
            control = new qxapp.file.FileLabelWithActions().set({
              alignY: "middle"
            });

            this._add(control);

            break;
        }

        return control || qxapp.component.widget.NodeDataManager.prototype._createChildControlImpl.base.call(this, id);
      },
      __reloadNodeTree: function __reloadNodeTree() {
        this.__nodeFilesTree.populateTree(this.getNode().getNodeId());
      },
      __reloadUserTree: function __reloadUserTree() {
        var locationId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        this.__userFilesTree.populateTree(null, locationId);
      },
      __selectionChanged: function __selectionChanged(selectedTree) {
        var selectionData = null;

        if (selectedTree === "user") {
          this.__nodeFilesTree.resetSelection();

          selectionData = this.__userFilesTree.getSelectedFile();
        } else {
          this.__userFilesTree.resetSelection();

          selectionData = this.__nodeFilesTree.getSelectedFile();
        }

        if (selectionData) {
          this.__selectedFileLayout.itemSelected(selectionData["selectedItem"], selectionData["isFile"]);
        }
      }
    }
  });
  qxapp.component.widget.NodeDataManager.$$dbClassInfo = $$dbClassInfo;
})();

//# sourceMappingURL=NodeDataManager.js.map?dt=1568886161109