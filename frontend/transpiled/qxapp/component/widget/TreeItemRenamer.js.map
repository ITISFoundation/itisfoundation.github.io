{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/widget/TreeItemRenamer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "window",
    "Window",
    "construct",
    "selectedItem",
    "oldLabel",
    "getLabel",
    "maxWidth",
    "minWidth",
    "labelWidth",
    "Math",
    "min",
    "max",
    "parseInt",
    "length",
    "set",
    "appearance",
    "layout",
    "HBox",
    "padding",
    "modal",
    "showMaximize",
    "showMinimize",
    "width",
    "__populateNodeLabelEditor",
    "events",
    "members",
    "labelEditor",
    "form",
    "TextField",
    "allowGrowX",
    "add",
    "flex",
    "addListener",
    "e",
    "focus",
    "setTextSelection",
    "getValue",
    "save",
    "Button",
    "newLabel",
    "setLabel",
    "data",
    "fireDataEvent",
    "close",
    "command",
    "Command",
    "execute",
    "dispose",
    "commandEsc",
    "qxapp",
    "component",
    "widget",
    "TreeItemRenamer"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n *   Window that shows a text field with the input item label\n * that can be used for renaming it\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let itemRenamer = new qxapp.component.widget.TreeItemRenamer(selectedItem);\n *   itemRenamer.addListener(\"labelChanged\", e => {\n *     const data = e.getData();\n *     const newLabel = data.newLabel;\n *     const nodeId = selectedItem.getNodeId();\n *     let node = this.getWorkbench().getNode(nodeId);\n *     node.setLabel(newLabel);\n *   }, this);\n *   itemRenamer.open();\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.widget.TreeItemRenamer\", {\n  extend: qx.ui.window.Window,\n\n  construct: function(selectedItem) {\n    this.base(arguments, \"Rename\");\n\n    const oldLabel = selectedItem.getLabel();\n    const maxWidth = 350;\n    const minWidth = 100;\n    const labelWidth = Math.min(Math.max(parseInt(oldLabel.length*4), minWidth), maxWidth);\n    this.set({\n      appearance: \"window-small-cap\",\n      layout: new qx.ui.layout.HBox(4),\n      padding: 2,\n      modal: true,\n      showMaximize: false,\n      showMinimize: false,\n      width: labelWidth\n    });\n    this.__populateNodeLabelEditor(selectedItem, labelWidth);\n  },\n\n  events: {\n    \"labelChanged\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    __populateNodeLabelEditor: function(selectedItem, labelWidth) {\n      const oldLabel = selectedItem.getLabel();\n\n      // Create a text field in which to edit the data\n      let labelEditor = new qx.ui.form.TextField(oldLabel).set({\n        allowGrowX: true,\n        minWidth: labelWidth\n      });\n      this.add(labelEditor, {\n        flex: 1\n      });\n\n      this.addListener(\"appear\", e => {\n        labelEditor.focus();\n        labelEditor.setTextSelection(0, labelEditor.getValue().length);\n      }, this);\n\n      // Create the \"Save\" button to close the cell editor\n      let save = new qx.ui.form.Button(\"Save\");\n      save.addListener(\"execute\", e => {\n        const newLabel = labelEditor.getValue();\n        selectedItem.setLabel(newLabel);\n        const data = {\n          newLabel: newLabel\n        };\n        this.fireDataEvent(\"labelChanged\", data);\n\n        this.close();\n      }, this);\n      this.add(save);\n\n      // Let user press Enter from the cell editor text field to finish.\n      let command = new qx.ui.command.Command(\"Enter\");\n      command.addListener(\"execute\", e => {\n        save.execute();\n        command.dispose();\n        command = null;\n      });\n\n      // Let user press Enter from the cell editor text field to finish.\n      let commandEsc = new qx.ui.command.Command(\"Esc\");\n      commandEsc.addListener(\"execute\", e => {\n        this.close();\n        commandEsc.dispose();\n        commandEsc = null;\n      });\n    }\n  }\n});\n"
  ]
}