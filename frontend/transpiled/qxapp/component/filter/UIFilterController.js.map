{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/filter/UIFilterController.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "statics",
    "registerFilter",
    "filterId",
    "getInstance",
    "registerContainer",
    "containerId",
    "container",
    "registerFilterContainer",
    "resetGroup",
    "groupId",
    "resetFilterGroup",
    "setContainerVisibility",
    "visibility",
    "setFilterContainerVisibility",
    "members",
    "__state",
    "__filters",
    "__filterContainers",
    "filter",
    "getFilterId",
    "getGroupId",
    "reset",
    "setVisibility",
    "__getInputMessageName",
    "suffix",
    "qxapp",
    "utils",
    "Utils",
    "capitalize",
    "__getOutputMessageName",
    "publish",
    "filterData",
    "data",
    "event",
    "message",
    "Bus",
    "dispatchByName",
    "component",
    "UIFilterController"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Ignacio Pascual (ignapas)\n\n************************************************************************ */\n\n/**\n * GUI filter controller. Stores the state of all grouped filters and dispatches it when they trigger a change.\n */\nqx.Class.define(\"qxapp.component.filter.UIFilterController\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  construct: function() {\n    this.base(arguments);\n  },\n\n  statics: {\n    registerFilter: function(filterId) {\n      this.getInstance().registerFilter(filterId);\n    },\n    registerContainer: function(containerId, container) {\n      this.getInstance().registerFilterContainer(containerId, container);\n    },\n    resetGroup: function(groupId) {\n      this.getInstance().resetFilterGroup(groupId);\n    },\n    setContainerVisibility: function(containerId, visibility) {\n      this.getInstance().setFilterContainerVisibility(containerId, visibility);\n    }\n  },\n\n  members: {\n    __state: null,\n    __filters: null,\n    __filterContainers: null,\n\n    /**\n     * Function called by the base filter class to register a filter when after creating it.\n     *\n     * @param {qxapp.component.filter.UIFilter} filter The filter to be registered.\n     */\n    registerFilter: function(filter) {\n      const filterId = filter.getFilterId();\n      const groupId = filter.getGroupId();\n      // Store filter reference for managing\n      this.__filters = this.__filters || {};\n      this.__filters[groupId] = this.__filters[groupId] || {};\n      this.__filters[groupId][filterId] = filter;\n    },\n\n    /**\n     * Function that registers a filter container for changing its visibility when required.\n     *\n     * @param {string} containerId Given id for the container.\n     * @param {qx.ui.core.Widget} container Container widget for the filters.\n     */\n    registerContainer: function(containerId, container) {\n      this.__filterContainers = this.__filterContainers || {};\n      this.__filterContainers[containerId] = container;\n    },\n\n    /**\n     * Function that calls the reset functions for all filters in a group.\n     *\n     * @param {string} groupId Id of the filter group to be reset.\n     */\n    resetGroup: function(groupId) {\n      if (this.__filters[groupId]) {\n        for (let filterId in this.__filters[groupId]) {\n          this.__filters[groupId][filterId].reset();\n        }\n      }\n    },\n\n    /**\n     * Function to set the visibility of a previously registered filter container.\n     *\n     * @param {string} containerId Id of the container to change the visiblity.\n     * @param {string} visibility New visibility setting for the container.\n     */\n    setContainerVisibility: function(containerId, visibility) {\n      if (this.__filterContainers[containerId]) {\n        this.__filterContainers[containerId].setVisibility(visibility);\n      }\n    },\n\n    __getInputMessageName: function(filterId, groupId, suffix = \"filter\") {\n      return qxapp.utils.Utils.capitalize(filterId, groupId, suffix);\n    },\n\n    __getOutputMessageName: function(groupId, suffix = \"filter\") {\n      return qxapp.utils.Utils.capitalize(groupId, suffix);\n    },\n\n    /**\n     * Function called when a filter state changes and it wants to publish those changes to trigger the filtering.\n     *\n     * @param {Object} filterData Mandatory data coming from the filter.\n     * @param {String} filterData.groupId Group id of the filter that changed.\n     * @param {String} filterData.filterId Filter id of the filter that changed.\n     * @param {Object} filterData.data Data contained by the filter.\n     */\n    publish: function(filterData) {\n      // Update state\n      const {\n        groupId,\n        filterId,\n        data\n      } = filterData;\n      this.__state = this.__state || {};\n      this.__state[groupId] = this.__state[groupId] || {};\n      this.__state[groupId][filterId] = data;\n      // Dispatch relevant message\n      qx.event.message.Bus.getInstance().dispatchByName(this.__getOutputMessageName(groupId), this.__state[groupId]);\n    }\n  }\n});\n"
  ]
}