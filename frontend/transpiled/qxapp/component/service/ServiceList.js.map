{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/service/ServiceList.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "groupId",
    "_setLayout",
    "layout",
    "Flow",
    "__filterGroup",
    "events",
    "properties",
    "appearance",
    "refine",
    "init",
    "model",
    "nullable",
    "check",
    "apply",
    "members",
    "__buttonGroup",
    "_applyModel",
    "_removeAll",
    "group",
    "form",
    "RadioGroup",
    "set",
    "allowEmptySelection",
    "toArray",
    "sort",
    "a",
    "b",
    "getName",
    "localeCompare",
    "forEach",
    "service",
    "button",
    "qxapp",
    "component",
    "ServiceJumbo",
    "subscribeToFilterGroup",
    "add",
    "_add",
    "addListener",
    "e",
    "fireDataEvent",
    "getServiceModel",
    "getKeyIdentifier",
    "dispatchEvent",
    "clone",
    "getSelected",
    "getSelection",
    "length",
    "isSelectionEmpty",
    "selectFirstVisible",
    "_hasChildren",
    "buttons",
    "_getChildren",
    "current",
    "i",
    "isVisible",
    "setSelection",
    "ServiceList"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;AAIAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qCAAhB,EAAuD;AACrDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADkC;;AAGrD;;;;;AAKAC,IAAAA,SAAS,EAAE,mBAASC,OAAT,EAAkB;AAC3B;;AACA,WAAKC,UAAL,CAAgB,IAAIZ,EAAE,CAACO,EAAH,CAAMM,MAAN,CAAaC,IAAjB,CAAsB,CAAtB,EAAyB,CAAzB,CAAhB;;AACA,UAAIH,OAAJ,EAAa;AACX,aAAKI,aAAL,GAAqBJ,OAArB;AACD;AACF,KAdoD;AAgBrDK,IAAAA,MAAM,EAAE;AACN,qBAAe,oBADT;AAEN,oBAAc;AAFR,KAhB6C;AAqBrDC,IAAAA,UAAU,EAAE;AACVC,MAAAA,UAAU,EAAE;AACVC,QAAAA,MAAM,EAAE,IADE;AAEVC,QAAAA,IAAI,EAAE;AAFI,OADF;AAKVC,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,KAAK,EAAE,eAFF;AAGLC,QAAAA,KAAK,EAAE;AAHF;AALG,KArByC;AAiCrDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,IADR;AAEPX,MAAAA,aAAa,EAAE,IAFR;AAIPY,MAAAA,WAAW,EAAE,qBAASN,KAAT,EAAgB;AAAA;;AAC3B,aAAKO,UAAL;;AACA,YAAMC,KAAK,GAAG,KAAKH,aAAL,GAAqB,IAAI1B,EAAE,CAACO,EAAH,CAAMuB,IAAN,CAAWC,UAAf,GAA4BC,GAA5B,CAAgC;AACjEC,UAAAA,mBAAmB,EAAE;AAD4C,SAAhC,CAAnC;AAGAZ,QAAAA,KAAK,CAACa,OAAN,GACGC,IADH,CACQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,CAACE,OAAF,GAAYC,aAAZ,CAA0BF,CAAC,CAACC,OAAF,EAA1B,CAAV;AAAA,SADR,EAEGE,OAFH,CAEW,UAAAC,OAAO,EAAI;AAClB,cAAMC,MAAM,GAAG,IAAIC,KAAK,CAACC,SAAN,CAAgBH,OAAhB,CAAwBI,YAA5B,CAAyCJ,OAAzC,CAAf;;AACA,cAAI,KAAI,CAAC1B,aAAL,KAAuB,IAA3B,EAAiC;AAC/B2B,YAAAA,MAAM,CAACI,sBAAP,CAA8B,KAAI,CAAC/B,aAAnC;AACD;;AACDc,UAAAA,KAAK,CAACkB,GAAN,CAAUL,MAAV;;AACA,UAAA,KAAI,CAACM,IAAL,CAAUN,MAAV;;AACAA,UAAAA,MAAM,CAACO,WAAP,CAAmB,QAAnB,EAA6B,UAAAC,CAAC,EAAI;AAChC,YAAA,KAAI,CAACC,aAAL,CAAmB,YAAnB,EAAiCT,MAAM,CAACU,eAAP,EAAjC;AACD,WAFD,EAEG,KAFH;AAGAV,UAAAA,MAAM,CAACO,WAAP,CAAmB,UAAnB,EAA+B,UAAAC,CAAC,EAAI;AAClC,gBAAIA,CAAC,CAACG,gBAAF,OAAyB,OAA7B,EAAsC;AACpC,cAAA,KAAI,CAACF,aAAL,CAAmB,YAAnB,EAAiCT,MAAM,CAACU,eAAP,EAAjC;AACD;AACF,WAJD,EAIG,KAJH;AAKD,SAjBH;AAkBAvB,QAAAA,KAAK,CAACoB,WAAN,CAAkB,aAAlB,EAAiC,UAAAC,CAAC;AAAA,iBAAI,KAAI,CAACI,aAAL,CAAmBJ,CAAC,CAACK,KAAF,EAAnB,CAAJ;AAAA,SAAlC,EAAqE,IAArE;AACD,OA5BM;;AA8BP;;;;;AAKAC,MAAAA,WAAW,EAAE,uBAAW;AACtB,YAAI,KAAK9B,aAAL,IAAsB,KAAKA,aAAL,CAAmB+B,YAAnB,GAAkCC,MAA5D,EAAoE;AAClE,iBAAO,KAAKhC,aAAL,CAAmB+B,YAAnB,GAAkC,CAAlC,EAAqCL,eAArC,EAAP;AACD;;AACD,eAAO,IAAP;AACD,OAxCM;;AA0CP;;;;;AAKAO,MAAAA,gBAAgB,EAAE,4BAAW;AAC3B,YAAI,KAAKjC,aAAL,IAAsB,IAA1B,EAAgC;AAAE;AAChC,iBAAO,IAAP;AACD;;AACD,eAAO,KAAKA,aAAL,CAAmB+B,YAAnB,GAAkCC,MAAlC,KAA6C,CAApD;AACD,OApDM;;AAsDP;;;AAGAE,MAAAA,kBAAkB,EAAE,8BAAW;AAC7B,YAAI,KAAKC,YAAL,EAAJ,EAAyB;AACvB,cAAMC,OAAO,GAAG,KAAKC,YAAL,EAAhB;;AACA,cAAIC,OAAO,GAAGF,OAAO,CAAC,CAAD,CAArB;AACA,cAAIG,CAAC,GAAG,CAAR;;AACA,iBAAOA,CAAC,GAACH,OAAO,CAACJ,MAAV,IAAoB,CAACM,OAAO,CAACE,SAAR,EAA5B,EAAiD;AAC/CF,YAAAA,OAAO,GAAGF,OAAO,CAACG,CAAC,EAAF,CAAjB;AACD;;AACD,cAAID,OAAO,CAACE,SAAR,EAAJ,EAAyB;AACvB,iBAAKxC,aAAL,CAAmByC,YAAnB,CAAgC,CAAC,KAAKJ,YAAL,GAAoBE,CAAC,GAAC,CAAtB,CAAD,CAAhC;AACD;AACF;AACF;AArEM;AAjC4C,GAAvD;AArBAtB,EAAAA,KAAK,CAACC,SAAN,CAAgBH,OAAhB,CAAwB2B,WAAxB,CAAoCjE,aAApC,GAAoDA,aAApD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Ignacio Pascual (ignapas)\n\n************************************************************************ */\n\n/**\n * This is a view to display the available services in a flowing fashion. Creates a ServiceJumbo button\n * for every service in the model and subscribes it to the filter group.\n */\nqx.Class.define(\"qxapp.component.service.ServiceList\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n   * If the optional parameter is given, the elements will be subscribed to the filter group of the given id.\n   *\n   * @param {String} [groupId] Id of the filter group the service Jumbo buttons will be subscribed to.\n   */\n  construct: function(groupId) {\n    this.base(arguments);\n    this._setLayout(new qx.ui.layout.Flow(5, 5));\n    if (groupId) {\n      this.__filterGroup = groupId;\n    }\n  },\n\n  events: {\n    \"changeValue\": \"qx.event.type.Data\",\n    \"serviceadd\": \"qx.event.type.Data\"\n  },\n\n  properties: {\n    appearance: {\n      refine: true,\n      init: \"service-browser\"\n    },\n    model: {\n      nullable: true,\n      check: \"qx.data.Array\",\n      apply: \"_applyModel\"\n    }\n  },\n\n  members: {\n    __buttonGroup: null,\n    __filterGroup: null,\n\n    _applyModel: function(model) {\n      this._removeAll();\n      const group = this.__buttonGroup = new qx.ui.form.RadioGroup().set({\n        allowEmptySelection: true\n      });\n      model.toArray()\n        .sort((a, b) => a.getName().localeCompare(b.getName()))\n        .forEach(service => {\n          const button = new qxapp.component.service.ServiceJumbo(service);\n          if (this.__filterGroup !== null) {\n            button.subscribeToFilterGroup(this.__filterGroup);\n          }\n          group.add(button);\n          this._add(button);\n          button.addListener(\"dbltap\", e => {\n            this.fireDataEvent(\"serviceadd\", button.getServiceModel());\n          }, this);\n          button.addListener(\"keypress\", e => {\n            if (e.getKeyIdentifier() === \"Enter\") {\n              this.fireDataEvent(\"serviceadd\", button.getServiceModel());\n            }\n          }, this);\n        });\n      group.addListener(\"changeValue\", e => this.dispatchEvent(e.clone()), this);\n    },\n\n    /**\n     * Public function to get the currently selected service.\n     *\n     * @return Returns the model of the selected service or null if selection is empty.\n     */\n    getSelected: function() {\n      if (this.__buttonGroup && this.__buttonGroup.getSelection().length) {\n        return this.__buttonGroup.getSelection()[0].getServiceModel();\n      }\n      return null;\n    },\n\n    /**\n     * Function checking if the selection is empty or not\n     *\n     * @return True if no item is selected, false if there one or more item selected.\n     */\n    isSelectionEmpty: function() {\n      if (this.__buttonGroup == null) { // eslint-disable-line no-eq-null\n        return true;\n      }\n      return this.__buttonGroup.getSelection().length === 0;\n    },\n\n    /**\n     * Function that selects the first visible button.\n     */\n    selectFirstVisible: function() {\n      if (this._hasChildren()) {\n        const buttons = this._getChildren();\n        let current = buttons[0];\n        let i = 1;\n        while (i<buttons.length && !current.isVisible()) {\n          current = buttons[i++];\n        }\n        if (current.isVisible()) {\n          this.__buttonGroup.setSelection([this._getChildren()[i-1]]);\n        }\n      }\n    }\n  }\n});\n"
  ]
}