{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/workbench/SvgWidget.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "svgLayerId",
    "addListenerOnce",
    "el",
    "getContentElement",
    "getDomElement",
    "bom",
    "element",
    "Attribute",
    "set",
    "__svgWrapper",
    "qxapp",
    "wrapper",
    "Svg",
    "addListener",
    "__edgesCanvas",
    "createEmptyCanvas",
    "fireDataEvent",
    "init",
    "events",
    "members",
    "__getControls",
    "x1",
    "y1",
    "x2",
    "y2",
    "offset",
    "x",
    "y",
    "drawCurve",
    "controls",
    "updateCurve",
    "curve",
    "removeCurve",
    "updateColor",
    "color",
    "component",
    "workbench",
    "SvgWidget"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Widget that provides a SVG painting layer that goes on top of the WorkbenchUI.\n *\n * In this layer arrows that represent internode connections are drawn.\n *\n * Also provides access to the SVG Wrapper.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let svgWidget = new qxapp.component.workbench.SvgWidget(\"SvgWidgetLayer\");\n *   this.getRoot().add(svgWidget);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.workbench.SvgWidget\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n    * @param svgLayerId {String} Element id to set it as dom attribute\n  */\n  construct: function(svgLayerId) {\n    this.base();\n    this.addListenerOnce(\"appear\", () => {\n      let el = this.getContentElement().getDomElement();\n      qx.bom.element.Attribute.set(el, \"id\", svgLayerId);\n      this.__svgWrapper = new qxapp.wrapper.Svg();\n      this.__svgWrapper.addListener((\"svgLibReady\"), () => {\n        this.__edgesCanvas = this.__svgWrapper.createEmptyCanvas(svgLayerId);\n        this.fireDataEvent(\"SvgWidgetReady\", true);\n      });\n      this.__svgWrapper.init();\n    });\n  },\n\n  events: {\n    \"SvgWidgetReady\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    __svgWrapper: null,\n    __edgesCanvas: null,\n\n    __getControls: function(x1, y1, x2, y2, offset = 60) {\n      return [{\n        x: x1,\n        y: y1\n      }, {\n        x: x1+offset,\n        y: y1\n      }, {\n        x: x2-offset,\n        y: y2\n      }, {\n        x: x2,\n        y: y2\n      }];\n    },\n\n    drawCurve: function(x1, y1, x2, y2) {\n      const controls = this.__getControls(x1, y1, x2, y2);\n      return this.__svgWrapper.drawCurve(this.__edgesCanvas, controls);\n    },\n\n    updateCurve: function(curve, x1, y1, x2, y2) {\n      const controls = this.__getControls(x1, y1, x2, y2);\n      this.__svgWrapper.updateCurve(curve, controls);\n    },\n\n    removeCurve: function(curve) {\n      this.__svgWrapper.removeCurve(curve);\n    },\n\n    updateColor: function(curve, color) {\n      this.__svgWrapper.updateColor(curve, color);\n    }\n  }\n});\n"
  ]
}