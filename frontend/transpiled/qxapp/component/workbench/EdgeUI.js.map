{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/workbench/EdgeUI.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "qxapp",
    "component",
    "filter",
    "MFilterable",
    "implement",
    "IFilterable",
    "construct",
    "edge",
    "representation",
    "setEdge",
    "setRepresentation",
    "subscribeToFilterGroup",
    "events",
    "properties",
    "check",
    "nullable",
    "init",
    "members",
    "getEdgeId",
    "getEdge",
    "_filter",
    "getRepresentation",
    "node",
    "style",
    "opacity",
    "_unfilter",
    "_shouldApplyFilter",
    "data",
    "text",
    "length",
    "tags",
    "_shouldReactToFilter",
    "workbench",
    "EdgeUI"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;AAcAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kCAAhB,EAAoD;AAClDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADkC;AAElDC,IAAAA,OAAO,EAAEC,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,WAFkB;AAGlDC,IAAAA,SAAS,EAAEJ,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBG,WAHgB;;AAKlD;;;;AAIAC,IAAAA,SAAS,EAAE,mBAASC,IAAT,EAAeC,cAAf,EAA+B;AACxC;AAEA,WAAKC,OAAL,CAAaF,IAAb;AACA,WAAKG,iBAAL,CAAuBF,cAAvB;AAEA,WAAKG,sBAAL,CAA4B,WAA5B;AACD,KAhBiD;AAkBlDC,IAAAA,MAAM,EAAE;AACN,sBAAgB;AADV,KAlB0C;AAsBlDC,IAAAA,UAAU,EAAE;AACVN,MAAAA,IAAI,EAAE;AACJO,QAAAA,KAAK,EAAE,uBADH;AAEJC,QAAAA,QAAQ,EAAE;AAFN,OADI;AAMVP,MAAAA,cAAc,EAAE;AACdQ,QAAAA,IAAI,EAAE;AADQ;AANN,KAtBsC;AAiClDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,qBAAW;AACpB,eAAO,KAAKC,OAAL,GAAeD,SAAf,EAAP;AACD,OAHM;AAKPE,MAAAA,OAAO,EAAE,mBAAW;AAClB,aAAKC,iBAAL,GAAyBC,IAAzB,CAA8BC,KAA9B,CAAoCC,OAApC,GAA8C,IAA9C;AACD,OAPM;AASPC,MAAAA,SAAS,EAAE,qBAAW;AACpB,aAAKJ,iBAAL,GAAyBC,IAAzB,CAA8BC,KAA9B,CAAoCC,OAApC,GAA8C,CAA9C;AACD,OAXM;AAaPE,MAAAA,kBAAkB,EAAE,4BAASC,IAAT,EAAe;AACjC,eAAOA,IAAI,CAACC,IAAL,IAAaD,IAAI,CAACC,IAAL,CAAUC,MAAV,GAAmB,CAAhC,IACLF,IAAI,CAACG,IAAL,IAAaH,IAAI,CAACG,IAAL,CAAUD,MADzB;AAED,OAhBM;AAkBPE,MAAAA,oBAAoB,EAAE,8BAASJ,IAAT,EAAe;AACnC,eAAO,IAAP;AACD;AApBM;AAjCyC,GAApD;AA/BA3B,EAAAA,KAAK,CAACC,SAAN,CAAgB+B,SAAhB,CAA0BC,MAA1B,CAAiCxC,aAAjC,GAAiDA,aAAjD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Object that owns the Edge data model and it's representation\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let edge = new qxapp.data.model.Edge(edgeId, node1Id, node2Id);\n *   let edgeRepresentation = svgWidget.drawCurve(x1, y1, x2, y2);\n *   let edgeUI = new qxapp.component.workbench.EdgeUI(edge, edgeRepresentation);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.workbench.EdgeUI\", {\n  extend: qx.core.Object,\n  include: qxapp.component.filter.MFilterable,\n  implement: qxapp.component.filter.IFilterable,\n\n  /**\n    * @param edge {qxapp.data.model.Edge} Edge owning the object\n    * @param representation {SVG Object} UI representation of the edge\n  */\n  construct: function(edge, representation) {\n    this.base();\n\n    this.setEdge(edge);\n    this.setRepresentation(representation);\n\n    this.subscribeToFilterGroup(\"workbench\");\n  },\n\n  events: {\n    \"edgeSelected\": \"qx.event.type.Data\"\n  },\n\n  properties: {\n    edge: {\n      check: \"qxapp.data.model.Edge\",\n      nullable: false\n    },\n\n    representation: {\n      init: null\n    }\n  },\n\n  members: {\n    getEdgeId: function() {\n      return this.getEdge().getEdgeId();\n    },\n\n    _filter: function() {\n      this.getRepresentation().node.style.opacity = 0.15;\n    },\n\n    _unfilter: function() {\n      this.getRepresentation().node.style.opacity = 1;\n    },\n\n    _shouldApplyFilter: function(data) {\n      return data.text && data.text.length > 1 ||\n        data.tags && data.tags.length;\n    },\n\n    _shouldReactToFilter: function(data) {\n      return true;\n    }\n  }\n});\n"
  ]
}