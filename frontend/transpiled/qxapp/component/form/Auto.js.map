{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/form/Auto.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "Form",
    "include",
    "locale",
    "MTranslation",
    "construct",
    "content",
    "node",
    "setNode",
    "__ctrlMap",
    "__ctrlLinkMap",
    "formCtrl",
    "__formCtrl",
    "data",
    "controller",
    "__boxCtrl",
    "__typeMap",
    "key",
    "__addField",
    "model",
    "__model",
    "createModel",
    "addListener",
    "e",
    "__settingData",
    "fireDataEvent",
    "getData",
    "properties",
    "check",
    "nullable",
    "events",
    "members",
    "validate",
    "reset",
    "getControl",
    "getControlLink",
    "__getData",
    "setData",
    "relax",
    "__setData",
    "setAccessLevel",
    "__setAccessLevel",
    "setSelectBoxData",
    "box",
    "length",
    "marshal",
    "Json",
    "label",
    "setModel",
    "getTarget",
    "resetSelection",
    "nodeUuid",
    "addLink",
    "output",
    "setEnabled",
    "upkey",
    "lang",
    "String",
    "firstUp",
    "setter",
    "value",
    "props",
    "constructor",
    "$$properties",
    "getter",
    "control",
    "setVisibility",
    "__setupDateField",
    "s",
    "addBindingOptions",
    "converter",
    "test",
    "d",
    "Date",
    "setTime",
    "parseInt",
    "d2",
    "getUTCFullYear",
    "getUTCMonth",
    "getUTCDate",
    "Type",
    "isDate",
    "UTC",
    "getFullYear",
    "getMonth",
    "getDate",
    "Math",
    "round",
    "getTime",
    "set",
    "dateFormat",
    "util",
    "format",
    "DateFormat",
    "dateValue",
    "defaultValue",
    "__setupTextArea",
    "widget",
    "minHeight",
    "setMinHeight",
    "__setupTextField",
    "__setupNumberField",
    "isNumber",
    "parseFloat",
    "__setupSpinner",
    "__setupSelectBox",
    "List",
    "setDelegate",
    "bindItem",
    "ctrl",
    "item",
    "index",
    "bindProperty",
    "cfg",
    "structure",
    "forEach",
    "sbModel",
    "__setupComboBox",
    "__setupBoolField",
    "__setupFileButton",
    "type",
    "match",
    "string",
    "integer",
    "number",
    "setup",
    "DateField",
    "TextField",
    "Spinner",
    "maximum",
    "minimum",
    "PasswordField",
    "TextArea",
    "CheckBox",
    "SelectBox",
    "ComboBox",
    "Error",
    "option",
    "add",
    "call",
    "filter",
    "RegExp",
    "placeholder",
    "description",
    "controlLink",
    "enabled",
    "isPortAvailable",
    "portId",
    "port",
    "getEnabled",
    "Object",
    "prototype",
    "hasOwnProperty",
    "toPortId",
    "fromNodeId",
    "fromPortId",
    "link",
    "workbench",
    "getNode",
    "getWorkbench",
    "fromNode",
    "fromNodeLabel",
    "getLabel",
    "getOutput",
    "fromPortLabel",
    "getKey",
    "includes",
    "setValue",
    "removeLink",
    "qxapp",
    "component",
    "Auto"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n   Copyright: 2013 OETIKER+PARTNER AG\n              2018 ITIS Foundation\n   License:   MIT\n   Authors:   Tobi Oetiker <tobi@oetiker.ch>\n   Utf8Check: äöü\n************************************************************************ */\n\n/**\n * Create a form. The argument to the form\n * widget defines the structure of the form.\n *\n * <pre class='javascript'>\n *   {\n *     key: {\n *       displayOrder: 5,\n *       label: \"Widget SelectBox Test\",\n *       description: \"Test Input for SelectBox\",\n *       defaultValue: \"dog\",\n *       type: \"string\",\n *       widget: {\n *         type: \"SelectBox\",\n *         structure: [{\n *           key: \"dog\",\n *           label: \"A Dog\"\n *         }, {\n *           key: \"cat\",\n *           label: \"A Cat\"\n *         }]\n *       }\n *     },\n *   }\n * </pre>\n *\n * The default widgets for data types are as follows:\n *     string: text\n *     integer: spinner\n *     bool:  checkBox\n *     number: text\n *     data:  file-upload/selection\n *\n * The following widget types are supported:\n *     selectBox: { structure: [ {key: x, label: y}, ...] },\n *     date: { }, // following unix tradition, dates are represented in epoc seconds\n *     password: {},\n *     textArea: {},\n *     hiddenText: {},\n *     checkBox: {},\n *     comboBox: {},\n *\n *\n * Populate the new form using the setData method, providing a map\n * with the required data.\n *\n */\n\nqx.Class.define(\"qxapp.component.form.Auto\", {\n  extend: qx.ui.form.Form,\n  include: [qx.locale.MTranslation],\n\n  /**\n     * @param structure {Array} form structure\n     */\n  construct: function(content, node) {\n    // node is necessary for creating links\n    if (node) {\n      this.setNode(node);\n    } else {\n      this.setNode(null);\n    }\n\n    this.base(arguments);\n    this.__ctrlMap = {};\n    this.__ctrlLinkMap = {};\n    let formCtrl = this.__formCtrl = new qx.data.controller.Form(null, this);\n    this.__boxCtrl = {};\n    this.__typeMap = {};\n    for (let key in content) {\n      this.__addField(content[key], key);\n    }\n    let model = this.__model = formCtrl.createModel(true);\n\n    model.addListener(\"changeBubble\", e => {\n      if (!this.__settingData) {\n        this.fireDataEvent(\"changeData\", this.getData());\n      }\n    },\n    this);\n  },\n\n  properties: {\n    node: {\n      check: \"qxapp.data.model.Node\",\n      nullable: true\n    }\n  },\n\n  events: {\n    /**\n     * fire when the form changes content and\n     * and provide access to the data\n     */\n    \"changeData\": \"qx.event.type.Data\",\n    \"linkAdded\": \"qx.event.type.Data\",\n    \"linkRemoved\": \"qx.event.type.Data\"\n  },\n\n  members: {\n    __boxCtrl: null,\n    __ctrlMap: null,\n    __ctrlLinkMap: null,\n    __formCtrl: null,\n    __model: null,\n    __settingData: false,\n    __typeMap: null,\n\n\n    /**\n     * Use normal Form validation to validate the content of the form\n     *\n     * @return {let} validation output\n     */\n    validate: function() {\n      return this.__formCtrl.validate();\n    },\n\n\n    /**\n     * Reset the form content\n     *\n     */\n    reset: function() {\n      this.__formCtrl.reset();\n    },\n\n\n    /**\n     * get a handle to the control with the given name\n     *\n     * @param key {let} key of the the field\n     * @return {let} control associated with the field\n     */\n    getControl: function(key) {\n      return this.__ctrlMap[key];\n    },\n\n    getControlLink: function(key) {\n      return this.__ctrlLinkMap[key];\n    },\n\n\n    /**\n     * fetch the data for this form\n     *\n     * @return {let} all data from the form\n     */\n    getData: function() {\n      return this.__getData(this.__model);\n    },\n\n    /**\n     * load new data into the data main model\n     *\n     * @param data {let} map with key value pairs to apply\n     * @param relax {let} ignore non existing keys\n     */\n    setData: function(data, relax) {\n      this.__setData(this.__model, data, relax);\n    },\n\n    /**\n     * set access level to the data main model\n     *\n     * @param data {let} map with key access level pairs to apply\n     */\n    setAccessLevel: function(data) {\n      this.__setAccessLevel(this.__model, data);\n    },\n\n\n    /**\n     * set the data in a selectbox\n     *\n     * @param box {let} selectbox name\n     * @param data {let} configuration of the box\n     */\n    setSelectBoxData: function(box, data) {\n      let model;\n      this.__settingData = true;\n\n      if (data.length == 0) {\n        model = qx.data.marshal.Json.createModel([{\n          label: \"\",\n          key: null\n        }]);\n      } else {\n        model = qx.data.marshal.Json.createModel(data);\n      }\n\n      this.__boxCtrl[box].setModel(model);\n      this.__boxCtrl[box].getTarget().resetSelection();\n      this.__settingData = false;\n    },\n\n\n    /**\n     * load new data into a model\n     * if relax is set unknown properties will be ignored\n     *\n     * @param model {let} TODOC\n     * @param data {let} TODOC\n     * @param relax {let} TODOC\n     */\n    __setData: function(model, data, relax) {\n      this.__settingData = true;\n\n      for (let key in data) {\n        if (data[key] !== null && typeof data[key] === \"object\" && data[key].nodeUuid) {\n          this.addLink(key, data[key].nodeUuid, data[key].output);\n          continue;\n        }\n        this.getControl(key).setEnabled(true);\n        let upkey = qx.lang.String.firstUp(key);\n        let setter = \"set\" + upkey;\n        let value = data[key];\n        if (relax && !model[setter]) {\n          continue;\n        }\n        model[setter](value);\n      }\n\n      this.__settingData = false;\n\n      /* only fire ONE if there was an attempt at change */\n\n      this.fireDataEvent(\"changeData\", this.getData());\n    },\n\n\n    /**\n     * turn a model object into a plain data structure\n     *\n     * @param model {let} TODOC\n     * @return {let} TODOC\n     */\n    __getData: function(model) {\n      let props = model.constructor.$$properties;\n      let data = {};\n\n      for (let key in props) {\n        let getter = \"get\" + qx.lang.String.firstUp(key);\n        data[key] = model[getter]();\n      }\n\n      return data;\n    },\n\n\n    /**\n     * set access level to the data model\n     *\n     * @param model {let} TODOC\n     * @param data {let} TODOC\n     */\n    __setAccessLevel: function(model, data) {\n      this.__settingData = true;\n\n      for (const key in data) {\n        const control = this.getControl(key);\n        if (control) {\n          switch (data[key]) {\n            case \"Invisible\": {\n              control.setEnabled(false);\n              control.setVisibility(\"excluded\");\n              break;\n            }\n            case \"ReadOnly\": {\n              control.setEnabled(false);\n              control.setVisibility(\"visible\");\n              break;\n            }\n            case \"ReadAndWrite\": {\n              control.setEnabled(true);\n              control.setVisibility(\"visible\");\n              break;\n            }\n          }\n        }\n      }\n\n      this.__settingData = false;\n\n      /* only fire ONE if there was an attempt at change */\n\n      this.fireDataEvent(\"changeData\", this.getData());\n    },\n\n    __setupDateField: function(s) {\n      this.__formCtrl.addBindingOptions(s.key,\n        { // model2target\n          converter: function(data) {\n            if (/^\\d+$/.test(String(data))) {\n              let d = new Date();\n              d.setTime(parseInt(data) * 1000);\n              let d2 = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), 0, 0, 0, 0);\n              return d2;\n            }\n            if (qx.lang.Type.isDate(data)) {\n              return data;\n            }\n            return null;\n          }\n        },\n        { // target2model\n          converter: function(data) {\n            if (qx.lang.Type.isDate(data)) {\n              let d = new Date(Date.UTC(data.getFullYear(), data.getMonth(), data.getDate(), 0, 0, 0, 0));\n              return Math.round(d.getTime()/1000);\n            }\n            return null;\n          }\n        }\n      );\n      if (!s.set) {\n        s.set = {};\n      }\n      s.set.dateFormat = new qx.util.format.DateFormat(\n        this[\"tr\"](\n          s.set.dateFormat ?\n            s.set.dateFormat :\n            \"dd.MM.yyyy\"\n        )\n      );\n      let dateValue = s.defaultValue;\n      if (dateValue !== null) {\n        if (typeof dateValue == \"number\") {\n          s.defaultValue = new Date(dateValue * 1000);\n        } else {\n          s.defaultValue = new Date(dateValue);\n        }\n      }\n    },\n    __setupTextArea: function(s, key, control) {\n      if (s.widget.minHeight) {\n        control.setMinHeight(s.widget.minHeight);\n      }\n      this.__setupTextField(s, key, control);\n    },\n    __setupTextField: function(s, key) {\n      this.__formCtrl.addBindingOptions(key,\n        { // model2target\n          converter: function(data) {\n            return String(data);\n          }\n        },\n        { // target2model\n          converter: function(data) {\n            return data;\n          }\n        }\n      );\n    },\n    __setupNumberField: function(s, key) {\n      if (!s.set) {\n        s.set = {};\n      }\n      if (s.defaultValue) {\n        s.set.value = qx.lang.Type.isNumber(s.defaultValue) ? String(s.defaultValue) : s.defaultValue;\n      } else {\n        s.set.value = String(0);\n      }\n      this.__formCtrl.addBindingOptions(key,\n        { // model2target\n          converter: function(data) {\n            if (qx.lang.Type.isNumber(data)) {\n              return String(data);\n            }\n            return data;\n          }\n        },\n        { // target2model\n          converter: function(data) {\n            return parseFloat(data);\n          }\n        }\n      );\n    },\n    __setupSpinner: function(s, key) {\n      if (!s.set) {\n        s.set = {};\n      }\n      if (s.defaultValue) {\n        s.set.value = parseInt(String(s.defaultValue));\n      } else {\n        s.set.value = 0;\n      }\n      this.__formCtrl.addBindingOptions(key,\n        { // model2target\n          converter: function(data) {\n            let d = String(data);\n            if (/^\\d+$/.test(d)) {\n              return parseInt(d);\n            }\n            return null;\n          }\n        },\n        { // target2model\n          converter: function(data) {\n            return parseInt(data);\n          }\n        }\n      );\n    },\n\n    __setupSelectBox: function(s, key, control) {\n      let controller = this.__boxCtrl[key] = new qx.data.controller.List(null, control, \"label\");\n      controller.setDelegate({\n        bindItem: function(ctrl, item, index) {\n          ctrl.bindProperty(\"key\", \"model\", null, item, index);\n          ctrl.bindProperty(\"label\", \"label\", null, item, index);\n        }\n      });\n      let cfg = s.widget;\n      if (cfg.structure) {\n        cfg.structure.forEach(function(item) {\n          item.label = item.label ? this[\"tr\"](item.label) : null;\n        }, this);\n      } else {\n        cfg.structure = [{\n          label: \"\",\n          key: null\n        }];\n      }\n      if (s.defaultValue) {\n        s.set.value = [s.defaultValue];\n      }\n      let sbModel = qx.data.marshal.Json.createModel(cfg.structure);\n      controller.setModel(sbModel);\n    },\n    __setupComboBox: function(s, key, control) {\n      let ctrl = this.__boxCtrl[key] = new qx.data.controller.List(null, control);\n      let cfg = s.cfg;\n      if (cfg.structure) {\n        cfg.structure.forEach(function(item) {\n          item = item ? this[\"tr\"](item):null;\n        }, this);\n      } else {\n        cfg.structure = [];\n      }\n      let sbModel = qx.data.marshal.Json.createModel(cfg.structure);\n      ctrl.setModel(sbModel);\n    },\n    __setupBoolField: function(s, key, control) {\n      if (!s.set) {\n        s.set = {};\n      }\n      this.__formCtrl.addBindingOptions(key,\n        { // model2target\n          converter: function(data) {\n            return data;\n          }\n        },\n        { // target2model\n          converter: function(data) {\n            return data;\n          }\n        }\n      );\n    },\n    __setupFileButton: function(s, key) {\n      this.__formCtrl.addBindingOptions(key,\n        { // model2target\n          converter: function(data) {\n            return String(data);\n          }\n        },\n        { // target2model\n          converter: function(data) {\n            return data;\n          }\n        }\n      );\n    },\n    __addField: function(s, key) {\n      if (s.defaultValue) {\n        if (!s.set) {\n          s.set = {};\n        }\n        s.set.value = s.defaultValue;\n      }\n\n      if (!s.widget) {\n        let type = s.type;\n        if (type.match(/^data:/)) {\n          type = \"data\";\n        }\n        s.widget = {\n          type: {\n            string: \"Text\",\n            integer: \"Spinner\",\n            number: \"Number\",\n            boolean: \"CheckBox\",\n            data: \"FileButton\"\n          }[type]\n        };\n      }\n      let control;\n      let setup;\n      switch (s.widget.type) {\n        case \"Date\":\n          control = new qx.ui.form.DateField();\n          setup = this.__setupDateField;\n          break;\n        case \"Text\":\n          control = new qx.ui.form.TextField();\n          setup = this.__setupTextField;\n          break;\n        case \"Number\":\n          control = new qx.ui.form.TextField();\n          setup = this.__setupNumberField;\n          break;\n        case \"Spinner\":\n          control = new qx.ui.form.Spinner();\n          control.set({\n            maximum: 10000,\n            minimum: -10000\n          });\n          setup = this.__setupSpinner;\n          break;\n        case \"Password\":\n          control = new qx.ui.form.PasswordField();\n          setup = this.__setupTextField;\n          break;\n        case \"TextArea\":\n          control = new qx.ui.form.TextArea();\n          setup = this.__setupTextArea;\n          break;\n        case \"CheckBox\":\n          control = new qx.ui.form.CheckBox();\n          setup = this.__setupBoolField;\n          break;\n        case \"SelectBox\":\n          control = new qx.ui.form.SelectBox();\n          setup = this.__setupSelectBox;\n          break;\n        case \"ComboBox\":\n          control = new qx.ui.form.ComboBox();\n          setup = this.__setupComboBox;\n          break;\n        case \"FileButton\":\n          control = new qx.ui.form.TextField();\n          setup = this.__setupFileButton;\n          break;\n        default:\n          throw new Error(\"unknown widget type \" + s.widget.type);\n      }\n      this.__ctrlMap[key] = control;\n      let option = {}; // could use this to pass on info to the form renderer\n      this.add(control, s.label ? this[\"tr\"](s.label):null, null, key, null, option);\n\n      setup.call(this, s, key, control);\n\n      if (s.set) {\n        if (s.set.filter) {\n          s.set.filter = RegExp(s.filter);\n        }\n        if (s.set.placeholder) {\n          s.set.placeholder = this[\"tr\"](s.set.placeholder);\n        }\n        if (s.set.label) {\n          s.set.label = this[\"tr\"](s.set.label);\n        }\n        control.set(s.set);\n      }\n      control.key = key;\n      control.description = s.description;\n      this.__ctrlMap[key] = control;\n\n      let controlLink = new qx.ui.form.TextField().set({\n        enabled: false\n      });\n      controlLink.key = key;\n      this.__ctrlLinkMap[key] = controlLink;\n    },\n\n    isPortAvailable: function(portId) {\n      const port = this.getControl(portId);\n      if (!port || !port.getEnabled() || Object.prototype.hasOwnProperty.call(port, \"link\")) {\n        return false;\n      }\n      return true;\n    },\n\n    addLink: function(toPortId, fromNodeId, fromPortId) {\n      if (!this.isPortAvailable(toPortId)) {\n        return false;\n      }\n      this.getControl(toPortId).setEnabled(false);\n      this.getControl(toPortId).link = {\n        nodeUuid: fromNodeId,\n        output: fromPortId\n      };\n\n      const workbench = this.getNode().getWorkbench();\n      const fromNode = workbench.getNode(fromNodeId);\n      const fromNodeLabel = fromNode.getLabel();\n      const port = fromNode.getOutput(fromPortId);\n      let fromPortLabel = port ? port.label : null;\n      if (fromNode.getKey().includes(\"/neuroman\")) {\n        // HACK: Only Neuroman should enter here\n        fromPortLabel = fromPortId;\n      }\n      if (fromNodeLabel && fromPortLabel) {\n        this.getControlLink(toPortId).setValue(\"Linked to \" + fromNodeLabel + \": \" + fromPortLabel);\n      } else {\n        this.getControlLink(toPortId).setValue(\"Linked to \" + fromNodeId + \": \" + fromPortId);\n      }\n\n      this.fireDataEvent(\"linkAdded\", toPortId);\n\n      return true;\n    },\n\n    removeLink: function(toPortId) {\n      this.getControl(toPortId).setEnabled(true);\n      if (\"link\" in this.getControl(toPortId)) {\n        delete this.getControl(toPortId).link;\n      }\n\n      this.fireDataEvent(\"linkRemoved\", toPortId);\n    }\n  }\n});\n"
  ]
}