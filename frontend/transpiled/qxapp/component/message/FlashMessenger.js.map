{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/component/message/FlashMessenger.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "__messages",
    "data",
    "Array",
    "__messageContainer",
    "ui",
    "container",
    "Composite",
    "layout",
    "VBox",
    "root",
    "Init",
    "getApplication",
    "getRoot",
    "add",
    "top",
    "__displayedMessagesCount",
    "__attachEventHandlers",
    "statics",
    "MAX_DISPLAYED",
    "members",
    "logAs",
    "message",
    "level",
    "logger",
    "log",
    "toUpperCase",
    "logMessage",
    "flash",
    "qxapp",
    "FlashMessage",
    "addListener",
    "__removeMessage",
    "push",
    "__showMessage",
    "remove",
    "resetDecorator",
    "getSizeHint",
    "width",
    "getWidth",
    "__updateContainerPosition",
    "wordCount",
    "getMessage",
    "split",
    "length",
    "readingTime",
    "Math",
    "max",
    "event",
    "Timer",
    "once",
    "indexOf",
    "setDecorator",
    "getItem",
    "messageWidth",
    "getBounds",
    "setLayoutProperties",
    "left",
    "round",
    "e",
    "getData",
    "added",
    "component",
    "FlashMessenger"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n     * Ignacio Pascual (ignapas)\n\n************************************************************************ */\n\n/**\n *   Singleton class that pops up a window showing a log message. The time the window is visible depends\n * on the length of the message. Also if a second message is added will be stacked to the previous one.\n *\n *   Depending on the log level (\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\") the background color of the window\n * will be different.\n *\n * *Example*\n *\n * Here is a little example of how to use the class.\n *\n * <pre class='javascript'>\n *   qxapp.component.message.FlashMessenger.getInstance().log(log);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.component.message.FlashMessenger\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  construct: function() {\n    this.base(arguments);\n    this.__messages = new qx.data.Array();\n\n    this.__messageContainer = new qx.ui.container.Composite(new qx.ui.layout.VBox(10));\n    const root = qx.core.Init.getApplication().getRoot();\n    root.add(this.__messageContainer, {\n      top: 10\n    });\n\n    this.__displayedMessagesCount = 0;\n\n    this.__attachEventHandlers();\n  },\n\n  statics: {\n    MAX_DISPLAYED: 3\n  },\n\n  members: {\n    __messages: null,\n    __messageContainer: null,\n    __displayedMessagesCount: null,\n\n    /**\n     * Public function to log a FlashMessage to the user.\n     *\n     * @param {String} message Message that the message will show.\n     * @param {String=\"INFO\",\"DEBUG\",\"WARNING\",\"ERROR\"} level Level of the warning. The color of the badge will change accordingly.\n     * @param {*} logger IDK\n     */\n    logAs: function(message, level=\"INFO\", logger=null) {\n      this.log({\n        message: message,\n        level: level.toUpperCase(),\n        logger: logger\n      });\n    },\n\n    /**\n     * Public function to log a FlashMessage to the user.\n     *\n     * @param {Object} logMessage Constructed message to log.\n     * @param {String} logMessage.message Message that the message will show.\n     * @param {String=\"INFO\",\"DEBUG\",\"WARNING\",\"ERROR\"} logMessage.level Level of the warning. The color of the badge will change accordingly.\n     * @param {*} logMessage.logger IDK\n     */\n    log: function(logMessage) {\n      let message = logMessage.message;\n      const level = logMessage.level.toUpperCase(); // \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"\n      let logger = logMessage.logger;\n      if (logger) {\n        message = logger + \": \" + message;\n      }\n\n      const flash = new qxapp.ui.message.FlashMessage(message, level);\n      flash.addListener(\"closeMessage\", () => this.__removeMessage(flash), this);\n      this.__messages.push(flash);\n    },\n\n    /**\n     * Private method to show a message to the user. It will stack it on the previous ones.\n     *\n     * @param {qxapp.ui.message.FlashMessage} message FlassMessage element to show.\n     */\n    __showMessage: function(message) {\n      this.__messages.remove(message);\n      this.__messageContainer.resetDecorator();\n      this.__messageContainer.add(message);\n      const {\n        width\n      } = message.getSizeHint();\n      if (this.__displayedMessagesCount === 0 || width > this.__messageContainer.getWidth()) {\n        this.__updateContainerPosition(width);\n      }\n      this.__displayedMessagesCount++;\n\n      const wordCount = message.getMessage().split(\" \").length;\n      const readingTime = Math.max(5500, wordCount*370); // An average reader takes 300ms to read a word\n      qx.event.Timer.once(() => this.__removeMessage(message), this, readingTime);\n    },\n\n    /**\n     * Private method to remove a message. If there are still messages in the queue, it will show the next available one.\n     *\n     * @param {qxapp.ui.message.FlashMessage} message FlassMessage element to remove.\n     */\n    __removeMessage: function(message) {\n      if (this.__messageContainer.indexOf(message) > -1) {\n        this.__displayedMessagesCount--;\n        this.__messageContainer.setDecorator(\"flash-container-transitioned\");\n        this.__messageContainer.remove(message);\n        qx.event.Timer.once(() => {\n          if (this.__messages.length) {\n            // There are still messages to show\n            this.__showMessage(this.__messages.getItem(0));\n          }\n        }, this, 200);\n      }\n    },\n\n    /**\n     * Function to re-position the message container according to the next message size, or its own size, if the previous is missing.\n     *\n     * @param {Integer} messageWidth Size of the next message to add in pixels.\n     */\n    __updateContainerPosition: function(messageWidth) {\n      const width = messageWidth || this.__messageContainer.getSizeHint().width;\n      const root = qx.core.Init.getApplication().getRoot();\n      if (root && root.getBounds()) {\n        this.__messageContainer.setLayoutProperties({\n          left: Math.round((root.getBounds().width - width) / 2)\n        });\n      }\n    },\n\n    __attachEventHandlers: function() {\n      this.__messages.addListener(\"change\", e => {\n        const data = e.getData();\n        if (data.type === \"add\") {\n          if (this.__displayedMessagesCount < this.self().MAX_DISPLAYED) {\n            this.__showMessage(data.added[0]);\n          }\n        }\n      }, this);\n    }\n  }\n});\n"
  ]
}