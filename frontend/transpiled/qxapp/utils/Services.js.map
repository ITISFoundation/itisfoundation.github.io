{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/utils/Services.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "getTypes",
    "getCategories",
    "convertArrayToObject",
    "servicesArray",
    "services",
    "i",
    "length",
    "service",
    "Object",
    "prototype",
    "hasOwnProperty",
    "call",
    "key",
    "version",
    "convertObjectToArray",
    "servicesObject",
    "serviceKey",
    "serviceVersions",
    "serviceVersion",
    "push",
    "getFromObject",
    "getFromArray",
    "getVersions",
    "versions",
    "concat",
    "keys",
    "sort",
    "qxapp",
    "utils",
    "Utils",
    "compareVersionNumbers",
    "getLatest",
    "Services",
    "isServiceInList",
    "listOfServices",
    "serveiceKey",
    "filterOutUnavailableGroups",
    "filteredServices",
    "allIn",
    "innerServices",
    "innerService"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n *   Collection of methods for dealing with services data type convertions, extract\n * specific information.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let latestSrv = qxapp.utils.Services.getLatest(services, serviceKey);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.utils.Services\", {\n  type: \"static\",\n\n  statics: {\n    getTypes: function() {\n      return [\n        \"computational\",\n        \"dynamic\"\n      ];\n    },\n\n    getCategories: function() {\n      return [\n        \"data\",\n        \"modeling\",\n        \"simulator\",\n        \"solver\",\n        \"postpro\",\n        \"notebook\"\n      ];\n    },\n\n    convertArrayToObject: function(servicesArray) {\n      let services = {};\n      for (let i = 0; i < servicesArray.length; i++) {\n        const service = servicesArray[i];\n        if (!Object.prototype.hasOwnProperty.call(services, service.key)) {\n          services[service.key] = {};\n        }\n        if (!Object.prototype.hasOwnProperty.call(services[service.key], service.version)) {\n          services[service.key][service.version] = {};\n        }\n        services[service.key][service.version] = service;\n      }\n      return services;\n    },\n\n    convertObjectToArray: function(servicesObject) {\n      let services = [];\n      for (const serviceKey in servicesObject) {\n        const serviceVersions = servicesObject[serviceKey];\n        for (const serviceVersion in serviceVersions) {\n          services.push(serviceVersions[serviceVersion]);\n        }\n      }\n      return services;\n    },\n\n    getFromObject: function(services, key, version) {\n      if (key in services) {\n        const serviceVersions = services[key];\n        if (version in serviceVersions) {\n          return serviceVersions[version];\n        }\n      }\n      return null;\n    },\n\n    getFromArray: function(services, key, version) {\n      for (let i=0; i<services.length; i++) {\n        if (services[i].key === key && services[i].version === version) {\n          return services[i];\n        }\n      }\n      return null;\n    },\n\n    getVersions: function(services, key) {\n      let versions = [];\n      if (key in services) {\n        const serviceVersions = services[key];\n        versions = versions.concat(Object.keys(serviceVersions));\n        versions.sort(qxapp.utils.Utils.compareVersionNumbers);\n      }\n      return versions;\n    },\n\n    getLatest: function(services, key) {\n      if (key in services) {\n        const versions = qxapp.utils.Services.getVersions(services, key);\n        return services[key][versions[versions.length - 1]];\n      }\n      return null;\n    },\n\n    isServiceInList: function(listOfServices, serveiceKey) {\n      for (let i=0; i<listOfServices.length; i++) {\n        if (listOfServices[i].key === serveiceKey) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    filterOutUnavailableGroups: function(listOfServices) {\n      const filteredServices = [];\n      for (let i=0; i<listOfServices.length; i++) {\n        const service = listOfServices[i];\n        if (\"innerNodes\" in service) {\n          let allIn = true;\n          const innerServices = service[\"innerNodes\"];\n          for (const innerService in innerServices) {\n            allIn &= qxapp.utils.Services.isServiceInList(listOfServices, innerServices[innerService].key);\n          }\n          if (allIn) {\n            filteredServices.push(service);\n          }\n        } else {\n          filteredServices.push(service);\n        }\n      }\n      return filteredServices;\n    }\n  }\n});\n"
  ]
}