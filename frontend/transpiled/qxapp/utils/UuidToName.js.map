{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/utils/UuidToName.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "properties",
    "study",
    "check",
    "nullable",
    "members",
    "convertToName",
    "itemUuid",
    "isPropertyInitialized",
    "prj",
    "getStudy",
    "getUuid",
    "getName",
    "wrkb",
    "getWorkbench",
    "allNodes",
    "getNodes",
    "nodeId",
    "node",
    "getNodeId",
    "getLabel",
    "qxapp",
    "utils",
    "UuidToName"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAYAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wBAAhB,EAA0C;AACxCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADwB;AAExCC,IAAAA,IAAI,EAAE,WAFkC;AAIxCC,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,wBADF;AAELC,QAAAA,QAAQ,EAAE;AAFL;AADG,KAJ4B;AAWxCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,uBAASC,QAAT,EAAmB;AAChC,YAAI,KAAKC,qBAAL,CAA2B,OAA3B,CAAJ,EAAyC;AACvC,cAAMC,GAAG,GAAG,KAAKC,QAAL,EAAZ;;AACA,cAAIH,QAAQ,KAAKE,GAAG,CAACE,OAAJ,EAAjB,EAAgC;AAC9B,mBAAOF,GAAG,CAACG,OAAJ,EAAP;AACD;;AACD,cAAMC,IAAI,GAAGJ,GAAG,CAACK,YAAJ,EAAb;AACA,cAAMC,QAAQ,GAAGF,IAAI,CAACG,QAAL,CAAc,IAAd,CAAjB;;AACA,eAAK,IAAMC,MAAX,IAAqBF,QAArB,EAA+B;AAC7B,gBAAMG,IAAI,GAAGH,QAAQ,CAACE,MAAD,CAArB;;AACA,gBAAIV,QAAQ,KAAKW,IAAI,CAACC,SAAL,EAAjB,EAAmC;AACjC,qBAAOD,IAAI,CAACE,QAAL,EAAP;AACD;AACF;AACF;;AACD,eAAOb,QAAP;AACD;AAjBM;AAX+B,GAA1C;AA7BAc,EAAAA,KAAK,CAACC,KAAN,CAAYC,UAAZ,CAAuB7B,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2018 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Singleton for trying to convert a (file) uuid into a human readable text.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   let image = qxapp.utils.Avatar.getUrl(userEmail);\n * </pre>\n */\n\nqx.Class.define(\"qxapp.utils.UuidToName\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  properties: {\n    study: {\n      check: \"qxapp.data.model.Study\",\n      nullable: true\n    }\n  },\n\n  members: {\n    convertToName: function(itemUuid) {\n      if (this.isPropertyInitialized(\"study\")) {\n        const prj = this.getStudy();\n        if (itemUuid === prj.getUuid()) {\n          return prj.getName();\n        }\n        const wrkb = prj.getWorkbench();\n        const allNodes = wrkb.getNodes(true);\n        for (const nodeId in allNodes) {\n          const node = allNodes[nodeId];\n          if (itemUuid === node.getNodeId()) {\n            return node.getLabel();\n          }\n        }\n      }\n      return itemUuid;\n    }\n  }\n});\n"
  ]
}