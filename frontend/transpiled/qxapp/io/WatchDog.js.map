{
  "version": 3,
  "sources": [
    "/home/travis/build/ITISFoundation/osparc-simcore/services/web/client/source/class/qxapp/io/WatchDog.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "resource",
    "qxapp",
    "io",
    "rest",
    "ResourceFactory",
    "getInstance",
    "createHealthCheck",
    "__healthCheckResource",
    "healthCheck",
    "interval",
    "__timer",
    "event",
    "Timer",
    "window",
    "addEventListener",
    "__updateOnlineStatus",
    "properties",
    "onLine",
    "check",
    "init",
    "nullable",
    "members",
    "startCheck",
    "timer",
    "addListener",
    "getOnLine",
    "__checkHealthCheckAsync",
    "start",
    "stopCheck",
    "isEnabled",
    "stop",
    "resources",
    "e",
    "__updateHealthCheckStatus",
    "get",
    "setOnLine",
    "navigator",
    "component",
    "message",
    "FlashMessenger",
    "info",
    "error",
    "status",
    "setHealthCheck",
    "logo",
    "widget",
    "LogoOnOff",
    "online",
    "WatchDog"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxapp - the simcore frontend\n\n   https://osparc.io\n\n   Copyright:\n     2019 IT'IS Foundation, https://itis.swiss\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n\n   Authors:\n     * Odei Maiz (odeimaiz)\n\n************************************************************************ */\n\n/**\n * Singleton class that does some network connection checks.\n *\n * It has two levels:\n * - Listens to the online/offline event to check whether there is Internet connection or not.\n * - Checks whether the webserver is reachable by doing some HealthCheck calls.\n *\n * *Example*\n *\n * Here is a little example of how to use the class.\n *\n * <pre class='javascript'>\n *   qxapp.io.WatchDog.getInstance().startCheck();\n * </pre>\n */\n\nqx.Class.define(\"qxapp.io.WatchDog\", {\n  extend: qx.core.Object,\n\n  type : \"singleton\",\n\n  construct: function() {\n    let resource = qxapp.io.rest.ResourceFactory.getInstance().createHealthCheck();\n    this.__healthCheckResource = resource.healthCheck;\n\n    const interval = 5000;\n    this.__timer = new qx.event.Timer(interval);\n\n    window.addEventListener(\"online\", this.__updateOnlineStatus, this);\n    window.addEventListener(\"offline\", this.__updateOnlineStatus, this);\n  },\n\n  properties: {\n    onLine: {\n      check: \"Boolean\",\n      init: true,\n      nullable: false\n    },\n\n    healthCheck: {\n      check: \"Boolean\",\n      init: true,\n      nullable: false\n    }\n  },\n\n  members: {\n    __healthCheckResource: null,\n    __timer: null,\n\n    startCheck: function() {\n      let timer = this.__timer;\n      timer.addListener(\"interval\", () => {\n        if (this.getOnLine()) {\n          this.__checkHealthCheckAsync();\n        }\n      }, this);\n      timer.start();\n      this.__checkHealthCheckAsync();\n    },\n\n    stopCheck: function() {\n      if (this.__timer && this.__timer.isEnabled()) {\n        this.__timer.stop();\n      }\n    },\n\n    __checkHealthCheckAsync: function() {\n      let resources = this.__healthCheckResource;\n      resources.addListener(\"getSuccess\", e => {\n        this.__updateHealthCheckStatus(true);\n      }, this);\n      resources.addListener(\"getError\", e => {\n        this.__updateHealthCheckStatus(false);\n      }, this);\n      resources.get();\n    },\n\n    __updateOnlineStatus: function(e) {\n      this.setOnLine(window.navigator.onLine);\n      if (this.getOnLine()) {\n        qxapp.component.message.FlashMessenger.getInstance().info(\"Internet is back\");\n      } else {\n        qxapp.component.message.FlashMessenger.getInstance().error(\"Internet is down\");\n      }\n    },\n\n    __updateHealthCheckStatus: function(status) {\n      this.setHealthCheck(status);\n      let logo = qxapp.component.widget.LogoOnOff.getInstance();\n      if (logo) {\n        logo.online(status);\n      }\n    }\n  } // members\n});\n"
  ]
}