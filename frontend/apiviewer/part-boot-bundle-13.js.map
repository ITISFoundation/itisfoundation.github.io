{
  "version": 3,
  "sources": [
    "../transpiled/qx/ui/core/ISingleSelection.js",
    "../transpiled/qx/ui/core/MSingleSelectionHandling.js",
    "../transpiled/qx/ui/container/Stack.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/apiviewer/part-boot-bundle-13.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Each object, which should support single selection have to\n * implement this interface.\n */\nqx.Interface.define(\"qx.ui.core.ISingleSelection\",\n{\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n\n  events :\n  {\n    /** Fires after the selection was modified */\n    \"changeSelection\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members :\n  {\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection : function() {\n      return true;\n    },\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if the item is not a child element.\n     */\n    setSelection : function(items) {\n      return arguments.length == 1;\n    },\n\n    /**\n     * Clears the whole selection at once.\n     */\n    resetSelection : function() {\n      return true;\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if the item is not a child element.\n     */\n    isSelected : function(item) {\n      return arguments.length == 1;\n    },\n\n    /**\n     * Whether the selection is empty.\n     *\n     * @return {Boolean} Whether the selection is empty.\n     */\n    isSelectionEmpty : function() {\n      return true;\n    },\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables: function(all) {\n      return arguments.length == 1;\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This mixin links all methods to manage the single selection.\n *\n * The class which includes the mixin has to implements two methods:\n *\n * <ul>\n * <li><code>_getItems</code>, this method has to return a <code>Array</code>\n *    of <code>qx.ui.core.Widget</code> that should be managed from the manager.\n * </li>\n * <li><code>_isAllowEmptySelection</code>, this method has to return a\n *    <code>Boolean</code> value for allowing empty selection or not.\n * </li>\n * </ul>\n */\nqx.Mixin.define(\"qx.ui.core.MSingleSelectionHandling\",\n{\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fires after the value was modified */\n    \"changeValue\" : \"qx.event.type.Data\",\n\n    /** Fires after the selection was modified */\n    \"changeSelection\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members :\n  {\n    /** @type {qx.ui.core.SingleSelectionManager} the single selection manager */\n    __manager : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param item {null|qx.ui.core.Widget} Item to set as selected value.\n     * @returns {null|TypeError} The status of this operation.\n     */\n    setValue : function(item) {\n      if (null === item) {\n        this.resetSelection();\n        return null;\n      }\n\n      if (item instanceof qx.ui.core.Widget) {\n        this.__getManager().setSelected(item);\n        return null;\n\n      } else {\n        return new TypeError(\"Given argument is not null or a {qx.ui.core.Widget}.\");\n      }\n    },\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.\n     */\n    getValue : function() {\n      return this.__getManager().getSelected() || null;\n    },\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue : function() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection : function() {\n      var selected = this.__getManager().getSelected();\n\n      if (selected) {\n        return [selected];\n      } else {\n        return [];\n      }\n    },\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if one of the items is not a child element and if\n     *    items contains more than one elements.\n     */\n    setSelection : function(items) {\n      switch(items.length)\n      {\n        case 0:\n          this.resetSelection();\n          break;\n        case 1:\n          this.__getManager().setSelected(items[0]);\n          break;\n        default:\n          throw new Error(\"Could only select one item, but the selection\" +\n            \" array contains \" + items.length + \" items!\");\n      }\n    },\n\n    /**\n     * Clears the whole selection at once.\n     */\n    resetSelection : function() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if one of the items is not a child element.\n     */\n    isSelected : function(item) {\n      return this.__getManager().isSelected(item);\n    },\n\n    /**\n     * Whether the selection is empty.\n     *\n     * @return {Boolean} Whether the selection is empty.\n     */\n    isSelectionEmpty : function() {\n      return this.__getManager().isSelectionEmpty();\n    },\n\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables: function(all) {\n      return this.__getManager().getSelectables(all);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Event listener for <code>changeSelected</code> event on single\n     * selection manager.\n     *\n     * @param e {qx.event.type.Data} Data event.\n     */\n    _onChangeSelected : function(e) {\n      var newValue = e.getData();\n      var oldValue = e.getOldData();\n      this.fireDataEvent(\"changeValue\", newValue, oldValue);\n\n      newValue == null ? newValue = [] : newValue = [newValue];\n      oldValue == null ? oldValue = [] : oldValue = [oldValue];\n      this.fireDataEvent(\"changeSelection\", newValue, oldValue);\n    },\n\n    /**\n     * Return the selection manager if it is already exists, otherwise creates\n     * the manager.\n     *\n     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.\n     */\n    __getManager : function()\n    {\n      if (this.__manager == null)\n      {\n        var that = this;\n        this.__manager = new qx.ui.core.SingleSelectionManager(\n        {\n          getItems : function() {\n            return that._getItems();\n          },\n\n          isItemSelectable : function(item) {\n            if (that._isItemSelectable) {\n              return that._isItemSelectable(item);\n            } else {\n              return item.isVisible();\n            }\n          }\n        });\n        this.__manager.addListener(\"changeSelected\", this._onChangeSelected, this);\n      }\n      this.__manager.setAllowEmptySelection(this._isAllowEmptySelection());\n\n      return this.__manager;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  destruct : function() {\n    this._disposeObjects(\"__manager\");\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\n/**\n * The stack container puts its child widgets on top of each other and only the\n * topmost widget is visible.\n *\n * This is used e.g. in the tab view widget. Which widget is visible can be\n * controlled by using the {@link #getSelection} method.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   // create stack container\n *   var stack = new qx.ui.container.Stack();\n *\n *   // add some children\n *   stack.add(new qx.ui.core.Widget().set({\n *    backgroundColor: \"red\"\n *   }));\n *   stack.add(new qx.ui.core.Widget().set({\n *    backgroundColor: \"green\"\n *   }));\n *   stack.add(new qx.ui.core.Widget().set({\n *    backgroundColor: \"blue\"\n *   }));\n *\n *   // select green widget\n *   stack.setSelection([stack.getChildren()[1]]);\n *\n *   this.getRoot().add(stack);\n * </pre>\n *\n * This example creates an stack with three children. Only the selected \"green\"\n * widget is visible.\n *\n * *External Documentation*\n *\n * <a href='http://manual.qooxdoo.org/${qxversion}/pages/widget/stack.html' target='_blank'>\n * Documentation of this widget in the qooxdoo manual.</a>\n */\nqx.Class.define(\"qx.ui.container.Stack\",\n{\n  extend : qx.ui.core.Widget,\n  implement : [\n    qx.ui.form.IField,\n    qx.ui.core.ISingleSelection\n  ],\n  include : [\n    qx.ui.core.MSingleSelectionHandling,\n    qx.ui.core.MChildrenHandling\n  ],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this._setLayout(new qx.ui.layout.Grow);\n\n    this.addListener(\"changeSelection\", this.__onChangeSelection, this);\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Whether the size of the widget depends on the selected child. When\n     * disabled (default) the size is configured to the largest child.\n     */\n    dynamic :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyDynamic\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members :\n  {\n    // property apply\n    _applyDynamic : function(value)\n    {\n      var children = this._getChildren();\n      var selected = this.getSelection()[0];\n      var child;\n\n      for (var i=0, l=children.length; i<l; i++)\n      {\n        child = children[i];\n\n        if (child != selected)\n        {\n          if (value) {\n            children[i].exclude();\n          } else {\n            children[i].hide();\n          }\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS FOR SELECTION API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Returns the widget for the selection.\n     * @return {qx.ui.core.Widget[]} Widgets to select.\n     */\n    _getItems : function() {\n      return this.getChildren();\n    },\n\n    /**\n     * Returns if the selection could be empty or not.\n     *\n     * @return {Boolean} <code>true</code> If selection could be empty,\n     *    <code>false</code> otherwise.\n     */\n    _isAllowEmptySelection : function() {\n      return true;\n    },\n\n    /**\n     * Returns whether the given item is selectable.\n     *\n     * @param item {qx.ui.core.Widget} The item to be checked\n     * @return {Boolean} Whether the given item is selectable\n     */\n    _isItemSelectable : function(item) {\n      return true;\n    },\n\n    /**\n     * Event handler for <code>changeSelection</code>.\n     *\n     * Shows the new selected widget and hide the old one.\n     *\n     * @param e {qx.event.type.Data} Data event.\n     */\n    __onChangeSelection : function(e)\n    {\n      var old = e.getOldData()[0];\n      var value = e.getData()[0];\n\n      if (old)\n      {\n        if (this.isDynamic()) {\n          old.exclude();\n        } else {\n          old.hide();\n        }\n      }\n\n      if (value) {\n        value.show();\n      }\n    },\n\n\n    //overridden\n    _afterAddChild : function(child) {\n      var selected = this.getSelection()[0];\n\n      if (!selected) {\n        this.setSelection([child]);\n      } else if (selected !== child) {\n        if (this.isDynamic()) {\n          child.exclude();\n        } else {\n          child.hide();\n        }\n      }\n    },\n\n\n    //overridden\n    _afterRemoveChild : function(child) {\n      if (this.getSelection()[0] === child) {\n        var first = this._getChildren()[0];\n\n        if (first) {\n          this.setSelection([first]);\n        } else {\n          this.resetSelection();\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Go to the previous child in the children list.\n     */\n    previous : function()\n    {\n      var selected = this.getSelection()[0];\n      var go = this._indexOf(selected)-1;\n      var children = this._getChildren();\n\n      if (go < 0) {\n        go = children.length - 1;\n      }\n\n      var prev = children[go];\n      this.setSelection([prev]);\n    },\n\n    /**\n     * Go to the next child in the children list.\n     */\n    next : function()\n    {\n      var selected = this.getSelection()[0];\n      var go = this._indexOf(selected)+1;\n      var children = this._getChildren();\n\n      var next = children[go] || children[0];\n\n      this.setSelection([next]);\n    }\n  }\n});\n"
  ]
}