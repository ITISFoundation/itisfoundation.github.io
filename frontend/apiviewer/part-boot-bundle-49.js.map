{
  "version": 3,
  "sources": [
    "../transpiled/qx/ui/toolbar/MenuButton.js",
    "../transpiled/qx/util/StringEscape.js",
    "../transpiled/qx/ui/virtual/layer/Abstract.js",
    "../transpiled/qx/ui/virtual/layer/WidgetCell.js",
    "../transpiled/qx/ui/virtual/cell/IWidgetCell.js",
    "../transpiled/qx/ui/virtual/cell/AbstractWidget.js",
    "../transpiled/qx/ui/virtual/cell/WidgetCell.js",
    "../transpiled/qx/ui/tree/core/FolderOpenButton.js",
    "../transpiled/qx/ui/table/headerrenderer/HeaderCell.js",
    "../transpiled/qx/ui/core/ColumnData.js",
    "../transpiled/qx/ui/table/columnmodel/resizebehavior/Abstract.js",
    "../transpiled/qx/ui/table/columnmodel/resizebehavior/Default.js",
    "../transpiled/qx/ui/table/IRowRenderer.js",
    "../transpiled/qx/ui/table/rowrenderer/Default.js",
    "../transpiled/qx/ui/table/IColumnMenuButton.js",
    "../transpiled/qx/ui/table/columnmenu/Button.js",
    "../transpiled/qx/ui/table/selection/Manager.js",
    "../transpiled/qx/ui/table/selection/Model.js",
    "../transpiled/qx/ui/table/pane/Pane.js",
    "../transpiled/qx/ui/table/pane/Header.js",
    "../transpiled/qx/ui/table/pane/Scroller.js",
    "../transpiled/qx/ui/table/pane/Model.js",
    "../transpiled/qx/ui/table/model/Simple.js",
    "../transpiled/qx/ui/table/pane/FocusIndicator.js",
    "../transpiled/qx/ui/table/IColumnMenuItem.js",
    "../transpiled/qx/locale/Number.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/apiviewer/part-boot-bundle-49.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * The button to fill the menubar\n *\n * @childControl arrow {qx.ui.basic.Image} arrow widget to show a submenu is available\n */\nqx.Class.define(\"qx.ui.toolbar.MenuButton\",\n{\n  extend : qx.ui.menubar.Button,\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Appearance of the widget */\n    appearance :\n    {\n      refine : true,\n      init : \"toolbar-menubutton\"\n    },\n\n    /** Whether the button should show an arrow to indicate the menu behind it */\n    showArrow :\n    {\n      check : \"Boolean\",\n      init : false,\n      themeable : true,\n      apply : \"_applyShowArrow\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // overridden\n    _applyVisibility : function(value, old) {\n      this.base(arguments, value, old);\n\n      // hide the menu too\n      var menu = this.getMenu();\n      if (value != \"visible\" && menu) {\n        menu.hide();\n      }\n\n      // trigger a appearance recalculation of the parent\n      var parent = this.getLayoutParent();\n      if (parent && parent instanceof qx.ui.toolbar.PartContainer) {\n        qx.ui.core.queue.Appearance.add(parent);\n      }\n    },\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"arrow\":\n          control = new qx.ui.basic.Image();\n          control.setAnonymous(true);\n          this._addAt(control, 10);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n    // property apply routine\n    _applyShowArrow : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"arrow\");\n      } else {\n        this._excludeChildControl(\"arrow\");\n      }\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Generic escaping and unescaping of DOM strings.\n *\n * {@link qx.bom.String} for (un)escaping of HTML strings.\n * {@link qx.xml.String} for (un)escaping of XML strings.\n */\nqx.Bootstrap.define(\"qx.util.StringEscape\",\n{\n  statics :\n  {\n    /**\n     * generic escaping method\n     *\n     * @param str {String} string to escape\n     * @param charCodeToEntities {Map} entity to charcode map\n     * @return {String} escaped string\n     */\n    escape : function(str, charCodeToEntities)\n    {\n      var entity, result = \"\";\n\n      for (var i=0, l=str.length; i<l; i++)\n      {\n        var chr = str.charAt(i);\n        var code = chr.charCodeAt(0);\n\n        if (charCodeToEntities[code]) {\n          entity = \"&\" + charCodeToEntities[code] + \";\";\n        }\n        else\n        {\n          if (code > 0x7F) {\n            entity = \"&#\" + code + \";\";\n          } else {\n            entity = chr;\n          }\n        }\n\n        result += entity;\n      }\n\n      return result;\n    },\n\n\n    /**\n     * generic unescaping method\n     *\n     * @param str {String} string to unescape\n     * @param entitiesToCharCode {Map} charcode to entity map\n     * @return {String} unescaped string\n     */\n    unescape : function(str, entitiesToCharCode)\n    {\n      return str.replace(/&[#\\w]+;/gi, function(entity)\n      {\n        var chr = entity;\n        var entity = entity.substring(1, entity.length - 1);\n        var code = entitiesToCharCode[entity];\n\n        if (code) {\n          chr = String.fromCharCode(code);\n        }\n        else\n        {\n          if (entity.charAt(0) == '#')\n          {\n            if (entity.charAt(1).toUpperCase() == 'X')\n            {\n              code = entity.substring(2);\n\n              // match hex number\n              if (code.match(/^[0-9A-Fa-f]+$/gi)) {\n                chr = String.fromCharCode(parseInt(code, 16));\n              }\n            }\n            else\n            {\n              code = entity.substring(1);\n\n              // match integer\n              if (code.match(/^\\d+$/gi)) {\n                chr = String.fromCharCode(parseInt(code, 10));\n              }\n            }\n          }\n        }\n\n        return chr;\n      });\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n\n/**\n * EXPERIMENTAL!\n *\n * Abstract base class for layers of a virtual pane.\n *\n * This class queues calls to {@link #fullUpdate}, {@link #updateLayerWindow}\n * and {@link #updateLayerData} and only performs the absolute necessary\n * actions. Concrete implementation of this class must at least implement\n * the {@link #_fullUpdate} method. Additionally the two methods\n * {@link #_updateLayerWindow} and {@link #_updateLayerData} may be implemented\n * to increase the performance.\n */\nqx.Class.define(\"qx.ui.virtual.layer.Abstract\",\n{\n  extend : qx.ui.core.Widget,\n  type : \"abstract\",\n\n  implement : [qx.ui.virtual.core.ILayer],\n\n  /*\n   *****************************************************************************\n      CONSTRUCTOR\n   *****************************************************************************\n   */\n\n   construct : function()\n   {\n     this.base(arguments);\n\n     this.__jobs = {};\n   },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    anonymous :\n    {\n      refine: true,\n      init: true\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __jobs : null,\n    __arguments : null,\n\n    __firstRow : null,\n    __firstColumn : null,\n    __rowSizes : null,\n    __columnSizes : null,\n\n\n    /**\n     * Get the first rendered row\n     *\n     * @return {Integer} The first rendered row\n     */\n    getFirstRow : function() {\n      return this.__firstRow;\n    },\n\n\n    /**\n     * Get the first rendered column\n     *\n     * @return {Integer} The first rendered column\n     */\n    getFirstColumn : function() {\n      return this.__firstColumn;\n    },\n\n\n    /**\n     * Get the sizes of the rendered rows\n     *\n     * @return {Integer[]} List of row heights\n     */\n    getRowSizes : function() {\n      return this.__rowSizes || [];\n    },\n\n\n    /**\n     * Get the sizes of the rendered column\n     *\n     * @return {Integer[]} List of column widths\n     */\n    getColumnSizes : function() {\n      return this.__columnSizes || [];\n    },\n\n\n    // overridden\n    syncWidget : function(jobs)\n    {\n      // return if the layer is not yet rendered\n      // it will rendered in the appear event\n      if (!this.getContentElement().getDomElement()) {\n        return;\n      }\n\n      if (\n        this.__jobs.fullUpdate ||\n        this.__jobs.updateLayerWindow && this.__jobs.updateLayerData\n      )\n      {\n        this._fullUpdate.apply(this, this.__arguments);\n      }\n      else if (this.__jobs.updateLayerWindow)\n      {\n        this._updateLayerWindow.apply(this, this.__arguments);\n      }\n      else if (this.__jobs.updateLayerData  && this.__rowSizes)\n      {\n        this._updateLayerData();\n      }\n\n      if (this.__jobs.fullUpdate || this.__jobs.updateLayerWindow)\n      {\n        var args = this.__arguments;\n        this.__firstRow = args[0];\n        this.__firstColumn = args[1];\n        this.__rowSizes = args[2];\n        this.__columnSizes = args[3];\n      }\n\n      this.__jobs = {};\n    },\n\n\n    /**\n     * Update the layer to reflect changes in the data the layer displays.\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     */\n    _updateLayerData : function()\n    {\n      this._fullUpdate(\n        this.__firstRow, this.__firstColumn,\n        this.__rowSizes, this.__columnSizes\n      );\n    },\n\n\n    /**\n     * Do a complete update of the layer. All cached data should be discarded.\n     * This method is called e.g. after changes to the grid geometry\n     * (row/column sizes, row/column count, ...).\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     *\n     * @param firstRow {Integer} Index of the first row to display\n     * @param firstColumn {Integer} Index of the first column to display\n     * @param rowSizes {Integer[]} Array of heights for each row to display\n     * @param columnSizes {Integer[]} Array of widths for each column to display\n     */\n    _fullUpdate : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    ) {\n      throw new Error(\"Abstract method '_fullUpdate' called!\");\n    },\n\n\n    /**\n     * Update the layer to display a different window of the virtual grid.\n     * This method is called if the pane is scrolled, resized or cells\n     * are prefetched. The implementation can assume that no other grid\n     * data has been changed since the last \"fullUpdate\" of \"updateLayerWindow\"\n     * call.\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     *\n     * @param firstRow {Integer} Index of the first row to display\n     * @param firstColumn {Integer} Index of the first column to display\n     * @param rowSizes {Integer[]} Array of heights for each row to display\n     * @param columnSizes {Integer[]} Array of widths for each column to display\n     */\n    _updateLayerWindow : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    )\n    {\n      this._fullUpdate(\n        firstRow, firstColumn,\n        rowSizes, columnSizes\n      );\n    },\n\n\n    // interface implementation\n    updateLayerData : function()\n    {\n      this.__jobs.updateLayerData = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // interface implementation\n    fullUpdate : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    )\n    {\n      this.__arguments = arguments;\n      this.__jobs.fullUpdate = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    // interface implementation\n    updateLayerWindow : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    ) {\n      this.__arguments = arguments;\n      this.__jobs.updateLayerWindow = true;\n      qx.ui.core.queue.Widget.add(this);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__jobs = this.__arguments = this.__rowSizes = this.__columnSizes = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n\n/**\n * EXPERIMENTAL!\n *\n * The WidgetCell layer renders each cell with a qooxdoo widget. The concrete\n * widget instance for each cell is provided by a cell provider.\n */\nqx.Class.define(\"qx.ui.virtual.layer.WidgetCell\",\n{\n  extend : qx.ui.virtual.layer.Abstract,\n\n  include : [\n    qx.ui.core.MChildrenHandling\n  ],\n\n\n  /**\n   * @param widgetCellProvider {qx.ui.virtual.core.IWidgetCellProvider} This\n   *    class manages the life cycle of the cell widgets.\n   */\n  construct : function(widgetCellProvider)\n  {\n    this.base(arguments);\n    this.setZIndex(12);\n\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertInterface(\n        widgetCellProvider,\n        qx.ui.virtual.core.IWidgetCellProvider\n      );\n    }\n\n    this._cellProvider = widgetCellProvider;\n    this.__spacerPool = [];\n  },\n\n\n  /*\n   *****************************************************************************\n      PROPERTIES\n   *****************************************************************************\n   */\n\n   properties :\n   {\n     // overridden\n     anonymous :\n     {\n       refine: true,\n       init: false\n     }\n   },\n\n  events :\n  {\n    /**\n     * Is fired when the {@link #_fullUpdate} or the\n     * {@link #_updateLayerWindow} is finished.\n     */\n    updated : \"qx.event.type.Event\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n     __spacerPool : null,\n\n     /**\n     * Returns the widget used to render the given cell. May return null if the\n     * cell isn’t rendered currently rendered.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.LayoutItem|null} the widget used to render the given\n     *    cell or <code>null</code>\n     */\n     getRenderedCellWidget : function(row, column)\n     {\n        if (this._getChildren().length === 0) {\n          return null;\n        }\n\n        var columnCount = this.getColumnSizes().length;\n        var rowCount = this.getRowSizes().length;\n\n        var firstRow = this.getFirstRow();\n        var firstColumn = this.getFirstColumn();\n\n        if (\n         row < firstRow ||\n         row >= firstRow + rowCount ||\n         column < firstColumn ||\n         column >= firstColumn + columnCount\n        ) {\n         return null;\n        }\n\n        var childIndex = (column - firstColumn) + (row - firstRow) * columnCount;\n        var widget = this._getChildren()[childIndex];\n\n        if (!widget || widget.getUserData(\"cell.empty\")) {\n         return null;\n        } else {\n         return widget;\n        }\n     },\n\n\n    /**\n     * Get the spacer widget, for empty cells\n     *\n     * @return {qx.ui.core.Spacer} The spacer widget.\n     */\n    _getSpacer : function()\n    {\n      var spacer = this.__spacerPool.pop();\n      if (!spacer)\n      {\n        spacer = new qx.ui.core.Spacer();\n        spacer.setUserData(\"cell.empty\", 1);\n      }\n      return spacer;\n    },\n\n\n    /**\n     * Activates one of the still not empty items.\n     * @param elementToPool {qx.ui.core.Widget} The widget which gets pooled.\n     */\n    _activateNotEmptyChild : function(elementToPool)\n    {\n      // get the current active element\n      var active = qx.ui.core.FocusHandler.getInstance().getActiveWidget();\n      // if the element to pool is active or one of its children\n      if (active == elementToPool || qx.ui.core.Widget.contains(elementToPool, active)) {\n        // search for a new child to activate\n        var children = this._getChildren();\n        for (var i = children.length - 1; i >= 0; i--) {\n          if (!children[i].getUserData(\"cell.empty\")) {\n            children[i].activate();\n            break;\n          }\n        };\n      }\n    },\n\n\n    // overridden\n    _fullUpdate : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      var cellProvider = this._cellProvider;\n\n      var children = this._getChildren().concat();\n      for (var i=0; i<children.length; i++)\n      {\n        var child = children[i];\n        if (child.getUserData(\"cell.empty\")) {\n          this.__spacerPool.push(child);\n        } else {\n          this._activateNotEmptyChild(child);\n          cellProvider.poolCellWidget(child);\n        }\n      }\n\n\n      var top = 0;\n      var left = 0;\n\n      var visibleItems = [];\n\n      for (var y=0; y<rowSizes.length; y++)\n      {\n        for (var x=0; x<columnSizes.length; x++)\n        {\n          var row = firstRow + y;\n          var column = firstColumn + x;\n\n          var item = cellProvider.getCellWidget(row, column) || this._getSpacer();\n\n          visibleItems.push(item);\n\n          item.setUserBounds(left, top, columnSizes[x], rowSizes[y]);\n          item.setUserData(\"cell.row\", row);\n          item.setUserData(\"cell.column\", column);\n          this._add(item);\n\n          left += columnSizes[x];\n        }\n        top += rowSizes[y];\n        left = 0;\n      }\n      children.forEach(function(child){\n        if (visibleItems.indexOf(child) === -1) {\n          this._remove(child);\n        }\n      }.bind(this));\n\n      this.fireEvent(\"updated\");\n    },\n\n\n    _updateLayerWindow : function(\n      firstRow, firstColumn,\n      rowSizes, columnSizes\n    )\n    {\n      // compute overlap of old and new window\n      //\n      //      +---+\n      //      |  ##--+\n      //      |  ##  |\n      //      +--##  |\n      //         +---+\n      //\n\n\n    if (qx.core.Environment.get(\"qx.debug\"))\n    {\n      this.assertPositiveInteger(firstRow);\n      this.assertPositiveInteger(firstColumn);\n      this.assertArray(rowSizes);\n      this.assertArray(columnSizes);\n    }\n\n\n      var lastRow = firstRow + rowSizes.length - 1;\n      var lastColumn = firstColumn + columnSizes.length - 1;\n\n      var overlap = {\n        firstRow: Math.max(firstRow, this.getFirstRow()),\n        lastRow: Math.min(lastRow, this._lastRow),\n        firstColumn: Math.max(firstColumn, this.getFirstColumn()),\n        lastColumn: Math.min(lastColumn, this._lastColumn)\n      };\n\n      this._lastColumn = lastColumn;\n      this._lastRow = lastRow;\n\n      if (\n        overlap.firstRow > overlap.lastRow ||\n        overlap.firstColumn > overlap.lastColumn\n      ) {\n        return this._fullUpdate(\n          firstRow, firstColumn,\n          rowSizes, columnSizes\n        );\n      }\n\n      // collect the widgets to move\n      var children = this._getChildren();\n      var lineLength = this.getColumnSizes().length;\n      var widgetsToMove = [];\n      var widgetsToMoveIndexes = {};\n      for (var row=firstRow; row<=lastRow; row++)\n      {\n        widgetsToMove[row] = [];\n        for (var column=firstColumn; column<=lastColumn; column++)\n        {\n          if (\n            row >= overlap.firstRow &&\n            row <= overlap.lastRow &&\n            column >= overlap.firstColumn &&\n            column <= overlap.lastColumn\n          )\n          {\n            var x = column - this.getFirstColumn();\n            var y = row - this.getFirstRow();\n            var index = y*lineLength + x;\n            widgetsToMove[row][column] = children[index];\n            widgetsToMoveIndexes[index] = true;\n          }\n        }\n      }\n\n      var cellProvider = this._cellProvider;\n\n      // pool widgets\n      var children = this._getChildren().concat();\n      for (var i=0; i<children.length; i++)\n      {\n        if (!widgetsToMoveIndexes[i])\n        {\n          var child = children[i];\n          if (child.getUserData(\"cell.empty\")) {\n            this.__spacerPool.push(child);\n          } else {\n            this._activateNotEmptyChild(child);\n            cellProvider.poolCellWidget(child);\n          }\n        }\n      }\n\n\n      var top = 0;\n      var left = 0;\n      var visibleItems = [];\n\n      for (var y=0; y<rowSizes.length; y++)\n      {\n        for (var x=0; x<columnSizes.length; x++)\n        {\n          var row = firstRow + y;\n          var column = firstColumn + x;\n\n          var item =\n            widgetsToMove[row][column] ||\n            cellProvider.getCellWidget(row, column) ||\n            this._getSpacer();\n\n          visibleItems.push(item);\n\n          item.setUserBounds(left, top, columnSizes[x], rowSizes[y]);\n          item.setUserData(\"cell.row\", row);\n          item.setUserData(\"cell.column\", column);\n          this._add(item);\n\n          left += columnSizes[x];\n        }\n        top += rowSizes[y];\n        left = 0;\n      }\n      children.forEach(function(child){\n        if (visibleItems.indexOf(child) === -1) {\n          this._remove(child);\n        }\n      }.bind(this));\n\n      this.fireEvent(\"updated\");\n    }\n  },\n\n  destruct : function()\n  {\n    var children = this._getChildren();\n    for (var i=0; i<children.length; i++) {\n      children[i].dispose();\n    }\n\n    this._cellProvider = this.__spacerPool = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A widget cell renderer manages a pool of widgets to render cells in a\n * {@link qx.ui.virtual.layer.WidgetCell} layer.\n */\nqx.Interface.define(\"qx.ui.virtual.cell.IWidgetCell\",\n{\n  members :\n  {\n    /**\n     * Get a widget instance to render the cell\n     *\n     * @param data {var} Data needed for the cell to render.\n     * @param states {Map} The states set on the cell (e.g. <i>selected</i>,\n     * <i>focused</i>, <i>editable</i>).\n     *\n     * @return {qx.ui.core.LayoutItem} The cell widget\n     */\n    getCellWidget : function(data, states) {},\n\n\n    /**\n     * Release the given widget instance.\n     *\n     * Either pool or dispose the widget.\n     *\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to pool\n     */\n    pool : function(widget) {},\n\n\n    /**\n     * Update the states of the given widget.\n     *\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to update\n     * @param states {Map} The cell widget's states\n     */\n    updateStates : function(widget, states) {},\n\n\n    /**\n     * Update the data the cell widget should display\n     *\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to update\n     * @param data {var} The data to display\n     */\n    updateData : function(widget, data) {}\n  }\n});",
    "/**\n * Abstract base class for widget based cell renderer.\n */\nqx.Class.define(\"qx.ui.virtual.cell.AbstractWidget\",\n{\n  extend : qx.core.Object,\n  implement : [qx.ui.virtual.cell.IWidgetCell],\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__pool = [];\n  },\n\n\n  events :\n  {\n    /** Fired when a new <code>LayoutItem</code> is created. */\n    \"created\" : \"qx.event.type.Data\"\n  },\n\n\n  members :\n  {\n    __pool : null,\n\n\n    /**\n     * Creates the widget instance.\n     *\n     * @abstract\n     * @return {qx.ui.core.LayoutItem} The widget used to render a cell\n     */\n    _createWidget : function() {\n      throw new Error(\"abstract method call\");\n    },\n\n\n    // interface implementation\n    updateData : function(widget, data) {\n      throw new Error(\"abstract method call\");\n    },\n\n\n    // interface implementation\n    updateStates : function(widget, states)\n    {\n      var oldStates = widget.getUserData(\"cell.states\");\n\n      // remove old states\n      if (oldStates)\n      {\n        var newStates = states || {};\n        for (var state in oldStates)\n        {\n          if (!newStates[state]) {\n            widget.removeState(state);\n          }\n        }\n      }\n      else\n      {\n        oldStates = {};\n      }\n\n      // apply new states\n      if (states)\n      {\n        for (var state in states)\n        {\n          if (!oldStates.state) {\n            widget.addState(state);\n          }\n        }\n      }\n\n      widget.setUserData(\"cell.states\", states);\n    },\n\n\n    // interface implementation\n    getCellWidget : function(data, states)\n    {\n      var widget = this.__getWidgetFromPool();\n      this.updateStates(widget, states);\n      this.updateData(widget, data);\n      return widget;\n    },\n\n\n    // interface implementation\n    pool : function(widget) {\n      this.__pool.push(widget);\n    },\n\n    /**\n     * Cleanup all <code>LayoutItem</code> and destroy them.\n     */\n    _cleanupPool : function() {\n      var widget = this.__pool.pop();\n\n      while(widget)\n      {\n        widget.destroy();\n        widget = this.__pool.pop();\n      }\n    },\n\n    /**\n     * Returns a <code>LayoutItem</code> from the pool, when the pool is empty\n     * a new <code>LayoutItem</code> is created.\n     *\n     * @return {qx.ui.core.LayoutItem} The cell widget\n     */\n    __getWidgetFromPool : function()\n    {\n      var widget = this.__pool.shift();\n\n      if (widget == null)\n      {\n        widget = this._createWidget();\n        this.fireDataEvent(\"created\", widget);\n      }\n\n      return widget;\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function()\n  {\n    this._cleanupPool();\n    this.__pool = null;\n  }\n});",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * EXPERIMENTAL!\n *\n * Cell renderer can be used for Widget rendering. The Widget creation can be configured with the\n * {@link #delegate} property:\n *\n * <pre class=\"javascript\">\n * widgetCell.setDelegate(\n * {\n *   createWidget : function() {\n *     return new qx.ui.form.ListItem();\n *   }\n * });\n * </pre>\n *\n * When the {@link #delegate} property is not used {@link qx.ui.core.Widget} instances are created as\n * fallback.\n *\n * The {@link #updateData} method can be used to update any Widget property. Just use a <code>Map</code>\n * with property name as key:\n *\n * <pre class=\"javascript\">\n * // widget is a qx.ui.form.ListItem instance\n * widgetCell.updateData(widget,\n * {\n *   label: \"my label value\",\n *   icon: \"qx/icon/22/emotes/face-angel.png\"\n * });\n * </pre>\n */\nqx.Class.define(\"qx.ui.virtual.cell.WidgetCell\",\n{\n  extend : qx.ui.virtual.cell.AbstractWidget,\n\n  properties :\n  {\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link qx.ui.virtual.cell.IWidgetCellDelegate} interface.\n     */\n    delegate :\n    {\n      apply: \"_applyDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  members :\n  {\n    // apply method\n    _applyDelegate : function(value, old) {\n      this._cleanupPool();\n    },\n\n    // overridden\n    _createWidget : function() {\n      var delegate = this.getDelegate();\n\n      if (delegate != null && delegate.createWidget != null) {\n        return delegate.createWidget();\n      } else {\n        return new qx.ui.core.Widget();\n      }\n    },\n\n    // overridden\n    updateData : function(widget, data) {\n      for (var key in data)\n      {\n        if (qx.Class.hasProperty(widget.constructor, key)) {\n          qx.util.PropertyUtil.setUserValue(widget, key, data[key]);\n        } else {\n          throw new Error(\"Can't update data! The key '\" + key + \"' is not a Property!\");\n        }\n      }\n    }\n  }\n});",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The small folder open/close button\n */\nqx.Class.define(\"qx.ui.tree.core.FolderOpenButton\",\n{\n  extend : qx.ui.basic.Image,\n  include : qx.ui.core.MExecutable,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.initOpen();\n\n    this.addListener(\"tap\", this._onTap);\n    this.addListener(\"pointerdown\", this._stopPropagation, this);\n    this.addListener(\"pointerup\", this._stopPropagation, this);\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Whether the button state is \"open\"\n     */\n    open :\n    {\n      check : \"Boolean\",\n      init : false,\n      event : \"changeOpen\",\n      apply : \"_applyOpen\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // property apply\n    _applyOpen : function(value, old)\n    {\n      value ? this.addState(\"opened\") : this.removeState(\"opened\");\n      this.execute();\n    },\n\n\n    /**\n     * Stop tap event propagation\n     *\n     * @param e {qx.event.type.Event} The event object\n     */\n    _stopPropagation : function(e) {\n      e.stopPropagation();\n    },\n\n\n    /**\n     * Pointer tap event listener\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onTap : function(e)\n    {\n      this.toggleOpen();\n      e.stopPropagation();\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The default header cell widget\n *\n * @childControl label {qx.ui.basic.Label} label of the header cell\n * @childControl sort-icon {qx.ui.basic.Image} sort icon of the header cell\n * @childControl icon {qx.ui.basic.Image} icon of the header cell\n */\nqx.Class.define(\"qx.ui.table.headerrenderer.HeaderCell\",\n{\n  extend : qx.ui.container.Composite,\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    var layout = new qx.ui.layout.Grid();\n    layout.setRowFlex(0, 1);\n    layout.setColumnFlex(1, 1);\n    layout.setColumnFlex(2, 1);\n    this.setLayout(layout);\n  },\n\n  properties :\n  {\n    appearance :\n    {\n      refine : true,\n      init : \"table-header-cell\"\n    },\n\n    /** header cell label */\n    label :\n    {\n      check : \"String\",\n      init : null,\n      nullable : true,\n      apply : \"_applyLabel\"\n    },\n\n    /** The icon URL of the sorting indicator */\n    sortIcon :\n    {\n      check : \"String\",\n      init : null,\n      nullable : true,\n      apply : \"_applySortIcon\",\n      themeable : true\n    },\n\n    /** Icon URL */\n    icon :\n    {\n      check : \"String\",\n      init : null,\n      nullable : true,\n      apply : \"_applyIcon\"\n    }\n  },\n\n  members :\n  {\n    // property apply\n    _applyLabel : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"label\").setValue(value);\n      } else {\n        this._excludeChildControl(\"label\");\n      }\n    },\n\n\n    // property apply\n    _applySortIcon : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"sort-icon\").setSource(value);\n      } else {\n        this._excludeChildControl(\"sort-icon\");\n      }\n    },\n\n\n    // property apply\n    _applyIcon : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"icon\").setSource(value);\n      } else {\n        this._excludeChildControl(\"icon\");\n      }\n    },\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"label\":\n          control = new qx.ui.basic.Label(this.getLabel()).set({\n            anonymous: true,\n            allowShrinkX: true\n          });\n\n          this._add(control, {row: 0, column: 1});\n          break;\n\n        case \"sort-icon\":\n          control = new qx.ui.basic.Image(this.getSortIcon());\n          control.setAnonymous(true);\n          this._add(control, {row: 0, column: 2});\n          break;\n\n        case \"icon\":\n          control = new qx.ui.basic.Image(this.getIcon()).set({\n            anonymous: true,\n            allowShrinkX: true\n          });\n          this._add(control, {row: 0, column: 0});\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    }\n  }\n});",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * All of the resizing information about a column.\n *\n *  This is used internally by qx.ui.table and qx.ui.progressive's table and\n *  may be used for other widgets as well.\n */\nqx.Class.define(\"qx.ui.core.ColumnData\",\n{\n  extend : qx.ui.core.LayoutItem,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n    this.setColumnWidth(\"auto\");\n  },\n\n\n  members :\n  {\n    __computedWidth : null,\n\n\n    // overridden\n    renderLayout : function(left, top, width, height) {\n      this.__computedWidth = width;\n    },\n\n\n    /**\n     * Get the computed width of the column.\n     * @return {Integer} Computed column width\n     */\n    getComputedWidth : function() {\n      return this.__computedWidth;\n    },\n\n\n    /**\n     * Get the column's flex value\n     *\n     * @return {Integer} The column's flex value\n     */\n    getFlex : function()\n    {\n      return this.getLayoutProperties().flex || 0;\n    },\n\n\n    /**\n     * Set the column width. The column width can be one of the following\n     * values:\n     *\n     * * Pixels: e.g. <code>23</code>\n     * * Autosized: <code>\"auto\"</code>\n     * * Flex: e.g. <code>\"1*\"</code>\n     * * Percent: e.g. <code>\"33%\"</code>\n     *\n     * @param width {Integer|String} The column width\n     * @param flex {Integer?0} Optional flex value of the column\n     */\n    setColumnWidth : function(width, flex)\n    {\n      var flex = flex || 0;\n      var percent = null;\n\n      if (typeof width == \"number\")\n      {\n        this.setWidth(width);\n      }\n      else if (typeof width == \"string\")\n      {\n        if (width == \"auto\") {\n          flex = 1;\n        }\n        else\n        {\n          var match = width.match(/^[0-9]+(?:\\.[0-9]+)?([%\\*])$/);\n          if (match)\n          {\n            if (match[1] == \"*\") {\n              flex = parseFloat(width);\n            } else {\n              percent = width;\n            }\n          }\n        }\n      }\n      this.setLayoutProperties({\n        flex: flex,\n        width: percent\n      });\n    }\n  },\n\n  environment :\n  {\n    \"qx.tableResizeDebug\" : false\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * An abstract resize behavior.  All resize behaviors should extend this\n * class.\n */\nqx.Class.define(\"qx.ui.table.columnmodel.resizebehavior.Abstract\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Called when the ResizeTableColumnModel is initialized, and upon loading of\n     * a new TableModel, to allow the Resize Behaviors to know how many columns\n     * are in use.\n     *\n     * @abstract\n     * @param numColumns {Integer} The number of columns in use.\n     * @throws {Error} the abstract function warning.\n     */\n    _setNumColumns : function(numColumns) {\n      throw new Error(\"_setNumColumns is abstract\");\n    },\n\n\n    /**\n     * Called when the table has first been rendered.\n     *\n     * @abstract\n     * @param event {var} The <i>onappear</i> event object.\n     * @param forceRefresh {Boolean?false} Whether a refresh should be forced\n     * @throws {Error} the abstract function warning.\n     */\n    onAppear : function(event, forceRefresh) {\n      throw new Error(\"onAppear is abstract\");\n    },\n\n\n    /**\n     * Called when the table width changes due to either a window size change\n     * or a parent object changing size causing the table to change size.\n     *\n     * @abstract\n     * @param event {var} The <i>tableWidthChanged</i> event object.\n     * @throws {Error} the abstract function warning.\n     */\n    onTableWidthChanged : function(event) {\n      throw new Error(\"onTableWidthChanged is abstract\");\n    },\n\n\n    /**\n     * Called when the use of vertical scroll bar in the table changes, either\n     * from present to not present, or vice versa.\n     *\n     * @abstract\n     * @param event {var} The <i>verticalScrollBarChanged</i> event object.  This event has data,\n     *     obtained via event.getValue(), which is a boolean indicating whether a\n     *     vertical scroll bar is now present.\n     * @throws {Error} the abstract function warning.\n     */\n    onVerticalScrollBarChanged : function(event) {\n      throw new Error(\"onVerticalScrollBarChanged is abstract\");\n    },\n\n\n    /**\n     * Called when a column width is changed.\n     *\n     * @abstract\n     * @param event {var} The <i>widthChanged</i> event object.  This event has data, obtained via\n     *     event.getValue(), which is an object with three properties: the column\n     *     which changed width (data.col), the old width (data.oldWidth) and the new\n     *     width (data.newWidth).\n     * @throws {Error} the abstract function warning.\n     */\n    onColumnWidthChanged : function(event) {\n      throw new Error(\"onColumnWidthChanged is abstract\");\n    },\n\n\n    /**\n     * Called when a column visibility is changed.\n     *\n     * @abstract\n     * @param event {var} The <i>visibilityChanged</i> event object.  This event has data, obtained\n     *     via event.getValue(), which is an object with two properties: the column\n     *     which changed width (data.col) and the new visibility of the column\n     *     (data.visible).\n     * @throws {Error} the abstract function warning.\n     */\n    onVisibilityChanged : function(event) {\n      throw new Error(\"onVisibilityChanged is abstract\");\n    },\n\n    /**\n     * Determine the inner width available to columns in the table.\n     *\n     * @return {Integer} The available width\n     */\n    _getAvailableWidth : function()\n    {\n      var tableColumnModel = this.getTableColumnModel();\n\n      // Get the inner width off the table\n      var table = tableColumnModel.getTable();\n\n      var scrollerArr = table._getPaneScrollerArr();\n      if (!scrollerArr[0] || !scrollerArr[0].getLayoutParent().getBounds()) {\n        return null;\n      };\n      var scrollerParentWidth = scrollerArr[0].getLayoutParent().getBounds().width;\n\n      var lastScroller = scrollerArr[scrollerArr.length-1];\n      scrollerParentWidth -= lastScroller.getPaneInsetRight();\n\n      return scrollerParentWidth;\n    }\n  }});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * The default resize behavior.  Until a resize model is loaded, the default\n * behavior is to:\n * <ol>\n *   <li>\n *     Upon the table initially appearing, and upon any window resize, divide\n *     the table space equally between the visible columns.\n *   </li>\n *   <li>\n *     When a column is increased in width, all columns to its right are\n *     pushed to the right with no change to their widths.  This may push some\n *     columns off the right edge of the table, causing a horizontal scroll\n *     bar to appear.\n *   </li>\n *   <li>\n *     When a column is decreased in width, if the total width of all columns\n *     is <i>greater than</i> the table width, no additional column width\n *     change is made.\n *   </li>\n *   <li>\n *     When a column is decreased in width, if the total width of all columns\n *     is <i>less than</i> the table width, the visible column\n *     immediately to the right of the column which decreased in width has its\n *     width increased to fill the remaining space.\n *   </li>\n * </ol>\n *\n * A resize model may be loaded to provide more guidance on how to adjust\n * column width upon each of the events: initial appear, window resize, and\n * column resize. *** TO BE FILLED IN ***\n *\n * @require(qx.ui.core.ColumnData)\n */\nqx.Class.define(\"qx.ui.table.columnmodel.resizebehavior.Default\",\n{\n  extend : qx.ui.table.columnmodel.resizebehavior.Abstract,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__resizeColumnData = [];\n\n    // This layout is not connected to a widget but to this class. This class\n    // must implement the method \"getLayoutChildren\", which must return all\n    // columns (LayoutItems) which should be recalculated. The call\n    // \"layout.renderLayout\" will call the method \"renderLayout\" on each column\n    // data object\n    // The advantage of the use of the normal layout manager is that the\n    // semantics of flex and percent are exactly the same as in the widget code.\n    this.__layout = new qx.ui.layout.HBox();\n    this.__layout.connectToWidget(this);\n\n    this.__deferredComputeColumnsFlexWidth = new qx.util.DeferredCall(\n      this._computeColumnsFlexWidth, this\n    );\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * A function to instantiate a resize behavior column data object.\n     */\n    newResizeBehaviorColumnData :\n    {\n      check : \"Function\",\n      init : function(obj)\n      {\n        return new qx.ui.core.ColumnData();\n      }\n    },\n\n    /**\n     * Whether to reinitialize default widths on each appear event.\n     * Typically, one would want to initialize the default widths only upon\n     * the first appearance of the table, but the original behavior was to\n     * reinitialize it even if the table is hidden and then reshown\n     * (e.g. it's in a pageview and the page is switched and then switched\n     * back).\n     */\n    initializeWidthsOnEveryAppear :\n    {\n      check : \"Boolean\",\n      init  : false\n    },\n\n    /**\n     * The table column model in use.  Of particular interest is the method\n     * <i>getTable</i> which is a reference to the table widget.  This allows\n     * access to any other features of the table, for use in calculating widths\n     * of columns.\n     */\n    tableColumnModel :\n    {\n      check : \"qx.ui.table.columnmodel.Resize\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __layout : null,\n    __layoutChildren : null,\n    __resizeColumnData : null,\n    __deferredComputeColumnsFlexWidth : null,\n\n    /**\n     * Whether we have initialized widths on the first appear yet\n     */\n    __widthsInitialized : false,\n\n    /**\n     * Set the width of a column.\n     *\n     * @param col {Integer} The column whose width is to be set\n     *\n     * @param width {Integer|String}\n     *   The width of the specified column.  The width may be specified as\n     *   integer number of pixels (e.g. 100), a string representing percentage\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\n     *   representing a flex width (e.g. \"1*\").\n     *\n     * @param flex {Integer?0} Optional flex value of the column\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setWidth : function(col, width, flex)\n    {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setColumnWidth(width, flex);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n\n    /**\n     * Set the minimum width of a column.\n     *\n     * @param col {Integer}\n     *   The column whose minimum width is to be set\n     *\n     * @param width {Integer}\n     *   The minimum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMinWidth : function(col, width)\n    {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length)\n      {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setMinWidth(width);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n\n    /**\n     * Set the maximum width of a column.\n     *\n     * @param col {Integer}\n     *   The column whose maximum width is to be set\n     *\n     * @param width {Integer}\n     *   The maximum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMaxWidth : function(col, width)\n    {\n      // Ensure the column is within range\n      if (col >= this.__resizeColumnData.length) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      // Set the new width\n      this.__resizeColumnData[col].setMaxWidth(width);\n      this.__deferredComputeColumnsFlexWidth.schedule();\n    },\n\n\n    /**\n     * Set any or all of the width, minimum width, and maximum width of a\n     * column in a single call.\n     *\n     * @param col {Integer}\n     *   The column whose attributes are to be changed\n     *\n     * @param map {Map}\n     *   A map containing any or all of the property names \"width\", \"minWidth\",\n     *   and \"maxWidth\".  The property values are as described for\n     *   {@link #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n     *   respectively.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    set : function(col, map)\n    {\n      for (var prop in map)\n      {\n        switch(prop)\n        {\n          case \"width\":\n            this.setWidth(col, map[prop]);\n            break;\n\n          case \"minWidth\":\n            this.setMinWidth(col, map[prop]);\n            break;\n\n          case \"maxWidth\":\n            this.setMaxWidth(col, map[prop]);\n            break;\n\n          default:\n            throw new Error(\"Unknown property: \" + prop);\n        }\n      }\n    },\n\n    // overloaded\n    onAppear : function(event, forceRefresh)\n    {\n      // If we haven't initialized widths at least once, or\n      // they want us to reinitialize widths on every appear event...\n      if (forceRefresh === true || !this.__widthsInitialized || this.getInitializeWidthsOnEveryAppear())\n      {\n        // Calculate column widths\n        this._computeColumnsFlexWidth();\n\n        // Track that we've initialized widths at least once\n        this.__widthsInitialized = true;\n      }\n    },\n\n    // overloaded\n    onTableWidthChanged : function(event) {\n      this._computeColumnsFlexWidth();\n    },\n\n    // overloaded\n    onVerticalScrollBarChanged : function(event) {\n      this._computeColumnsFlexWidth();\n    },\n\n    // overloaded\n    onColumnWidthChanged : function(event)\n    {\n      // Extend the next column to fill blank space\n      this._extendNextColumn(event);\n    },\n\n    // overloaded\n    onVisibilityChanged : function(event)\n    {\n      // Event data properties: col, visible\n      var data = event.getData();\n\n      // If a column just became visible, resize all columns.\n      if (data.visible)\n      {\n        this._computeColumnsFlexWidth();\n        return;\n      }\n\n      // Extend the last column to fill blank space\n      this._extendLastColumn(event);\n    },\n\n    // overloaded\n    _setNumColumns : function(numColumns)\n    {\n      var colData = this.__resizeColumnData;\n      // Are there now fewer (or the same number of) columns than there were\n      // previously?\n      if (numColumns <= colData.length)\n      {\n        // Yup.  Delete the extras.\n        colData.splice(numColumns, colData.length);\n        return;\n      }\n\n      // There are more columns than there were previously.  Allocate more.\n      for (var i=colData.length; i<numColumns; i++)\n      {\n        colData[i] = this.getNewResizeBehaviorColumnData()();\n        colData[i].columnNumber = i;\n      }\n    },\n\n\n    /**\n     * This method is required by the box layout. If returns an array of items\n     * to relayout.\n     *\n     * @return {qx.ui.core.ColumnData[]} The list of column data object to layout.\n     */\n    getLayoutChildren : function() {\n      return this.__layoutChildren;\n    },\n\n\n    /**\n     * Computes the width of all flexible children.\n     *\n     */\n    _computeColumnsFlexWidth : function()\n    {\n      this.__deferredComputeColumnsFlexWidth.cancel();\n      var width = this._getAvailableWidth();\n\n      if (width === null) {\n        return;\n      }\n\n      var tableColumnModel = this.getTableColumnModel();\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n      var visibleColumnsLength = visibleColumns.length;\n      var colData = this.__resizeColumnData;\n      var i, l;\n\n      if (visibleColumnsLength === 0) {\n        return;\n      }\n\n      // Create an array of the visible columns\n      var columns = [ ];\n      for (i=0; i<visibleColumnsLength; i++)\n      {\n        columns.push(colData[visibleColumns[i]]);\n      }\n      this.__layoutChildren = columns;\n      this.__clearLayoutCaches();\n\n      // Use a horizontal box layout to determine the available width.\n      this.__layout.renderLayout(width, 100, {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      });\n\n      // Now that we've calculated the width, set it.\n      for (i=0,l=columns.length; i<l; i++)\n      {\n        var colWidth = columns[i].getComputedWidth();\n        tableColumnModel.setColumnWidth(visibleColumns[i], colWidth);\n      }\n    },\n\n\n    /**\n     * Clear all layout caches of the column datas.\n     */\n    __clearLayoutCaches : function()\n    {\n      this.__layout.invalidateChildrenCache();\n      var children = this.__layoutChildren;\n      for (var i=0,l=children.length; i<l; i++) {\n        children[i].invalidateLayoutCache();\n      }\n    },\n\n\n    /**\n     * Extend the visible column to right of the column which just changed\n     * width, to fill any available space within the inner width of the table.\n     * This means that if the sum of the widths of all columns exceeds the\n     * inner width of the table, no change is made.  If, on the other hand,\n     * the sum of the widths of all columns is less than the inner width of\n     * the table, the visible column to the right of the column which just\n     * changed width is extended to take up the width available within the\n     * inner width of the table.\n     *\n     *\n     * @param event {qx.event.type.Data}\n     *   The event object.\n     *\n     */\n    _extendNextColumn : function(event)\n    {\n      var tableColumnModel = this.getTableColumnModel();\n\n      // Event data properties: col, oldWidth, newWidth\n      var data = event.getData();\n\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n\n      // Determine the available width\n      var width = this._getAvailableWidth();\n\n      // Determine the number of visible columns\n      var numColumns = visibleColumns.length;\n\n      // Did this column become longer than it was?\n      if (data.newWidth > data.oldWidth)\n      {\n        // Yup.  Don't resize anything else.  The other columns will just get\n        // pushed off and require scrollbars be added (if not already there).\n        return ;\n      }\n\n      // This column became shorter.  See if we no longer take up the full\n      // space that's available to us.\n      var i;\n      var nextCol;\n      var widthUsed = 0;\n\n      for (i=0; i<numColumns; i++) {\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\n      }\n\n      // If the used width is less than the available width...\n      if (widthUsed < width)\n      {\n        // ... then determine the next visible column\n        for (i=0; i<visibleColumns.length; i++)\n        {\n          if (visibleColumns[i] == data.col)\n          {\n            nextCol = visibleColumns[i + 1];\n            break;\n          }\n        }\n\n        if (nextCol)\n        {\n          // Make the next column take up the available space.\n          var newWidth =\n            (width - (widthUsed - tableColumnModel.getColumnWidth(nextCol)));\n          tableColumnModel.setColumnWidth(nextCol, newWidth);\n        }\n      }\n    },\n\n\n    /**\n     * If a column was just made invisible, extend the last column to fill any\n     * available space within the inner width of the table.  This means that\n     * if the sum of the widths of all columns exceeds the inner width of the\n     * table, no change is made.  If, on the other hand, the sum of the widths\n     * of all columns is less than the inner width of the table, the last\n     * column is extended to take up the width available within the inner\n     * width of the table.\n     *\n     *\n     * @param event {qx.event.type.Data}\n     *   The event object.\n     *\n     */\n    _extendLastColumn : function(event)\n    {\n      var tableColumnModel = this.getTableColumnModel();\n\n      // Event data properties: col, visible\n      var data = event.getData();\n\n      // If the column just became visible, don't make any width changes\n      if (data.visible)\n      {\n        return;\n      }\n\n      // Get the array of visible columns\n      var visibleColumns = tableColumnModel.getVisibleColumns();\n\n      // If no columns are visible...\n      if (visibleColumns.length == 0)\n      {\n        return;\n      }\n\n      // Determine the available width\n      var width = this._getAvailableWidth(tableColumnModel);\n\n      // Determine the number of visible columns\n      var numColumns = visibleColumns.length;\n\n      // See if we no longer take up the full space that's available to us.\n      var i;\n      var lastCol;\n      var widthUsed = 0;\n\n      for (i=0; i<numColumns; i++) {\n        widthUsed += tableColumnModel.getColumnWidth(visibleColumns[i]);\n      }\n\n      // If the used width is less than the available width...\n      if (widthUsed < width)\n      {\n        // ... then get the last visible column\n        lastCol = visibleColumns[visibleColumns.length - 1];\n\n        // Make the last column take up the available space.\n        var newWidth =\n          (width - (widthUsed - tableColumnModel.getColumnWidth(lastCol)));\n        tableColumnModel.setColumnWidth(lastCol, newWidth);\n      }\n    },\n\n\n    /**\n     * Returns an array of the resizing information of a column.\n     *\n     * @return {qx.ui.core.ColumnData[]} array of the resizing information of a column.\n     */\n    _getResizeColumnData : function()\n    {\n      return this.__resizeColumnData;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__resizeColumnData = this.__layoutChildren = null;\n    this._disposeObjects(\"__layout\", \"__deferredComputeColumnsFlexWidth\");\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * Interface for a row renderer.\n */\nqx.Interface.define(\"qx.ui.table.IRowRenderer\",\n{\n  members :\n  {\n    /**\n     * Updates a data row.\n     *\n     * The rowInfo map contains the following properties:\n     * <ul>\n     * <li>rowData (var): contains the row data for the row.\n     *   The kind of this object depends on the table model, see\n     *   {@link ITableModel#getRowData()}</li>\n     * <li>row (int): the model index of the row.</li>\n     * <li>selected (boolean): whether a cell in this row is selected.</li>\n     * <li>focusedRow (boolean): whether the focused cell is in this row.</li>\n     * <li>table (qx.ui.table.Table): the table the row belongs to.</li>\n     * </ul>\n     *\n     * @abstract\n     * @param rowInfo {Map} A map containing the information about the row to\n     *      update.\n     * @param rowElement {Element} the DOM element that renders the data row.\n     */\n    updateDataRowElement : function(rowInfo, rowElement) {},\n\n\n    /**\n     * Get the row's height CSS style taking the box model into account\n     *\n     * @param height {Integer} The row's (border-box) height in pixel\n     */\n    getRowHeightStyle : function(height) {},\n\n\n    /**\n     * Create a style string, which will be set as the style property of the row.\n     *\n     * @param rowInfo {Map} A map containing the information about the row to\n     *      update. See {@link #updateDataRowElement} for more information.\n     */\n    createRowStyle : function(rowInfo) {},\n\n\n    /**\n     * Create a HTML class string, which will be set as the class property of the row.\n     *\n     * @param rowInfo {Map} A map containing the information about the row to\n     *      update. See {@link #updateDataRowElement} for more information.\n     */\n    getRowClass : function(rowInfo) {}\n\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n     2007 Visionet GmbH, http://www.visionet.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132) STZ-IDA\n     * Dietrich Streifert (level420) Visionet\n\n************************************************************************ */\n\n/**\n * The default data row renderer.\n */\nqx.Class.define(\"qx.ui.table.rowrenderer.Default\",\n{\n  extend : qx.core.Object,\n  implement : qx.ui.table.IRowRenderer,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.initThemeValues();\n\n    // dynamic theme switch\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().addListener(\n        \"changeTheme\", this.initThemeValues, this\n      );\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Whether the focused row should be highlighted. */\n    highlightFocusRow :\n    {\n      check : \"Boolean\",\n      init : true\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    _colors : null,\n    _fontStyle : null,\n    _fontStyleString : null,\n\n    /**\n     * Initializes the colors from the color theme.\n     * @internal\n     */\n    initThemeValues : function() {\n      this._fontStyleString = \"\";\n      this._fontStyle = {};\n\n      this._colors = {};\n\n      // link to font theme\n      this._renderFont(qx.theme.manager.Font.getInstance().resolve(\"default\"));\n\n      // link to color theme\n      var colorMgr = qx.theme.manager.Color.getInstance();\n      this._colors.bgcolFocusedSelected = colorMgr.resolve(\"table-row-background-focused-selected\");\n      this._colors.bgcolFocused = colorMgr.resolve(\"table-row-background-focused\");\n      this._colors.bgcolSelected = colorMgr.resolve(\"table-row-background-selected\");\n      this._colors.bgcolEven = colorMgr.resolve(\"table-row-background-even\");\n      this._colors.bgcolOdd = colorMgr.resolve(\"table-row-background-odd\");\n      this._colors.colSelected = colorMgr.resolve(\"table-row-selected\");\n      this._colors.colNormal = colorMgr.resolve(\"table-row\");\n      this._colors.horLine = colorMgr.resolve(\"table-row-line\");\n    },\n\n\n    /**\n     * the sum of the vertical insets. This is needed to compute the box model\n     * independent size\n     */\n    _insetY : 1, // borderBottom\n\n    /**\n     * Render the new font and update the table pane content\n     * to reflect the font change.\n     *\n     * @param font {qx.bom.Font} The font to use for the table row\n     */\n    _renderFont : function(font)\n    {\n      if (font)\n      {\n        this._fontStyle = font.getStyles();\n        this._fontStyleString = qx.bom.element.Style.compile(this._fontStyle);\n        this._fontStyleString = this._fontStyleString.replace(/\"/g, \"'\");\n      }\n      else\n      {\n        this._fontStyleString = \"\";\n        this._fontStyle = qx.bom.Font.getDefaultStyles();\n      }\n    },\n\n\n    // interface implementation\n    updateDataRowElement : function(rowInfo, rowElem)\n    {\n      var fontStyle = this._fontStyle;\n      var style = rowElem.style;\n\n      // set font styles\n      qx.bom.element.Style.setStyles(rowElem, fontStyle);\n\n      if (rowInfo.focusedRow && this.getHighlightFocusRow())\n      {\n        style.backgroundColor = rowInfo.selected ? this._colors.bgcolFocusedSelected : this._colors.bgcolFocused;\n      }\n      else\n      {\n        if (rowInfo.selected)\n        {\n          style.backgroundColor = this._colors.bgcolSelected;\n        }\n        else\n        {\n          style.backgroundColor = (rowInfo.row % 2 == 0) ? this._colors.bgcolEven : this._colors.bgcolOdd;\n        }\n      }\n\n      style.color = rowInfo.selected ? this._colors.colSelected : this._colors.colNormal;\n      style.borderBottom = \"1px solid \" + this._colors.horLine;\n    },\n\n\n    /**\n     * Get the row's height CSS style taking the box model into account\n     *\n     * @param height {Integer} The row's (border-box) height in pixel\n     * @return {String} CSS rule for the row height\n     */\n    getRowHeightStyle : function(height)\n    {\n      if (qx.core.Environment.get(\"css.boxmodel\") == \"content\") {\n        height -= this._insetY;\n      }\n\n      return \"height:\" + height + \"px;\";\n    },\n\n\n    // interface implementation\n    createRowStyle : function(rowInfo)\n    {\n      var rowStyle = [];\n      rowStyle.push(\";\");\n      rowStyle.push(this._fontStyleString);\n      rowStyle.push(\"background-color:\");\n\n      if (rowInfo.focusedRow && this.getHighlightFocusRow())\n      {\n        rowStyle.push(rowInfo.selected ? this._colors.bgcolFocusedSelected : this._colors.bgcolFocused);\n      }\n      else\n      {\n        if (rowInfo.selected)\n        {\n          rowStyle.push(this._colors.bgcolSelected);\n        }\n        else\n        {\n          rowStyle.push((rowInfo.row % 2 == 0) ? this._colors.bgcolEven : this._colors.bgcolOdd);\n        }\n      }\n\n      rowStyle.push(';color:');\n      rowStyle.push(rowInfo.selected ? this._colors.colSelected : this._colors.colNormal);\n\n      rowStyle.push(';border-bottom: 1px solid ', this._colors.horLine);\n\n      return rowStyle.join(\"\");\n    },\n\n\n    getRowClass : function(rowInfo) {\n      return \"\";\n    },\n\n    /**\n     * Add extra attributes to each row.\n     *\n     * @param rowInfo {Object}\n     *   The following members are available in rowInfo:\n     *   <dl>\n     *     <dt>table {qx.ui.table.Table}</dt>\n     *     <dd>The table object</dd>\n     *\n     *     <dt>styleHeight {Integer}</dt>\n     *     <dd>The height of this (and every) row</dd>\n     *\n     *     <dt>row {Integer}</dt>\n     *     <dd>The number of the row being added</dd>\n     *\n     *     <dt>selected {Boolean}</dt>\n     *     <dd>Whether the row being added is currently selected</dd>\n     *\n     *     <dt>focusedRow {Boolean}</dt>\n     *     <dd>Whether the row being added is currently focused</dd>\n     *\n     *     <dt>rowData {Array}</dt>\n     *     <dd>The array row from the data model of the row being added</dd>\n     *   </dl>\n     *\n     * @return {String}\n     *   Any additional attributes and their values that should be added to the\n     *   div tag for the row.\n     */\n    getRowAttributes : function(rowInfo)\n    {\n      return \"\";\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this._colors = this._fontStyle = this._fontStyleString = null;\n\n    // remove dynamic theme listener\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().removeListener(\n        \"changeTheme\", this.initThemeValues, this\n      );\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Interface for creating the column visibility menu\n */\nqx.Interface.define(\"qx.ui.table.IColumnMenuButton\",\n{\n  properties :\n  {\n    /**\n     * The menu which is displayed when this button is pressed.\n     */\n    menu : { }\n  },\n\n  members :\n  {\n    /**\n     * Instantiate a sub-widget.\n     *\n     * @param item {String}\n     *   One of the following strings, indicating what type of\n     *   column-menu-specific object to instantiate:\n     *   <dl>\n     *     <dt>menu</dt>\n     *     <dd>\n     *       Instantiate a menu which will appear when the column visibility\n     *       button is pressed. No options are provided in this case.\n     *     </dd>\n     *     <dt>menu-button</dt>\n     *     <dd>\n     *       Instantiate a button to correspond to a column within the\n     *       table. The options are a map containing <i>text</i>, the name of\n     *       the column; <i>column</i>, the column number; and\n     *       <i>bVisible</i>, a boolean indicating whether this column is\n     *       currently visible. The instantiated return object must implement\n     *       interface {@link qx.ui.table.IColumnMenuItem}\n     *     </dd>\n     *     <dt>user-button</dt>\n     *     <dd>\n     *       Instantiate a button for other than a column name. This is used,\n     *       for example, to add the \"Reset column widths\" button when the\n     *       Resize column model is requested. The options is a map containing\n     *       <i>text</i>, the text to present in the button.\n     *     </dd>\n     *     <dt>separator</dt>\n     *     <dd>\n     *       Instantiate a separator object to added to the menu. This is\n     *       used, for example, to separate the table column name list from\n     *       the \"Reset column widths\" button when the Resize column model is\n     *       requested. No options are provided in this case.\n     *     </dd>\n     *   </dl>\n     *\n     * @param options {Map}\n     *   Options specific to the <i>item</i> being requested.\n     *\n     * @return {qx.ui.core.Widget}\n     *   The instantiated object as specified by <i>item</i>.\n     */\n    factory : function(item, options)\n    {\n      return true;\n    },\n\n    /**\n     * Empty the menu of all items, in preparation for building a new column\n     * visibility menu.\n     *\n     */\n    empty : function()\n    {\n      return true;\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * The traditional qx.ui.menu.MenuButton to access the column visibility menu.\n */\nqx.Class.define(\"qx.ui.table.columnmenu.Button\",\n{\n  extend     : qx.ui.form.MenuButton,\n  implement  : qx.ui.table.IColumnMenuButton,\n\n  /**\n   * Create a new instance of a column visibility menu button. This button\n   * also contains the factory for creating each of the sub-widgets.\n   */\n  construct : function()\n  {\n    this.base(arguments);\n\n    // add blocker\n    this.__blocker = new qx.ui.core.Blocker(this);\n  },\n\n  members :\n  {\n    __columnMenuButtons : null,\n    __blocker : null,\n\n    // Documented in qx.ui.table.IColumnMenu\n    factory : function(item, options)\n    {\n      switch(item)\n      {\n        case \"menu\":\n          var menu = new qx.ui.menu.Menu();\n          this.setMenu(menu);\n          return menu;\n\n        case \"menu-button\":\n          var menuButton =\n            new qx.ui.table.columnmenu.MenuItem(options.text);\n          menuButton.setColumnVisible(options.bVisible);\n          this.getMenu().add(menuButton);\n          return menuButton;\n\n        case \"user-button\":\n          var button = new qx.ui.menu.Button(options.text);\n          button.set(\n            {\n              appearance: \"table-column-reset-button\"\n            });\n          return button;\n\n        case \"separator\":\n          return new qx.ui.menu.Separator();\n\n        default:\n          throw new Error(\"Unrecognized factory request: \" + item);\n      }\n    },\n\n\n    /**\n     * Returns the blocker of the columnmenu button.\n     *\n     * @return {qx.ui.core.Blocker} the blocker.\n     */\n    getBlocker : function() {\n      return this.__blocker;\n    },\n\n    // Documented in qx.ui.table.IColumnMenu\n    empty : function()\n    {\n      var menu = this.getMenu();\n      var entries = menu.getChildren();\n\n      for (var i=0,l=entries.length; i<l; i++)\n      {\n        entries[0].destroy();\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct: function() {\n    this.__blocker.dispose();\n  }\n\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A selection manager. This is a helper class that handles all selection\n * related events and updates a SelectionModel.\n * <p>\n * Widgets that support selection should use this manager. This way the only\n * thing the widget has to do is mapping pointer or key events to indexes and\n * call the corresponding handler method.\n *\n * @see SelectionModel\n */\nqx.Class.define(\"qx.ui.table.selection.Manager\",\n{\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function() {\n    this.base(arguments);\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The selection model where to set the selection changes.\n     */\n    selectionModel :\n    {\n      check : \"qx.ui.table.selection.Model\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __lastPointerDownHandled : null,\n\n\n    /**\n     * Handles the tap event.\n     *\n     * @param index {Integer} the index the pointer is pointing at.\n     * @param evt {qx.event.type.Tap} the pointer event.\n     */\n    handleTap : function(index, evt)\n    {\n      if (evt.isLeftPressed())\n      {\n        var selectionModel = this.getSelectionModel();\n\n        if (!selectionModel.isSelectedIndex(index))\n        {\n          // This index is not selected -> We react when the pointer is pressed (because of drag and drop)\n          this._handleSelectEvent(index, evt);\n          this.__lastPointerDownHandled = true;\n        }\n        else\n        {\n          // This index is already selected -> We react when the pointer is released (because of drag and drop)\n          this.__lastPointerDownHandled = false;\n        }\n      }\n      else if (evt.isRightPressed() && evt.getModifiers() == 0)\n      {\n        var selectionModel = this.getSelectionModel();\n\n        if (!selectionModel.isSelectedIndex(index))\n        {\n          // This index is not selected -> Set the selection to this index\n          selectionModel.setSelectionInterval(index, index);\n        }\n      }\n\n      if (evt.isLeftPressed() && !this.__lastPointerDownHandled) {\n        this._handleSelectEvent(index, evt);\n      }\n    },\n\n\n    /**\n     * Handles the key down event that is used as replacement for pointer taps\n     * (Normally space).\n     *\n     * @param index {Integer} the index that is currently focused.\n     * @param evt {Map} the key event.\n     */\n    handleSelectKeyDown : function(index, evt) {\n      this._handleSelectEvent(index, evt);\n    },\n\n\n    /**\n     * Handles a key down event that moved the focus (E.g. up, down, home, end, ...).\n     *\n     * @param index {Integer} the index that is currently focused.\n     * @param evt {Map} the key event.\n     */\n    handleMoveKeyDown : function(index, evt)\n    {\n      var selectionModel = this.getSelectionModel();\n\n      switch(evt.getModifiers())\n      {\n        case 0:\n          selectionModel.setSelectionInterval(index, index);\n          break;\n\n        case qx.event.type.Dom.SHIFT_MASK:\n          var anchor = selectionModel.getAnchorSelectionIndex();\n\n          if (anchor == -1) {\n            selectionModel.setSelectionInterval(index, index);\n          } else {\n            selectionModel.setSelectionInterval(anchor, index);\n          }\n\n          break;\n      }\n    },\n\n\n    /**\n     * Handles a select event.\n     *\n     * @param index {Integer} the index the event is pointing at.\n     * @param evt {Map} the pointer event.\n     */\n    _handleSelectEvent : function(index, evt)\n    {\n      var selectionModel = this.getSelectionModel();\n\n      var leadIndex = selectionModel.getLeadSelectionIndex();\n      var anchorIndex = selectionModel.getAnchorSelectionIndex();\n\n      if (evt.isShiftPressed())\n      {\n        if (index != leadIndex || selectionModel.isSelectionEmpty())\n        {\n          // The lead selection index was changed\n          if (anchorIndex == -1) {\n            anchorIndex = index;\n          }\n\n          if (evt.isCtrlOrCommandPressed()) {\n            selectionModel.addSelectionInterval(anchorIndex, index);\n          } else {\n            selectionModel.setSelectionInterval(anchorIndex, index);\n          }\n        }\n      }\n      else if (evt.isCtrlOrCommandPressed())\n      {\n        if (selectionModel.isSelectedIndex(index)) {\n          selectionModel.removeSelectionInterval(index, index);\n        } else {\n          selectionModel.addSelectionInterval(index, index);\n        }\n      }\n      else\n      {\n        // setSelectionInterval checks to see if the change is really necessary\n        selectionModel.setSelectionInterval(index, index);\n      }\n    }\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * David Perez Carmona (david-perez)\n\n************************************************************************ */\n\n/**\n * A selection model.\n */\nqx.Class.define(\"qx.ui.table.selection.Model\",\n{\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__selectedRangeArr = [];\n    this.__anchorSelectionIndex = -1;\n    this.__leadSelectionIndex = -1;\n    this.hasBatchModeRefCount = 0;\n    this.__hadChangeEventInBatchMode = false;\n  },\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired when the selection has changed. */\n    \"changeSelection\" : \"qx.event.type.Event\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n\n    /** @type {int} The selection mode \"none\". Nothing can ever be selected. */\n    NO_SELECTION                : 1,\n\n    /** @type {int} The selection mode \"single\". This mode only allows one selected item. */\n    SINGLE_SELECTION            : 2,\n\n\n    /**\n     * @type {int} The selection mode \"single interval\". This mode only allows one\n     * continuous interval of selected items.\n     */\n    SINGLE_INTERVAL_SELECTION   : 3,\n\n\n    /**\n     * @type {int} The selection mode \"multiple interval\". This mode only allows any\n     * selection.\n     */\n    MULTIPLE_INTERVAL_SELECTION : 4,\n\n\n    /**\n     * @type {int} The selection mode \"multiple interval\". This mode only allows any\n     * selection. The difference with the previous one, is that multiple\n     * selection is eased. A tap on an item, toggles its selection state.\n     * On the other hand, MULTIPLE_INTERVAL_SELECTION does this behavior only\n     * when Ctrl-tapping an item.\n     */\n    MULTIPLE_INTERVAL_SELECTION_TOGGLE : 5\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Set the selection mode. Valid values are {@link #NO_SELECTION},\n     * {@link #SINGLE_SELECTION}, {@link #SINGLE_INTERVAL_SELECTION},\n     * {@link #MULTIPLE_INTERVAL_SELECTION} and\n     * {@link #MULTIPLE_INTERVAL_SELECTION_TOGGLE}.\n     */\n    selectionMode :\n    {\n      init : 2, //SINGLE_SELECTION,\n      check : [1,2,3,4,5],\n      //[ NO_SELECTION, SINGLE_SELECTION, SINGLE_INTERVAL_SELECTION, MULTIPLE_INTERVAL_SELECTION, MULTIPLE_INTERVAL_SELECTION_TOGGLE ],\n      apply : \"_applySelectionMode\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __hadChangeEventInBatchMode : null,\n    __anchorSelectionIndex : null,\n    __leadSelectionIndex : null,\n    __selectedRangeArr : null,\n\n\n    // selectionMode property modifier\n    _applySelectionMode : function(selectionMode) {\n      this.resetSelection();\n    },\n\n\n    /**\n     *\n     * Activates / Deactivates batch mode. In batch mode, no change events will be thrown but\n     * will be collected instead. When batch mode is turned off again and any events have\n     * been collected, one event is thrown to inform the listeners.\n     *\n     * This method supports nested calling, i. e. batch mode can be turned more than once.\n     * In this case, batch mode will not end until it has been turned off once for each\n     * turning on.\n     *\n     * @param batchMode {Boolean} true to activate batch mode, false to deactivate\n     * @return {Boolean} true if batch mode is active, false otherwise\n     * @throws {Error} if batch mode is turned off once more than it has been turned on\n     */\n    setBatchMode : function(batchMode)\n    {\n      if (batchMode) {\n        this.hasBatchModeRefCount += 1;\n      }\n      else\n      {\n        if (this.hasBatchModeRefCount == 0) {\n          throw new Error(\"Try to turn off batch mode althoug it was not turned on.\");\n        }\n\n        this.hasBatchModeRefCount -= 1;\n\n        if (this.__hadChangeEventInBatchMode)\n        {\n          this.__hadChangeEventInBatchMode = false;\n          this._fireChangeSelection();\n        }\n      }\n\n      return this.hasBatchMode();\n    },\n\n\n    /**\n     *\n     * Returns whether batch mode is active. See setter for a description of batch mode.\n     *\n     * @return {Boolean} true if batch mode is active, false otherwise\n     */\n    hasBatchMode : function() {\n      return this.hasBatchModeRefCount > 0;\n    },\n\n\n    /**\n     * Returns the first argument of the last call to {@link #setSelectionInterval()},\n     * {@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.\n     *\n     * @return {Integer} the anchor selection index.\n     */\n    getAnchorSelectionIndex : function() {\n      return this.__anchorSelectionIndex;\n    },\n\n\n    /**\n     * Sets the anchor selection index. Only use this function, if you want manipulate\n     * the selection manually.\n     *\n     * @param index {Integer} the index to set.\n     */\n    _setAnchorSelectionIndex : function(index) {\n      this.__anchorSelectionIndex = index;\n    },\n\n\n    /**\n     * Returns the second argument of the last call to {@link #setSelectionInterval()},\n     * {@link #addSelectionInterval()} or {@link #removeSelectionInterval()}.\n     *\n     * @return {Integer} the lead selection index.\n     */\n    getLeadSelectionIndex : function() {\n      return this.__leadSelectionIndex;\n    },\n\n\n    /**\n     * Sets the lead selection index. Only use this function, if you want manipulate\n     * the selection manually.\n     *\n     * @param index {Integer} the index to set.\n     */\n    _setLeadSelectionIndex : function(index) {\n      this.__leadSelectionIndex = index;\n    },\n\n\n    /**\n     * Returns an array that holds all the selected ranges of the table. Each\n     * entry is a map holding information about the \"minIndex\" and \"maxIndex\" of the\n     * selection range.\n     *\n     * @return {Map[]} array with all the selected ranges.\n     */\n    _getSelectedRangeArr : function() {\n      return this.__selectedRangeArr;\n    },\n\n\n    /**\n     * Resets (clears) the selection.\n     */\n    resetSelection : function()\n    {\n      if (!this.isSelectionEmpty())\n      {\n        this._resetSelection();\n        this._fireChangeSelection();\n      }\n    },\n\n\n    /**\n     * Returns whether the selection is empty.\n     *\n     * @return {Boolean} whether the selection is empty.\n     */\n    isSelectionEmpty : function() {\n      return this.__selectedRangeArr.length == 0;\n    },\n\n\n    /**\n     * Returns the number of selected items.\n     *\n     * @return {Integer} the number of selected items.\n     */\n    getSelectedCount : function()\n    {\n      var selectedCount = 0;\n\n      for (var i=0; i<this.__selectedRangeArr.length; i++)\n      {\n        var range = this.__selectedRangeArr[i];\n        selectedCount += range.maxIndex - range.minIndex + 1;\n      }\n\n      return selectedCount;\n    },\n\n\n    /**\n     * Returns whether an index is selected.\n     *\n     * @param index {Integer} the index to check.\n     * @return {Boolean} whether the index is selected.\n     */\n    isSelectedIndex : function(index)\n    {\n      for (var i=0; i<this.__selectedRangeArr.length; i++)\n      {\n        var range = this.__selectedRangeArr[i];\n\n        if (index >= range.minIndex && index <= range.maxIndex) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Returns the selected ranges as an array. Each array element has a\n     * <code>minIndex</code> and a <code>maxIndex</code> property.\n     *\n     * @return {Map[]} the selected ranges.\n     */\n    getSelectedRanges : function()\n    {\n      // clone the selection array and the individual elements - this prevents the\n      // caller from messing with the internal model\n      var retVal = [];\n\n      for (var i=0; i<this.__selectedRangeArr.length; i++)\n      {\n        retVal.push(\n        {\n          minIndex : this.__selectedRangeArr[i].minIndex,\n          maxIndex : this.__selectedRangeArr[i].maxIndex\n        });\n      }\n\n      return retVal;\n    },\n\n\n    /**\n     * Calls an iterator function for each selected index.\n     *\n     * Usage Example:\n     * <pre class='javascript'>\n     * var selectedRowData = [];\n     * mySelectionModel.iterateSelection(function(index) {\n     *   selectedRowData.push(myTableModel.getRowData(index));\n     * });\n     * </pre>\n     *\n     * @param iterator {Function} the function to call for each selected index.\n     *          Gets the current index as parameter.\n     * @param object {var ? null} the object to use when calling the handler.\n     *          (this object will be available via \"this\" in the iterator)\n     */\n    iterateSelection : function(iterator, object)\n    {\n      for (var i=0; i<this.__selectedRangeArr.length; i++)\n      {\n        for (var j=this.__selectedRangeArr[i].minIndex; j<=this.__selectedRangeArr[i].maxIndex; j++) {\n          iterator.call(object, j);\n        }\n      }\n    },\n\n\n    /**\n     * Sets the selected interval. This will clear the former selection.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    setSelectionInterval : function(fromIndex, toIndex)\n    {\n      var me = this.self(arguments);\n\n      switch(this.getSelectionMode())\n      {\n        case me.NO_SELECTION:\n          return;\n\n        case me.SINGLE_SELECTION:\n          // Ensure there is actually a change of selection\n          if (this.isSelectedIndex(toIndex)) {\n            return;\n          }\n\n          fromIndex = toIndex;\n          break;\n\n        case me.MULTIPLE_INTERVAL_SELECTION_TOGGLE:\n          this.setBatchMode(true);\n          try\n          {\n            for (var i = fromIndex; i <= toIndex; i++)\n            {\n              if (!this.isSelectedIndex(i))\n              {\n                this._addSelectionInterval(i, i);\n              }\n              else\n              {\n                this.removeSelectionInterval(i, i);\n              }\n            }\n          }\n          catch (e) {\n            throw e;\n          }\n          finally {\n            this.setBatchMode(false);\n          }\n          this._fireChangeSelection();\n          return;\n      }\n\n      this._resetSelection();\n      this._addSelectionInterval(fromIndex, toIndex);\n\n      this._fireChangeSelection();\n    },\n\n\n    /**\n     * Adds a selection interval to the current selection.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    addSelectionInterval : function(fromIndex, toIndex)\n    {\n      var SelectionModel = qx.ui.table.selection.Model;\n\n      switch(this.getSelectionMode())\n      {\n        case SelectionModel.NO_SELECTION:\n          return;\n\n        case SelectionModel.MULTIPLE_INTERVAL_SELECTION:\n        case SelectionModel.MULTIPLE_INTERVAL_SELECTION_TOGGLE:\n          this._addSelectionInterval(fromIndex, toIndex);\n          this._fireChangeSelection();\n          break;\n\n        default:\n          this.setSelectionInterval(fromIndex, toIndex);\n          break;\n      }\n    },\n\n\n    /**\n     * Removes an interval from the current selection.\n     *\n     * @param fromIndex {Integer} the first index of the interval (including).\n     * @param toIndex {Integer} the last index of the interval (including).\n     * @param rowsRemoved {Boolean?} rows were removed that caused this selection to change.\n     *   If rows were removed, move the selections over so the same rows are selected as before.\n     */\n    removeSelectionInterval : function(fromIndex, toIndex, rowsRemoved)\n    {\n      this.__anchorSelectionIndex = fromIndex;\n      this.__leadSelectionIndex = toIndex;\n\n      var minIndex = Math.min(fromIndex, toIndex);\n      var maxIndex = Math.max(fromIndex, toIndex);\n      var removeCount = maxIndex + 1 - minIndex;\n\n      // Crop the affected ranges\n      var newRanges = [];\n      var extraRange = null;\n      for (var i=0; i<this.__selectedRangeArr.length; i++)\n      {\n        var range = this.__selectedRangeArr[i];\n\n        if (range.minIndex > maxIndex)\n        {\n          if (rowsRemoved) {\n            // Move whole selection up.\n            range.minIndex -= removeCount;\n            range.maxIndex -= removeCount;\n          }\n        }\n        else if (range.maxIndex >= minIndex)\n        {\n          // This range is affected\n          var minIsIn = (range.minIndex >= minIndex);\n          var maxIsIn = (range.maxIndex >= minIndex) && (range.maxIndex <= maxIndex);\n\n          if (minIsIn && maxIsIn)\n          {\n            // This range is removed completely\n            range = null;\n          }\n          else if (minIsIn)\n          {\n            if (rowsRemoved) {\n              range.minIndex = minIndex;\n              range.maxIndex -= removeCount;\n            } else {\n              // The range is cropped from the left\n              range.minIndex = maxIndex + 1;\n            }\n          }\n          else if (maxIsIn)\n          {\n            // The range is cropped from the right\n            range.maxIndex = minIndex - 1;\n          }\n          else\n          {\n            if (rowsRemoved) {\n              range.maxIndex -= removeCount;\n            } else {\n              // The range is split\n              extraRange = {\n                minIndex: maxIndex + 1,\n                maxIndex: range.maxIndex\n              };\n\n              range.maxIndex = minIndex - 1;\n            }\n          }\n        }\n\n        if (range) {\n          newRanges.push(range);\n          range = null;\n        }\n        if (extraRange) {\n          newRanges.push(extraRange);\n          extraRange = null;\n        }\n      }\n\n      this.__selectedRangeArr = newRanges;\n\n      this._fireChangeSelection();\n    },\n\n\n    /**\n     * Resets (clears) the selection, but doesn't inform the listeners.\n     */\n    _resetSelection : function()\n    {\n      this.__selectedRangeArr = [];\n      this.__anchorSelectionIndex = -1;\n      this.__leadSelectionIndex = -1;\n    },\n\n\n    /**\n     * Adds a selection interval to the current selection, but doesn't inform\n     * the listeners.\n     *\n     * @param fromIndex {Integer} the first index of the selection (including).\n     * @param toIndex {Integer} the last index of the selection (including).\n     */\n    _addSelectionInterval : function(fromIndex, toIndex)\n    {\n      this.__anchorSelectionIndex = fromIndex;\n      this.__leadSelectionIndex = toIndex;\n\n      var minIndex = Math.min(fromIndex, toIndex);\n      var maxIndex = Math.max(fromIndex, toIndex);\n\n      // Find the index where the new range should be inserted\n      var newRangeIndex = 0;\n\n      for (;newRangeIndex<this.__selectedRangeArr.length; newRangeIndex++)\n      {\n        var range = this.__selectedRangeArr[newRangeIndex];\n\n        if (range.minIndex > minIndex) {\n          break;\n        }\n      }\n\n      // Add the new range\n      this.__selectedRangeArr.splice(newRangeIndex, 0,\n      {\n        minIndex : minIndex,\n        maxIndex : maxIndex\n      });\n\n      // Merge overlapping ranges\n      var lastRange = this.__selectedRangeArr[0];\n\n      for (var i=1; i<this.__selectedRangeArr.length; i++)\n      {\n        var range = this.__selectedRangeArr[i];\n\n        if (lastRange.maxIndex + 1 >= range.minIndex)\n        {\n          // The ranges are overlapping -> merge them\n          lastRange.maxIndex = Math.max(lastRange.maxIndex, range.maxIndex);\n\n          // Remove the current range\n          this.__selectedRangeArr.splice(i, 1);\n\n          // Check this index another time\n          i--;\n        }\n        else\n        {\n          lastRange = range;\n        }\n      }\n    },\n\n    // this._dumpRanges();\n    /**\n     * Logs the current ranges for debug purposes.\n     *\n     */\n    _dumpRanges : function()\n    {\n      var text = \"Ranges:\";\n\n      for (var i=0; i<this.__selectedRangeArr.length; i++)\n      {\n        var range = this.__selectedRangeArr[i];\n        text += \" [\" + range.minIndex + \"..\" + range.maxIndex + \"]\";\n      }\n\n      this.debug(text);\n    },\n\n\n    /**\n     * Fires the \"changeSelection\" event to all registered listeners. If the selection model\n     * currently is in batch mode, only one event will be thrown when batch mode is ended.\n     *\n     */\n    _fireChangeSelection : function()\n    {\n      if (this.hasBatchMode())\n      {\n        // In batch mode, remember event but do not throw (yet)\n        this.__hadChangeEventInBatchMode = true;\n      }\n      else\n      {\n        // If not in batch mode, throw event\n        this.fireEvent(\"changeSelection\");\n      }\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__selectedRangeArr = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The table pane that shows a certain section from a table. This class handles\n * the display of the data part of a table and is therefore the base for virtual\n * scrolling.\n */\nqx.Class.define(\"qx.ui.table.pane.Pane\",\n{\n  extend : qx.ui.core.Widget,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.\n   */\n  construct : function(paneScroller)\n  {\n    this.base(arguments);\n\n    this.__paneScroller = paneScroller;\n\n    this.__lastColCount = 0;\n    this.__lastRowCount = 0;\n\n    this.__rowCache = [];\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n\n  events :\n  {\n    /**\n     * Whether the current view port of the pane has not loaded data.\n     * The data object of the event indicates if the table pane has to reload\n     * data or not. Can be used to give the user feedback of the loading state\n     * of the rows.\n     */\n    \"paneReloadsData\" : \"qx.event.type.Data\",\n\n    /**\n     * Whenever the content of the table pane has been updated (rendered)\n     * trigger a paneUpdated event. This allows the canvas cellrenderer to act\n     * once the new cells have been integrated in the dom.\n     */\n    \"paneUpdated\" : \"qx.event.type.Event\"\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The index of the first row to show. */\n    firstVisibleRow :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyFirstVisibleRow\"\n    },\n\n\n    /** The number of rows to show. */\n    visibleRowCount :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyVisibleRowCount\"\n    },\n\n\n    /**\n     * Maximum number of cached rows. If the value is <code>-1</code> the cache\n     * size is unlimited\n     */\n    maxCacheLines :\n    {\n      check : \"Number\",\n      init : 1000,\n      apply : \"_applyMaxCacheLines\"\n    },\n\n    // overridden\n    allowShrinkX :\n    {\n      refine : true,\n      init : false\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __lastRowCount : null,\n    __lastColCount : null,\n\n    __paneScroller : null,\n    __tableContainer : null,\n\n    __focusedRow : null,\n    __focusedCol : null,\n\n    // sparse array to cache rendered rows\n    __rowCache : null,\n    __rowCacheCount : 0,\n\n\n    // property modifier\n    _applyFirstVisibleRow : function(value, old) {\n      this.updateContent(false, value-old);\n    },\n\n\n    // property modifier\n    _applyVisibleRowCount : function(value, old) {\n      this.updateContent(true);\n    },\n\n\n    // overridden\n    _getContentHint : function()\n    {\n      // the preferred height is 400 pixel. We don't use rowCount * rowHeight\n      // because this is typically too large.\n      return {\n        width: this.getPaneScroller().getTablePaneModel().getTotalWidth(),\n        height: 400\n      };\n    },\n\n\n    /**\n     * Returns the TablePaneScroller this pane belongs to.\n     *\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller.\n     */\n    getPaneScroller : function() {\n      return this.__paneScroller;\n    },\n\n\n    /**\n     * Returns the table this pane belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable : function() {\n      return this.__paneScroller.getTable();\n    },\n\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param massUpdate {Boolean ? false} Whether other updates are planned as well.\n     *          If true, no repaint will be done.\n     */\n    setFocusedCell : function(col, row, massUpdate)\n    {\n      if (col != this.__focusedCol || row != this.__focusedRow)\n      {\n        var oldRow = this.__focusedRow;\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        // Update the focused row background\n        if (row != oldRow && !massUpdate)\n        {\n          if (oldRow !== null) {\n            this.updateContent(false, null, oldRow, true);\n          }\n          if (row !== null) {\n            this.updateContent(false, null, row, true);\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged : function() {\n      this.updateContent(false, null, null, true);\n    },\n\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged : function() {\n      this.updateContent(false, null, null, true);\n    },\n\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth : function(col, width) {\n      this.updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called the column order has changed.\n     *\n     */\n    onColOrderChanged : function() {\n      this.updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    onPaneModelChanged : function() {\n      this.updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged : function(firstRow, lastRow, firstColumn, lastColumn)\n    {\n      this.__rowCacheClear();\n\n      var paneFirstRow = this.getFirstVisibleRow();\n      var rowCount = this.getVisibleRowCount();\n\n      if (lastRow == -1 || lastRow >= paneFirstRow && firstRow < paneFirstRow + rowCount)\n      {\n        // The change intersects this pane\n        this.updateContent();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged : function() {\n      this.updateContent(true);\n    },\n\n\n    // property apply method\n    _applyMaxCacheLines : function(value, old)\n    {\n      if (this.__rowCacheCount >= value && value !== -1) {\n        this.__rowCacheClear();\n      }\n    },\n\n\n    /**\n     * Clear the row cache\n     */\n    __rowCacheClear : function()\n    {\n      this.__rowCache = [];\n      this.__rowCacheCount = 0;\n    },\n\n\n    /**\n     * Get a line from the row cache.\n     *\n     * @param row {Integer} Row index to get\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     * @return {String|null} The cached row or null if a row with the given\n     *     index is not cached.\n     */\n    __rowCacheGet : function(row, selected, focused)\n    {\n      if (!selected && !focused && this.__rowCache[row]) {\n        return this.__rowCache[row];\n      } else {\n        return null;\n      }\n    },\n\n\n    /**\n     * Add a line to the row cache.\n     *\n     * @param row {Integer} Row index to set\n     * @param rowString {String} computed row string to cache\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     */\n    __rowCacheSet : function(row, rowString, selected, focused)\n    {\n      var maxCacheLines = this.getMaxCacheLines();\n      if (\n        !selected &&\n        !focused &&\n        !this.__rowCache[row] &&\n        maxCacheLines > 0\n      ) {\n        this._applyMaxCacheLines(maxCacheLines);\n        this.__rowCache[row] = rowString;\n        this.__rowCacheCount += 1;\n      }\n    },\n\n\n    /**\n     * Updates the content of the pane.\n     *\n     * @param completeUpdate {Boolean ? false} if true a complete update is performed.\n     *      On a complete update all cell widgets are recreated.\n     * @param scrollOffset {Integer ? null} If set specifies how many rows to scroll.\n     * @param onlyRow {Integer ? null} if set only the specified row will be updated.\n     * @param onlySelectionOrFocusChanged {Boolean ? false} if true, cell values won't\n     *          be updated. Only the row background will.\n     */\n    updateContent : function(completeUpdate, scrollOffset, onlyRow, onlySelectionOrFocusChanged)\n    {\n      if (completeUpdate) {\n        this.__rowCacheClear();\n      }\n\n      if (scrollOffset && Math.abs(scrollOffset) <= Math.min(10, this.getVisibleRowCount())) {\n        this._scrollContent(scrollOffset);\n      } else if (onlySelectionOrFocusChanged && !this.getTable().getAlwaysUpdateCells()) {\n        this._updateRowStyles(onlyRow);\n      } else {\n        this._updateAllRows();\n      }\n    },\n\n\n    /**\n     * If only focus or selection changes it is sufficient to only update the\n     * row styles. This method updates the row styles of all visible rows or\n     * of just one row.\n     *\n     * @param onlyRow {Integer|null ? null} If this parameter is set only the row\n     *     with this index is updated.\n     */\n    _updateRowStyles : function(onlyRow)\n    {\n      var elem = this.getContentElement().getDomElement();\n\n      if (!elem || !elem.firstChild) {\n        this._updateAllRows();\n        return;\n      }\n\n      var table = this.getTable();\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var rowRenderer = table.getDataRowRenderer();\n      var rowNodes = elem.firstChild.childNodes;\n      var cellInfo = { table : table };\n\n      // We don't want to execute the row loop below more than necessary. If\n      // onlyRow is not null, we want to do the loop only for that row.\n      // In that case, we start at (set the \"row\" variable to) that row, and\n      // stop at (set the \"end\" variable to the offset of) the next row.\n      var row = this.getFirstVisibleRow();\n      var y = 0;\n\n      // How many rows do we need to update?\n      var end = rowNodes.length;\n\n      if (onlyRow != null)\n      {\n        // How many rows are we skipping?\n        var offset = onlyRow - row;\n        if (offset >= 0 && offset < end)\n        {\n          row = onlyRow;\n          y = offset;\n          end = offset + 1;\n        } else\n        {\n          return;\n        }\n      }\n\n      for (; y<end; y++, row++)\n      {\n        cellInfo.row = row;\n        cellInfo.selected = selectionModel.isSelectedIndex(row);\n        cellInfo.focusedRow = (this.__focusedRow == row);\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        rowRenderer.updateDataRowElement(cellInfo, rowNodes[y]);\n      };\n    },\n\n\n    /**\n     * Get the HTML table fragment for the given row range.\n     *\n     * @param firstRow {Integer} Index of the first row\n     * @param rowCount {Integer} Number of rows\n     * @return {String} The HTML table fragment for the given row range.\n     */\n    _getRowsHtml : function(firstRow, rowCount)\n    {\n      var table = this.getTable();\n\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var columnModel = table.getTableColumnModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n      var rowRenderer = table.getDataRowRenderer();\n\n      tableModel.prefetchRows(firstRow, firstRow + rowCount - 1);\n\n      var rowHeight = table.getRowHeight();\n      var colCount = paneModel.getColumnCount();\n      var left = 0;\n      var cols = [];\n\n      // precompute column properties\n      for (var x=0; x<colCount; x++)\n      {\n        var col = paneModel.getColumnAtX(x);\n        var cellWidth = columnModel.getColumnWidth(col);\n        cols.push({\n          col: col,\n          xPos: x,\n          editable: tableModel.isColumnEditable(col),\n          focusedCol: this.__focusedCol == col,\n          styleLeft: left,\n          styleWidth: cellWidth\n        });\n\n        left += cellWidth;\n      }\n\n      var rowsArr = [];\n      var paneReloadsData = false;\n      for (var row=firstRow; row < firstRow + rowCount; row++)\n      {\n        var selected = selectionModel.isSelectedIndex(row);\n        var focusedRow = (this.__focusedRow == row);\n\n        var cachedRow = this.__rowCacheGet(row, selected, focusedRow);\n        if (cachedRow) {\n          rowsArr.push(cachedRow);\n          continue;\n        }\n\n        var rowHtml = [];\n\n        var cellInfo = { table : table };\n        cellInfo.styleHeight = rowHeight;\n\n        cellInfo.row = row;\n        cellInfo.selected = selected;\n        cellInfo.focusedRow = focusedRow;\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        if (!cellInfo.rowData) {\n          paneReloadsData = true;\n        }\n\n        rowHtml.push('<div ');\n\n        var rowAttributes = rowRenderer.getRowAttributes(cellInfo);\n        if (rowAttributes) {\n          rowHtml.push(rowAttributes);\n        }\n\n        var rowClass = rowRenderer.getRowClass(cellInfo);\n        if (rowClass) {\n          rowHtml.push('class=\"', rowClass, '\" ');\n        }\n\n        var rowStyle = rowRenderer.createRowStyle(cellInfo);\n        rowStyle += \";position:relative;\" + rowRenderer.getRowHeightStyle(rowHeight)+ \"width:100%;\";\n        if (rowStyle) {\n          rowHtml.push('style=\"', rowStyle, '\" ');\n        }\n        rowHtml.push('>');\n\n        var stopLoop = false;\n        for (x=0; x<colCount && !stopLoop; x++)\n        {\n          var col_def = cols[x];\n          for (var attr in col_def) {\n            cellInfo[attr] = col_def[attr];\n          }\n          var col = cellInfo.col;\n\n          // Use the \"getValue\" method of the tableModel to get the cell's\n          // value working directly on the \"rowData\" object\n          // (-> cellInfo.rowData[col];) is not a solution because you can't\n          // work with the columnIndex -> you have to use the columnId of the\n          // columnIndex This is exactly what the method \"getValue\" does\n          cellInfo.value = tableModel.getValue(col, row);\n          var cellRenderer = columnModel.getDataCellRenderer(col);\n\n          // Retrieve the current default cell style for this column.\n          cellInfo.style = cellRenderer.getDefaultCellStyle();\n\n          // Allow a cell renderer to tell us not to draw any further cells in\n          // the row. Older, or traditional cell renderers don't return a\n          // value, however, from createDataCellHtml, so assume those are\n          // returning false.\n          //\n          // Tested with http://tinyurl.com/333hyhv\n          stopLoop =\n            cellRenderer.createDataCellHtml(cellInfo, rowHtml) || false;\n        }\n        rowHtml.push('</div>');\n\n        var rowString = rowHtml.join(\"\");\n\n        this.__rowCacheSet(row, rowString, selected, focusedRow);\n        rowsArr.push(rowString);\n      }\n      this.fireDataEvent(\"paneReloadsData\", paneReloadsData);\n      return rowsArr.join(\"\");\n    },\n\n\n    /**\n     * Scrolls the pane's contents by the given offset.\n     *\n     * @param rowOffset {Integer} Number of lines to scroll. Scrolling up is\n     *     represented by a negative offset.\n     */\n    _scrollContent : function(rowOffset)\n    {\n      var el = this.getContentElement().getDomElement();\n      if (!(el && el.firstChild)) {\n        this._updateAllRows();\n        return;\n      }\n\n      var tableBody = el.firstChild;\n      var tableChildNodes = tableBody.childNodes;\n      var rowCount = this.getVisibleRowCount();\n      var firstRow = this.getFirstVisibleRow();\n\n      var tabelModel = this.getTable().getTableModel();\n      var modelRowCount = 0;\n\n      modelRowCount = tabelModel.getRowCount();\n\n      // don't handle this special case here\n      if (firstRow + rowCount > modelRowCount) {\n        this._updateAllRows();\n        return;\n      }\n\n      // remove old lines\n      var removeRowBase = rowOffset < 0 ? rowCount + rowOffset : 0;\n      var addRowBase = rowOffset < 0 ? 0: rowCount - rowOffset;\n\n      for (var i=Math.abs(rowOffset)-1; i>=0; i--)\n      {\n        var rowElem = tableChildNodes[removeRowBase];\n        try {\n          tableBody.removeChild(rowElem);\n        } catch(exp) {\n          break;\n        }\n      }\n\n      // render new lines\n      if (!this.__tableContainer) {\n        this.__tableContainer = document.createElement(\"div\");\n      }\n      var tableDummy = '<div>';\n      tableDummy += this._getRowsHtml(firstRow + addRowBase, Math.abs(rowOffset));\n      tableDummy += '</div>';\n      this.__tableContainer.innerHTML = tableDummy;\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\n\n      // append new lines\n      if (rowOffset > 0)\n      {\n        for (var i=newTableRows.length-1; i>=0; i--)\n        {\n          var rowElem = newTableRows[0];\n          tableBody.appendChild(rowElem);\n        }\n      }\n      else\n      {\n        for (var i=newTableRows.length-1; i>=0; i--)\n        {\n          var rowElem = newTableRows[newTableRows.length-1];\n          tableBody.insertBefore(rowElem, tableBody.firstChild);\n        }\n      }\n\n      // update focus indicator\n      if (this.__focusedRow !== null)\n      {\n        this._updateRowStyles(this.__focusedRow - rowOffset);\n        this._updateRowStyles(this.__focusedRow);\n      }\n      this.fireEvent(\"paneUpdated\");\n    },\n\n\n    /**\n     * Updates the content of the pane (implemented using array joins).\n     */\n    _updateAllRows : function()\n    {\n      var elem = this.getContentElement().getDomElement();\n      if (!elem) {\n        // pane has not yet been rendered\n        this.addListenerOnce(\"appear\", this._updateAllRows, this);\n        return;\n      }\n\n      var table = this.getTable();\n\n      var tableModel = table.getTableModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n\n      var colCount = paneModel.getColumnCount();\n      var rowHeight = table.getRowHeight();\n      var firstRow = this.getFirstVisibleRow();\n\n      var rowCount = this.getVisibleRowCount();\n      var modelRowCount = tableModel.getRowCount();\n\n      if (firstRow + rowCount > modelRowCount) {\n        rowCount = Math.max(0, modelRowCount - firstRow);\n      }\n\n      var rowWidth = paneModel.getTotalWidth();\n      var htmlArr;\n\n      // If there are any rows...\n      if (rowCount > 0)\n      {\n        // ... then create a div for them and add the rows to it.\n        htmlArr =\n          [\n            \"<div style='\",\n            \"width: 100%;\",\n            (table.getForceLineHeight()\n             ? \"line-height: \" + rowHeight + \"px;\"\n             : \"\"),\n            \"overflow: hidden;\",\n            \"'>\",\n            this._getRowsHtml(firstRow, rowCount),\n            \"</div>\"\n          ];\n      }\n      else\n      {\n        // Otherwise, don't create the div, as even an empty div creates a\n        // white row in IE.\n        htmlArr = [];\n      }\n\n      var data = htmlArr.join(\"\");\n      elem.innerHTML = data;\n      this.setWidth(rowWidth);\n\n      this.__lastColCount = colCount;\n      this.__lastRowCount = rowCount;\n      this.fireEvent(\"paneUpdated\");\n    }\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__tableContainer = this.__paneScroller = this.__rowCache = null;\n    this.removeListener(\"track\", this._onTrack, this);\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * Shows the header of a table.\n */\nqx.Class.define(\"qx.ui.table.pane.Header\",\n{\n  extend : qx.ui.core.Widget,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.\n   */\n  construct : function(paneScroller)\n  {\n    this.base(arguments);\n    this._setLayout(new qx.ui.layout.HBox());\n\n    // add blocker\n    this.__blocker = new qx.ui.core.Blocker(this);\n\n    this.__paneScroller = paneScroller;\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __paneScroller : null,\n    __moveFeedback : null,\n    __lastPointerOverColumn : null,\n    __blocker : null,\n\n    /**\n     * Returns the TablePaneScroller this header belongs to.\n     *\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller.\n     */\n    getPaneScroller : function() {\n      return this.__paneScroller;\n    },\n\n\n    /**\n     * Returns the table this header belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable : function() {\n      return this.__paneScroller.getTable();\n    },\n\n    /**\n     * Returns the blocker of the header.\n     *\n     * @return {qx.ui.core.Blocker} the blocker.\n     */\n    getBlocker : function() {\n      return this.__blocker;\n    },\n\n    /**\n     * Event handler. Called the column order has changed.\n     *\n     */\n    onColOrderChanged : function() {\n      this._updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    onPaneModelChanged : function() {\n      this._updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged : function() {\n      this._updateContent();\n    },\n\n\n    /**\n     * Sets the column width. This overrides the width from the column model.\n     *\n     * @param col {Integer}\n     *   The column to change the width for.\n     *\n     * @param width {Integer}\n     *   The new width.\n     *\n     * @param isPointerAction {Boolean}\n     *   <i>true</i> if the column width is being changed as a result of a\n     *   pointer drag in the header; false or undefined otherwise.\n     *\n     */\n    setColumnWidth : function(col, width, isPointerAction)\n    {\n      var child = this.getHeaderWidgetAtColumn(col);\n\n      if (child != null) {\n        child.setWidth(width);\n      }\n    },\n\n\n    /**\n     * Sets the column the pointer is currently over.\n     *\n     * @param col {Integer} the model index of the column the pointer is currently over or\n     *      null if the pointer is over no column.\n     */\n    setPointerOverColumn : function(col)\n    {\n      if (col != this.__lastPointerOverColumn)\n      {\n        if (this.__lastPointerOverColumn != null)\n        {\n          var widget = this.getHeaderWidgetAtColumn(this.__lastPointerOverColumn);\n\n          if (widget != null) {\n            widget.removeState(\"hovered\");\n          }\n        }\n\n        if (col != null) {\n          this.getHeaderWidgetAtColumn(col).addState(\"hovered\");\n        }\n\n        this.__lastPointerOverColumn = col;\n      }\n    },\n\n\n    /**\n     * Get the header widget for the given column\n     *\n     * @param col {Integer} The column number\n     * @return {qx.ui.table.headerrenderer.HeaderCell} The header cell widget\n     */\n    getHeaderWidgetAtColumn : function(col)\n    {\n      var xPos = this.getPaneScroller().getTablePaneModel().getX(col);\n      return this._getChildren()[xPos];\n    },\n\n\n    /**\n     * Shows the feedback shown while a column is moved by the user.\n     *\n     * @param col {Integer} the model index of the column to show the move feedback for.\n     * @param x {Integer} the x position the left side of the feedback should have\n     *      (in pixels, relative to the left side of the header).\n     */\n    showColumnMoveFeedback : function(col, x)\n    {\n      var pos = this.getContentLocation();\n\n      if (this.__moveFeedback == null)\n      {\n        var table = this.getTable();\n        var xPos = this.getPaneScroller().getTablePaneModel().getX(col);\n        var cellWidget = this._getChildren()[xPos];\n\n        var tableModel = table.getTableModel();\n        var columnModel = table.getTableColumnModel();\n\n        var cellInfo =\n        {\n          xPos  : xPos,\n          col   : col,\n          name  : tableModel.getColumnName(col),\n          table : table\n        };\n\n        var cellRenderer = columnModel.getHeaderCellRenderer(col);\n        var feedback = cellRenderer.createHeaderCell(cellInfo);\n\n        var size = cellWidget.getBounds();\n\n        // Configure the feedback\n        feedback.setWidth(size.width);\n        feedback.setHeight(size.height);\n        feedback.setZIndex(1000000);\n        feedback.setOpacity(0.8);\n        feedback.setLayoutProperties({top: pos.top});\n\n        this.getApplicationRoot().add(feedback);\n        this.__moveFeedback = feedback;\n      }\n\n      this.__moveFeedback.setLayoutProperties({left: pos.left + x});\n      this.__moveFeedback.show();\n    },\n\n\n    /**\n     * Hides the feedback shown while a column is moved by the user.\n     */\n    hideColumnMoveFeedback : function()\n    {\n      if (this.__moveFeedback != null)\n      {\n        this.__moveFeedback.destroy();\n        this.__moveFeedback = null;\n      }\n    },\n\n\n    /**\n     * Returns whether the column move feedback is currently shown.\n     *\n     * @return {Boolean} <code>true</code> whether the column move feedback is\n     *    currently shown, <code>false</code> otherwise.\n     */\n    isShowingColumnMoveFeedback : function() {\n      return this.__moveFeedback != null;\n    },\n\n\n    /**\n     * Updates the content of the header.\n     *\n     * @param completeUpdate {Boolean} if true a complete update is performed. On a\n     *      complete update all header widgets are recreated.\n     */\n    _updateContent : function(completeUpdate)\n    {\n      var table = this.getTable();\n      var tableModel = table.getTableModel();\n      var columnModel = table.getTableColumnModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n\n      var children = this._getChildren();\n      var colCount = paneModel.getColumnCount();\n\n      var sortedColumn = tableModel.getSortColumnIndex();\n\n      // Remove all widgets on the complete update\n      if (completeUpdate) {\n        this._cleanUpCells();\n      }\n\n      // Update the header\n      var cellInfo = {};\n      cellInfo.sortedAscending = tableModel.isSortAscending();\n\n      for (var x=0; x<colCount; x++)\n      {\n        var col = paneModel.getColumnAtX(x);\n        if (col === undefined) {\n          continue;\n        }\n\n        var colWidth = columnModel.getColumnWidth(col);\n\n        var cellRenderer = columnModel.getHeaderCellRenderer(col);\n\n        cellInfo.xPos = x;\n        cellInfo.col = col;\n        cellInfo.name = tableModel.getColumnName(col);\n        cellInfo.editable = tableModel.isColumnEditable(col);\n        cellInfo.sorted = (col == sortedColumn);\n        cellInfo.table = table;\n\n        // Get the cached widget\n        var cachedWidget = children[x];\n\n        // Create or update the widget\n        if (cachedWidget == null)\n        {\n          // We have no cached widget -> create it\n          cachedWidget = cellRenderer.createHeaderCell(cellInfo);\n\n          cachedWidget.set(\n          {\n            width  : colWidth\n          });\n\n          this._add(cachedWidget);\n        }\n        else\n        {\n          // This widget already created before -> recycle it\n          cellRenderer.updateHeaderCell(cellInfo, cachedWidget);\n        }\n\n        // set the states\n        if (x === 0) {\n          cachedWidget.addState(\"first\");\n          cachedWidget.removeState(\"last\");\n        } else if (x === colCount - 1) {\n          cachedWidget.removeState(\"first\");\n          cachedWidget.addState(\"last\");\n        } else {\n          cachedWidget.removeState(\"first\");\n          cachedWidget.removeState(\"last\");\n        }\n      }\n    },\n\n\n    /**\n     * Cleans up all header cells.\n     *\n     */\n    _cleanUpCells : function()\n    {\n      var children = this._getChildren();\n\n      for (var x=children.length-1; x>=0; x--)\n      {\n        var cellWidget = children[x];\n        cellWidget.destroy();\n      }\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__blocker.dispose();\n    this._disposeObjects(\"__paneScroller\");\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Shows a whole meta column. This includes a {@link Header},\n * a {@link Pane} and the needed scroll bars. This class handles the\n * virtual scrolling and does all the pointer event handling.\n *\n * @childControl header {qx.ui.table.pane.Header} header pane\n * @childControl pane {qx.ui.table.pane.Pane} table pane to show the data\n * @childControl focus-indicator {qx.ui.table.pane.FocusIndicator} shows the current focused cell\n * @childControl resize-line {qx.ui.core.Widget} resize line widget\n * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               horizontal scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n *               vertical scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)\n */\nqx.Class.define(\"qx.ui.table.pane.Scroller\",\n{\n  extend : qx.ui.core.Widget,\n  include : [qx.ui.core.scroll.MScrollBarFactory],\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param table {qx.ui.table.Table} the table the scroller belongs to.\n   */\n  construct : function(table)\n  {\n    this.base(arguments);\n\n    this.__table = table;\n\n    // init layout\n    var grid = new qx.ui.layout.Grid();\n    grid.setColumnFlex(0, 1);\n    grid.setRowFlex(1, 1);\n    this._setLayout(grid);\n\n    // init child controls\n    this.__header = this._showChildControl(\"header\");\n    this.__tablePane = this._showChildControl(\"pane\");\n\n    // the top line containing the header clipper and the top right widget\n    this.__top = new qx.ui.container.Composite(new qx.ui.layout.HBox()).set({\n      minWidth: 0\n    });\n    this._add(this.__top, {row: 0, column: 0, colSpan: 2});\n\n    // embed header into a scrollable container\n    this._headerClipper = this._createHeaderClipper();\n    this._headerClipper.add(this.__header);\n    this._headerClipper.addListener(\"losecapture\", this._onChangeCaptureHeader, this);\n    this._headerClipper.addListener(\"pointermove\", this._onPointermoveHeader, this);\n    this._headerClipper.addListener(\"pointerdown\", this._onPointerdownHeader, this);\n    this._headerClipper.addListener(\"pointerup\", this._onPointerupHeader, this);\n    this._headerClipper.addListener(\"tap\", this._onTapHeader, this);\n    this.__top.add(this._headerClipper, {flex: 1});\n\n    // embed pane into a scrollable container\n    this._paneClipper = this._createPaneClipper();\n    this._paneClipper.add(this.__tablePane);\n    this._paneClipper.addListener(\"roll\", this._onRoll, this);\n    this._paneClipper.addListener(\"pointermove\", this._onPointermovePane, this);\n    this._paneClipper.addListener(\"pointerdown\", this._onPointerdownPane, this);\n    this._paneClipper.addListener(\"tap\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onTapPane, this);\n    this._paneClipper.addListener(\"contextmenu\", this._onContextMenu, this);\n    if (qx.core.Environment.get(\"device.type\") === \"desktop\") {\n      this._paneClipper.addListener(\"dblclick\", this._onDbltapPane, this);\n    } else {\n      this._paneClipper.addListener(\"dbltap\", this._onDbltapPane, this);\n    }\n    this._paneClipper.addListener(\"resize\", this._onResizePane, this);\n\n    // if we have overlayed scroll bars, we should use a separate container\n    if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n      this.__clipperContainer = new qx.ui.container.Composite();\n      this.__clipperContainer.setLayout(new qx.ui.layout.Canvas());\n      this.__clipperContainer.add(this._paneClipper, {edge: 0});\n      this._add(this.__clipperContainer, {row: 1, column: 0});\n    } else {\n      this._add(this._paneClipper, {row: 1, column: 0});\n    }\n\n    // init scroll bars\n    this.__horScrollBar = this._showChildControl(\"scrollbar-x\");\n    this.__verScrollBar = this._showChildControl(\"scrollbar-y\");\n\n    // init focus indicator\n    this.__focusIndicator = this.getChildControl(\"focus-indicator\");\n    // need to run the apply method at least once [BUG #4057]\n    this.initShowCellFocusIndicator();\n\n    // force creation of the resize line\n    this.getChildControl(\"resize-line\").hide();\n\n    this.addListener(\"pointerout\", this._onPointerout, this);\n    this.addListener(\"appear\", this._onAppear, this);\n    this.addListener(\"disappear\", this._onDisappear, this);\n\n    this.__timer = new qx.event.Timer();\n    this.__timer.addListener(\"interval\", this._oninterval, this);\n    this.initScrollTimeout();\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n\n    /** @type {int} The minimum width a column could get in pixels. */\n    MIN_COLUMN_WIDTH         : 10,\n\n    /** @type {int} The radius of the resize region in pixels. */\n    RESIZE_REGION_RADIUS     : 5,\n\n\n    /**\n     * (int) The number of pixels the pointer may move between pointer down and pointer up\n     * in order to count as a tap.\n     */\n    TAP_TOLERANCE          : 5,\n\n\n    /**\n     * (int) The mask for the horizontal scroll bar.\n     * May be combined with {@link #VERTICAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    HORIZONTAL_SCROLLBAR     : 1,\n\n\n    /**\n     * (int) The mask for the vertical scroll bar.\n     * May be combined with {@link #HORIZONTAL_SCROLLBAR}.\n     *\n     * @see #getNeededScrollBars\n     */\n    VERTICAL_SCROLLBAR       : 2\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Dispatched if the pane is scrolled horizontally */\n    \"changeScrollY\" : \"qx.event.type.Data\",\n\n    /** Dispatched if the pane is scrolled vertically */\n    \"changeScrollX\" : \"qx.event.type.Data\",\n\n    /**See {@link qx.ui.table.Table#cellTap}.*/\n    \"cellTap\" : \"qx.ui.table.pane.CellEvent\",\n\n    /*** See {@link qx.ui.table.Table#cellDbltap}.*/\n    \"cellDbltap\" : \"qx.ui.table.pane.CellEvent\",\n\n    /**See {@link qx.ui.table.Table#cellContextmenu}.*/\n    \"cellContextmenu\" : \"qx.ui.table.pane.CellEvent\",\n\n    /** Dispatched when a sortable header was tapped */\n    \"beforeSort\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /**\n     * Whether to show the horizontal scroll bar. This is a tri-state\n     * value. `true` means show the scroll bar; `false` means exclude it; null\n     * means hide it so it retains its space but doesn't show a scroll bar.\n     */\n    horizontalScrollBarVisible :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyHorizontalScrollBarVisible\",\n      event : \"changeHorizontalScrollBarVisible\",\n      nullable : true\n    },\n\n    /** Whether to show the vertical scroll bar */\n    verticalScrollBarVisible :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyVerticalScrollBarVisible\",\n      event : \"changeVerticalScrollBarVisible\"\n    },\n\n    /** The table pane model. */\n    tablePaneModel :\n    {\n      check : \"qx.ui.table.pane.Model\",\n      apply : \"_applyTablePaneModel\",\n      event : \"changeTablePaneModel\"\n    },\n\n\n    /**\n     * Whether column resize should be live. If false, during resize only a line is\n     * shown and the real resize happens when the user releases the pointer button.\n     */\n    liveResize :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Whether to handle selections via the selection manager before setting the\n     * focus.  The traditional behavior is to handle selections after setting the\n     * focus, but setting the focus means redrawing portions of the table, and\n     * some subclasses may want to modify the data to be displayed based on the\n     * selection.\n     */\n    selectBeforeFocus :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyShowCellFocusIndicator\"\n    },\n\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n\n    /**\n     * Interval time (in milliseconds) for the table update timer.\n     * Setting this to 0 clears the timer.\n     */\n    scrollTimeout :\n    {\n      check : \"Integer\",\n      init : 100,\n      apply : \"_applyScrollTimeout\"\n    },\n\n\n    appearance :\n    {\n      refine : true,\n      init : \"table-scroller\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __lastRowCount : null,\n    __table : null,\n\n    __updateInterval : null,\n    __updateContentPlanned : null,\n    __onintervalWrapper : null,\n\n    _moveColumn : null,\n    __lastMoveColPos : null,\n    _lastMoveTargetX : null,\n    _lastMoveTargetScroller : null,\n    __lastMovePointerPageX : null,\n\n    __resizeColumn : null,\n    __lastResizePointerPageX : null,\n    __lastResizeWidth : null,\n\n    __lastPointerDownCell : null,\n    __firedTapEvent : false,\n    __ignoreTap : null,\n    __lastPointerPageX : null,\n    __lastPointerPageY : null,\n\n    __focusedCol : null,\n    __focusedRow : null,\n\n    _cellEditor : null,\n    __cellEditorFactory : null,\n\n    __topRightWidget : null,\n    __horScrollBar : null,\n    __verScrollBar : null,\n    __header : null,\n    _headerClipper : null,\n    __tablePane : null,\n    _paneClipper : null,\n    __clipperContainer : null,\n    __focusIndicator : null,\n    __top : null,\n\n    __timer : null,\n\t\t\n\t\t__focusIndicatorPointerDownListener: null,\n\n\n    /**\n     * The right inset of the pane. The right inset is the maximum of the\n     * top right widget width and the scrollbar width (if visible).\n     *\n     * @return {Integer} The right inset of the pane\n     */\n    getPaneInsetRight : function()\n    {\n      var topRight = this.getTopRightWidget();\n      var topRightWidth =\n        topRight && topRight.isVisible() && topRight.getBounds() ?\n          topRight.getBounds().width + topRight.getMarginLeft() + topRight.getMarginRight() :\n          0;\n\n      var scrollBar = this.__verScrollBar;\n      var scrollBarWidth = this.getVerticalScrollBarVisible() ?\n        this.getVerticalScrollBarWidth() + scrollBar.getMarginLeft() + scrollBar.getMarginRight() :\n        0;\n\n      return Math.max(topRightWidth, scrollBarWidth);\n    },\n\n\n    /**\n     * Set the pane's width\n     *\n     * @param width {Integer} The pane's width\n     */\n    setPaneWidth : function(width)\n    {\n      if (this.isVerticalScrollBarVisible()) {\n        width += this.getPaneInsetRight();\n      }\n      this.setWidth(width);\n    },\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"header\":\n          control = (this.getTable().getNewTablePaneHeader())(this);\n          break;\n\n        case \"pane\":\n          control = (this.getTable().getNewTablePane())(this);\n          break;\n\n        case \"focus-indicator\":\n          control = new qx.ui.table.pane.FocusIndicator(this);\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          control.addListener(\"pointerup\", this._onPointerupFocusIndicator, this);\n          this._paneClipper.add(control);\n          control.show();             // must be active for editor to operate\n          control.setDecorator(null); // it can be initially invisible, though.\n          break;\n\n        case \"resize-line\":\n          control = new qx.ui.core.Widget();\n          control.setUserBounds(0, 0, 0, 0);\n          control.setZIndex(1000);\n          this._paneClipper.add(control);\n          break;\n\n        case \"scrollbar-x\":\n          control = this._createScrollBar(\"horizontal\").set({\n            alignY: \"bottom\"\n          });\n          control.addListener(\"scroll\", this._onScrollX, this);\n\n          if (this.__clipperContainer != null) {\n            control.setMinHeight(qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH);\n            this.__clipperContainer.add(control, {bottom: 0, right: 0, left: 0});\n          } else {\n            this._add(control, {row: 2, column: 0});\n          }\n          break;\n\n        case \"scrollbar-y\":\n          control = this._createScrollBar(\"vertical\");\n          control.addListener(\"scroll\", this._onScrollY, this);\n\n          if (this.__clipperContainer != null) {\n            this.__clipperContainer.add(control, {right: 0, bottom: 0, top: 0});\n          } else {\n            this._add(control, {row: 1, column: 1});\n          }\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n    // property modifier\n    _applyHorizontalScrollBarVisible : function(value, old) {\n      if (value === null)\n      {\n        this.__horScrollBar.setVisibility(\"hidden\");\n      }\n      else\n      {\n        this.__horScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n      }\n    },\n\n\n    // property modifier\n    _applyVerticalScrollBarVisible : function(value, old) {\n      this.__verScrollBar.setVisibility(value ? \"visible\" : \"excluded\");\n    },\n\n\n    // property modifier\n    _applyTablePaneModel : function(value, old)\n    {\n      if (old != null) {\n        old.removeListener(\"modelChanged\", this._onPaneModelChanged, this);\n      }\n\n      value.addListener(\"modelChanged\", this._onPaneModelChanged, this);\n    },\n\n\n    // property modifier\n    _applyShowCellFocusIndicator : function(value, old)\n    {\n      if(value) {\n        this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n        this._updateFocusIndicator();\n      }\n      else {\n        if(this.__focusIndicator) {\n          this.__focusIndicator.setDecorator(null);\n        }\n      }\n    },\n\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollY : function() {\n      return this.__verScrollBar.getPosition();\n    },\n\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollY {Integer} The new scroll position.\n     * @param renderSync {Boolean?false} Whether the table update should be\n     *     performed synchronously.\n     */\n    setScrollY : function(scrollY, renderSync)\n    {\n      this.__verScrollBar.scrollTo(scrollY);\n      if (renderSync) {\n        this._updateContent();\n      }\n    },\n\n\n    /**\n     * Get the current position of the vertical scroll bar.\n     *\n     * @return {Integer} The current scroll position.\n     */\n    getScrollX : function() {\n      return this.__horScrollBar.getPosition();\n    },\n\n\n    /**\n     * Set the current position of the vertical scroll bar.\n     *\n     * @param scrollX {Integer} The new scroll position.\n     */\n    setScrollX : function(scrollX) {\n      this.__horScrollBar.scrollTo(scrollX);\n    },\n\n\n    /**\n     * Returns the table this scroller belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable : function() {\n      return this.__table;\n    },\n\n\n    /**\n     * Creates and returns an instance of pane clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createPaneClipper : function()\n    {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n\n    /**\n     * Creates and returns an instance of header clipper.\n     *\n     * @return {qx.ui.table.pane.Clipper} pane clipper.\n     */\n    _createHeaderClipper : function()\n    {\n      return new qx.ui.table.pane.Clipper();\n    },\n\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     */\n    onColVisibilityChanged : function()\n    {\n      this.updateHorScrollBarMaximum();\n      this._updateFocusIndicator();\n    },\n\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth : function(col, width)\n    {\n      this.__header.setColumnWidth(col, width);\n      this.__tablePane.setColumnWidth(col, width);\n\n      var paneModel = this.getTablePaneModel();\n      var x = paneModel.getX(col);\n\n      if (x != -1)\n      {\n        // The change was in this scroller\n        this.updateHorScrollBarMaximum();\n        this._updateFocusIndicator();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     */\n    onColOrderChanged : function()\n    {\n      this.__header.onColOrderChanged();\n      this.__tablePane.onColOrderChanged();\n\n      this.updateHorScrollBarMaximum();\n    },\n\n\n    /**\n     * Event handler. Called when the table model has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged : function(firstRow, lastRow, firstColumn, lastColumn)\n    {\n      this.__tablePane.onTableModelDataChanged(firstRow, lastRow, firstColumn, lastColumn);\n      var rowCount = this.getTable().getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount)\n      {\n        this.updateVerScrollBarMaximum();\n\n        if (this.getFocusedRow() >= rowCount)\n        {\n          if (rowCount == 0) {\n            this.setFocusedCell(null, null);\n          } else {\n            this.setFocusedCell(this.getFocusedColumn(), rowCount - 1);\n          }\n        }\n        this.__lastRowCount = rowCount;\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged : function() {\n      this.__tablePane.onSelectionChanged();\n    },\n\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged : function() {\n      this.__tablePane.onFocusChanged();\n    },\n\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged : function()\n    {\n      this.__header.onTableModelMetaDataChanged();\n      this.__tablePane.onTableModelMetaDataChanged();\n    },\n\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    _onPaneModelChanged : function()\n    {\n      this.__header.onPaneModelChanged();\n      this.__tablePane.onPaneModelChanged();\n    },\n\n\n    /**\n     * Event listener for the pane clipper's resize event\n     */\n    _onResizePane : function()\n    {\n      this.updateHorScrollBarMaximum();\n      this.updateVerScrollBarMaximum();\n\n      // The height has changed -> Update content\n      this._updateContent();\n      this.__header._updateContent();\n      this.__table._updateScrollBarVisibility();\n    },\n\n\n    /**\n     * Updates the maximum of the horizontal scroll bar, so it corresponds to the\n     * total width of the columns in the table pane.\n     */\n    updateHorScrollBarMaximum : function()\n    {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n      var scrollSize = this.getTablePaneModel().getTotalWidth();\n\n      var scrollBar = this.__horScrollBar;\n\n      if (paneSize.width < scrollSize)\n      {\n        var max = Math.max(0, scrollSize - paneSize.width);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.width / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      }\n      else\n      {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n\n    /**\n     * Updates the maximum of the vertical scroll bar, so it corresponds to the\n     * number of rows in the table.\n     */\n    updateVerScrollBarMaximum : function()\n    {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        // will be called on the next resize event again\n        return;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      if (this.getTable().getKeepFirstVisibleRowComplete()) {\n        rowCount += 1;\n      }\n\n      var rowHeight = this.getTable().getRowHeight();\n      var scrollSize = rowCount * rowHeight;\n      var scrollBar = this.__verScrollBar;\n\n      if (paneSize.height < scrollSize)\n      {\n        var max = Math.max(0, scrollSize - paneSize.height);\n\n        scrollBar.setMaximum(max);\n        scrollBar.setKnobFactor(paneSize.height / scrollSize);\n\n        var pos = scrollBar.getPosition();\n        scrollBar.setPosition(Math.min(pos, max));\n      }\n      else\n      {\n        scrollBar.setMaximum(0);\n        scrollBar.setKnobFactor(1);\n        scrollBar.setPosition(0);\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the table property \"keepFirstVisibleRowComplete\"\n     * changed.\n     */\n    onKeepFirstVisibleRowCompleteChanged : function()\n    {\n      this.updateVerScrollBarMaximum();\n      this._updateContent();\n    },\n\n\n    /**\n     * Event handler for the scroller's appear event\n     */\n    _onAppear : function() {\n      // after the Scroller appears we start the interval again\n      this._startInterval(this.getScrollTimeout());\n    },\n\n\n    /**\n     * Event handler for the disappear event\n     */\n    _onDisappear : function()\n    {\n      // before the scroller disappears we need to stop it\n      this._stopInterval();\n    },\n\n\n    /**\n     * Event handler. Called when the horizontal scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    _onScrollX : function(e)\n    {\n      var scrollLeft = e.getData();\n\n      this.fireDataEvent(\"changeScrollX\", scrollLeft, e.getOldData());\n      this._headerClipper.scrollToX(scrollLeft);\n      this._paneClipper.scrollToX(scrollLeft);\n    },\n\n\n    /**\n     * Event handler. Called when the vertical scroll bar moved.\n     *\n     * @param e {Map} the event.\n     */\n    _onScrollY : function(e)\n    {\n      this.fireDataEvent(\"changeScrollY\", e.getData(), e.getOldData());\n      this._postponedUpdateContent();\n    },\n\n\n    /**\n     * Event handler. Called when the user moved the mouse wheel.\n     *\n     * @param e {qx.event.type.Roll} the event.\n     */\n    _onRoll : function(e)\n    {\n      var table = this.getTable();\n\n      if (e.getPointerType() == \"mouse\" || !table.getEnabled()) {\n        return;\n      }\n\n      // vertical scrolling\n      var delta = e.getDelta();\n      // normalize that at least one step is scrolled at a time\n      if (delta.y > 0 && delta.y < 1) {\n        delta.y = 1;\n      } else if (delta.y < 0 && delta.y > -1) {\n        delta.y = -1;\n      }\n      this.__verScrollBar.scrollBy(parseInt(delta.y, 10));\n\n      var scrolled = delta.y != 0 && !this.__isAtEdge(this.__verScrollBar, delta.y);\n\n      // horizontal scrolling\n      // normalize that at least one step is scrolled at a time\n      if (delta.x > 0 && delta.x < 1) {\n        delta.x = 1;\n      } else if (delta.x < 0 && delta.x > -1) {\n        delta.x = -1;\n      }\n      this.__horScrollBar.scrollBy(parseInt(delta.x, 10));\n\n      // Update the focus\n      if (this.__lastPointerPageX && this.getFocusCellOnPointerMove()) {\n        this._focusCellAtPagePos(this.__lastPointerPageX, this.__lastPointerPageY);\n      }\n\n      scrolled = scrolled || (delta.x != 0 && !this.__isAtEdge(this.__horScrollBar, delta.x));\n\n      // pass the event to the parent if the scrollbar is at an edge\n      if (scrolled) {\n        e.stop();\n      } else {\n        e.stopMomentum();\n      }\n    },\n\n\n    /**\n     * Checks if the table has been scrolled.\n     * @param scrollBar {qx.ui.core.scroll.IScrollBar} The scrollbar to check\n     * @param delta {Number} The scroll delta.\n     * @return {Boolean} <code>true</code>, if the scrolling is a the edge\n     */\n    __isAtEdge : function(scrollBar, delta) {\n      var position = scrollBar.getPosition();\n      return (delta < 0 && position <= 0) || (delta > 0 && position >= scrollBar.getMaximum());\n    },\n\n\n    /**\n     * Common column resize logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     */\n    __handleResizeColumn : function(pageX)\n    {\n      var table = this.getTable();\n      // We are currently resizing -> Update the position\n      var headerCell = this.__header.getHeaderWidgetAtColumn(this.__resizeColumn);\n      var minColumnWidth = headerCell.getSizeHint().minWidth;\n\n      var newWidth = Math.max(minColumnWidth, this.__lastResizeWidth + pageX - this.__lastResizePointerPageX);\n\n      if (this.getLiveResize()) {\n        var columnModel = table.getTableColumnModel();\n        columnModel.setColumnWidth(this.__resizeColumn, newWidth, true);\n      } else {\n        this.__header.setColumnWidth(this.__resizeColumn, newWidth, true);\n\n        var paneModel = this.getTablePaneModel();\n        this._showResizeLine(paneModel.getColumnLeft(this.__resizeColumn) + newWidth);\n      }\n\n      this.__lastResizePointerPageX += newWidth - this.__lastResizeWidth;\n      this.__lastResizeWidth = newWidth;\n    },\n\n\n    /**\n     * Common column move logic.\n     *\n     * @param pageX {Integer} the current pointer x position.\n     *\n     */\n    __handleMoveColumn : function(pageX)\n    {\n      // We are moving a column\n\n      // Check whether we moved outside the tap tolerance so we can start\n      // showing the column move feedback\n      // (showing the column move feedback prevents the ontap event)\n      var tapTolerance = qx.ui.table.pane.Scroller.TAP_TOLERANCE;\n      if (this.__header.isShowingColumnMoveFeedback()\n        || pageX > this.__lastMovePointerPageX + tapTolerance\n        || pageX < this.__lastMovePointerPageX - tapTolerance)\n      {\n        this.__lastMoveColPos += pageX - this.__lastMovePointerPageX;\n\n        this.__header.showColumnMoveFeedback(this._moveColumn, this.__lastMoveColPos);\n\n        // Get the responsible scroller\n        var targetScroller = this.__table.getTablePaneScrollerAtPageX(pageX);\n        if (this._lastMoveTargetScroller && this._lastMoveTargetScroller != targetScroller) {\n          this._lastMoveTargetScroller.hideColumnMoveFeedback();\n        }\n        if (targetScroller != null) {\n          this._lastMoveTargetX = targetScroller.showColumnMoveFeedback(pageX);\n        } else {\n          this._lastMoveTargetX = null;\n        }\n\n        this._lastMoveTargetScroller = targetScroller;\n        this.__lastMovePointerPageX = pageX;\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the user moved the pointer over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermoveHeader : function(e)\n    {\n      var table = this.getTable();\n\n      if (! table.getEnabled()) {\n        return;\n      }\n\n      var useResizeCursor = false;\n      var pointerOverColumn = null;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onmousewheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      if (this.__resizeColumn != null)\n      {\n        // We are currently resizing -> Update the position\n        this.__handleResizeColumn(pageX);\n        useResizeCursor = true;\n        e.stopPropagation();\n      }\n      else if (this._moveColumn != null)\n      {\n        // We are moving a column\n        this.__handleMoveColumn(pageX);\n        e.stopPropagation();\n      }\n      else\n      {\n        var resizeCol = this._getResizeColumnForPageX(pageX);\n        if (resizeCol != -1)\n        {\n          // The pointer is over a resize region -> Show the right cursor\n          useResizeCursor = true;\n        }\n        else\n        {\n          var tableModel = table.getTableModel();\n          var col = this._getColumnForPageX(pageX);\n          if (col != null && tableModel.isColumnSortable(col)) {\n            pointerOverColumn = col;\n          }\n        }\n      }\n\n      var cursor = useResizeCursor ? \"col-resize\" : null;\n      this.getApplicationRoot().setGlobalCursor(cursor);\n      this.setCursor(cursor);\n      this.__header.setPointerOverColumn(pointerOverColumn);\n    },\n\n\n    /**\n     * Event handler. Called when the user moved the pointer over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointermovePane : function(e)\n    {\n      var table = this.getTable();\n\n      if (! table.getEnabled()) {\n        return;\n      }\n\n      //var useResizeCursor = false;\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n\n      // Workaround: In onpointerwheel the event has wrong coordinates for pageX\n      //       and pageY. So we remember the last move event.\n      this.__lastPointerPageX = pageX;\n      this.__lastPointerPageY = pageY;\n\n      var row = this._getRowForPagePos(pageX, pageY);\n      if (row != null && this._getColumnForPageX(pageX) != null) {\n        // The pointer is over the data -> update the focus\n        if (this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n      }\n      this.__header.setPointerOverColumn(null);\n    },\n\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownHeader : function(e)\n    {\n      if (! this.getTable().getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n\n      // pointer is in header\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n      if (resizeCol != -1)\n      {\n        // The pointer is over a resize region -> Start resizing\n        this._startResizeHeader(resizeCol, pageX);\n        e.stop();\n      }\n      else\n      {\n        // The pointer is not in a resize region\n        var moveCol = this._getColumnForPageX(pageX);\n        if (moveCol != null)\n        {\n          this._startMoveHeader(moveCol, pageX);\n          e.stop();\n        }\n      }\n    },\n\n\n    /**\n     * Start a resize session of the header.\n     *\n     * @param resizeCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startResizeHeader : function(resizeCol, pageX)\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // The pointer is over a resize region -> Start resizing\n      this.__resizeColumn = resizeCol;\n      this.__lastResizePointerPageX = pageX;\n      this.__lastResizeWidth = columnModel.getColumnWidth(this.__resizeColumn);\n      this._headerClipper.capture();\n    },\n\n\n    /**\n     * Start a move session of the header.\n     *\n     * @param moveCol {Integer} the column index\n     * @param pageX {Integer} x coordinate of the pointer event\n     */\n    _startMoveHeader : function(moveCol, pageX)\n    {\n      // Prepare column moving\n      this._moveColumn = moveCol;\n      this.__lastMovePointerPageX = pageX;\n      this.__lastMoveColPos = this.getTablePaneModel().getColumnLeft(moveCol);\n      this._headerClipper.capture();\n    },\n\n\n\n    /**\n     * Event handler. Called when the user pressed a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerdownPane : function(e)\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      if (table.isEditing()) {\n        table.stopEditing();\n      }\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row !== null)\n      {\n        // The focus indicator blocks the tap event on the scroller so we\n        // store the current cell and listen for the pointerup event on the\n        // focus indicator\n        //\n        // INVARIANT:\n        //  The members of this object always contain the last position of\n        //  the cell on which the pointerdown event occurred.\n        //  *** These values are never cleared! ***.\n        //  Different browsers/OS combinations issue events in different\n        //  orders, and the context menu event, in particular, can be issued\n        //  early or late (Firefox on Linux issues it early; Firefox on\n        //  Windows issues it late) so no one may clear these values.\n        //\n        this.__lastPointerDownCell = {\n          row : row,\n          col : col\n        };\n\n        // On the other hand, we need to know if we've issued the tap event\n        // so we don't issue it twice, both from pointer-up on the focus\n        // indicator, and from the tap even on the pane. Both possibilities\n        // are necessary, however, to maintain the qooxdoo order of events.\n        this.__firedTapEvent = false;\n      }\n    },\n\n\n    /**\n     * Event handler for the focus indicator's pointerup event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     */\n    _onPointerupFocusIndicator : function(e)\n    {\n      if (this.__lastPointerDownCell &&\n          !this.__firedTapEvent &&\n          !this.isEditing() &&\n          this.__focusIndicator.getRow() == this.__lastPointerDownCell.row &&\n          this.__focusIndicator.getColumn() == this.__lastPointerDownCell.col)\n      {\n        this.fireEvent(\"cellTap\",\n                       qx.ui.table.pane.CellEvent,\n                       [\n                         this,\n                         e,\n                         this.__lastPointerDownCell.row,\n                         this.__lastPointerDownCell.col\n                       ],\n                       true);\n        this.__firedTapEvent = true;\n      } else if (!this.isEditing()) {\n        // if no cellTap event should be fired, act like a pointerdown which\n        // invokes the change of the selection e.g. [BUG #1632]\n        this._onPointerdownPane(e);\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the event capturing of the header changed.\n     * Stops/finishes an active header resize/move session if it lost capturing\n     * during the session to stay in a stable state.\n     *\n     * @param e {qx.event.type.Data} The data event\n     */\n    _onChangeCaptureHeader : function(e)\n    {\n      if (this.__resizeColumn != null) {\n        this._stopResizeHeader();\n      }\n\n      if (this._moveColumn != null) {\n        this._stopMoveHeader();\n      }\n    },\n\n\n    /**\n     * Stop a resize session of the header.\n     *\n     */\n    _stopResizeHeader : function()\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n\n      // We are currently resizing -> Finish resizing\n      if (! this.getLiveResize()) {\n        this._hideResizeLine();\n        columnModel.setColumnWidth(this.__resizeColumn,\n                                   this.__lastResizeWidth,\n                                   true);\n      }\n\n      this.__resizeColumn = null;\n      this._headerClipper.releaseCapture();\n\n      this.getApplicationRoot().setGlobalCursor(null);\n      this.setCursor(null);\n    },\n\n\n    /**\n     * Stop a move session of the header.\n     *\n     */\n    _stopMoveHeader : function()\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n\n      // We are moving a column -> Drop the column\n      this.__header.hideColumnMoveFeedback();\n      if (this._lastMoveTargetScroller) {\n        this._lastMoveTargetScroller.hideColumnMoveFeedback();\n      }\n\n      if (this._lastMoveTargetX != null)\n      {\n        var fromVisXPos = paneModel.getFirstColumnX() + paneModel.getX(this._moveColumn);\n        var toVisXPos = this._lastMoveTargetX;\n        if (toVisXPos != fromVisXPos && toVisXPos != fromVisXPos + 1)\n        {\n          // The column was really moved to another position\n          // (and not moved before or after itself, which is a noop)\n\n          // Translate visible positions to overall positions\n          var fromCol = columnModel.getVisibleColumnAtX(fromVisXPos);\n          var toCol   = columnModel.getVisibleColumnAtX(toVisXPos);\n          var fromOverXPos = columnModel.getOverallX(fromCol);\n          var toOverXPos = (toCol != null) ? columnModel.getOverallX(toCol) : columnModel.getOverallColumnCount();\n\n          if (toOverXPos > fromOverXPos) {\n            // Don't count the column itself\n            toOverXPos--;\n          }\n\n          // Move the column\n          columnModel.moveColumn(fromOverXPos, toOverXPos);\n\n          // update the focus indicator including the editor\n          this._updateFocusIndicator();\n        }\n      }\n\n      this._moveColumn = null;\n      this._lastMoveTargetX = null;\n      this._headerClipper.releaseCapture();\n    },\n\n\n    /**\n     * Event handler. Called when the user released a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerupHeader : function(e)\n    {\n      var table = this.getTable();\n\n      if (! table.getEnabled()) {\n        return;\n      }\n\n      if (this.__resizeColumn != null)\n      {\n        this._stopResizeHeader();\n        this.__ignoreTap = true;\n        e.stop();\n      }\n      else if (this._moveColumn != null)\n      {\n        this._stopMoveHeader();\n        e.stop();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the header.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapHeader : function(e)\n    {\n      if (this.__ignoreTap)\n      {\n        this.__ignoreTap = false;\n        return;\n      }\n\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var tableModel = table.getTableModel();\n\n      var pageX = e.getDocumentLeft();\n\n      var resizeCol = this._getResizeColumnForPageX(pageX);\n\n      if (resizeCol == -1)\n      {\n        // pointer is not in a resize region\n        var col = this._getColumnForPageX(pageX);\n\n        if (col != null && tableModel.isColumnSortable(col))\n        {\n          // Sort that column\n          var sortCol = tableModel.getSortColumnIndex();\n          var ascending = (col != sortCol) ? true : !tableModel.isSortAscending();\n\n          var data =\n            {\n              column     : col,\n              ascending  : ascending,\n              tapEvent : e\n            };\n\n          if (this.fireDataEvent(\"beforeSort\", data, null, true))\n          {\n            // Stop cell editing\n            if (table.isEditing()) {\n              table.stopEditing();\n            }\n\n            tableModel.sortByColumn(col, ascending);\n            if (this.getResetSelectionOnHeaderTap())\n            {\n              table.getSelectionModel().resetSelection();\n            }\n          }\n        }\n      }\n\n      e.stop();\n    },\n\n\n    /**\n     * Event handler. Called when the user tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onTapPane : function(e)\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      if (row != null && col != null) {\n        var selectBeforeFocus = this.getSelectBeforeFocus();\n\n        if (selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        // The pointer is over the data -> update the focus\n        if (!this.getFocusCellOnPointerMove()) {\n          this._focusCellAtPagePos(pageX, pageY);\n        }\n\n        if (!selectBeforeFocus) {\n          table.getSelectionManager().handleTap(row, e);\n        }\n\n        if (this.__focusIndicator.isHidden() ||\n            (this.__lastPointerDownCell &&\n             !this.__firedTapEvent &&\n             !this.isEditing() &&\n             row == this.__lastPointerDownCell.row &&\n             col == this.__lastPointerDownCell.col))\n        {\n          this.fireEvent(\"cellTap\",\n                         qx.ui.table.pane.CellEvent,\n                         [this, e, row, col],\n                         true);\n          this.__firedTapEvent = true;\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when a context menu is invoked in a cell.\n     *\n     * @param e {qx.event.type.Pointer} the event.\n     */\n    _onContextMenu : function(e)\n    {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var row = this._getRowForPagePos(pageX, pageY);\n      var col = this._getColumnForPageX(pageX);\n\n      /*\n       * The 'row' value will be null if the right-click was in the blank\n       * area below the last data row. Some applications desire to receive\n       * the context menu event anyway, and can set the property value of\n       * contextMenuFromDataCellsOnly to false to achieve that.\n       */\n      if (row === null && this.getContextMenuFromDataCellsOnly())\n      {\n        return;\n      }\n\n      if (! this.getShowCellFocusIndicator() ||\n          row === null ||\n          (this.__lastPointerDownCell &&\n           row == this.__lastPointerDownCell.row &&\n           col == this.__lastPointerDownCell.col))\n      {\n        this.fireEvent(\"cellContextmenu\",\n                       qx.ui.table.pane.CellEvent,\n                       [this, e, row, col],\n                       true);\n\n        // Now that the cellContextmenu handler has had a chance to build\n        // the menu for this cell, display it (if there is one).\n        var menu = this.getTable().getContextMenu();\n        if (menu)\n        {\n          // A menu with no children means don't display any context menu\n          // including the default context menu even if the default context\n          // menu is allowed to be displayed normally. There's no need to\n          // actually show an empty menu, though.\n          if (menu.getChildren().length > 0) {\n            menu.openAtPointer(e);\n          }\n          else\n          {\n            menu.exclude();\n          }\n\n          // Do not show native menu\n          e.preventDefault();\n        }\n      }\n    },\n\n\n    // overridden\n    _onContextMenuOpen : function(e)\n    {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n\n    /**\n     * Event handler. Called when the user double tapped a pointer button over the pane.\n     *\n     * @param e {Map} the event.\n     */\n    _onDbltapPane : function(e)\n    {\n      var pageX = e.getDocumentLeft();\n      var pageY = e.getDocumentTop();\n      var col = this._getColumnForPageX(pageX);\n\n      if (col !== null) {\n        this._focusCellAtPagePos(pageX, pageY);\n        this.startEditing();\n\n        var row = this._getRowForPagePos(pageX, pageY);\n        if (row != -1 && row != null) {\n          this.fireEvent(\"cellDbltap\", qx.ui.table.pane.CellEvent, [this, e, row], true);\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the pointer moved out.\n     *\n     * @param e {Map} the event.\n     */\n    _onPointerout : function(e)\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      // Reset the resize cursor when the pointer leaves the header\n      // If currently a column is resized then do nothing\n      // (the cursor will be reset on pointerup)\n      if (this.__resizeColumn == null)\n      {\n        this.setCursor(null);\n        this.getApplicationRoot().setGlobalCursor(null);\n      }\n\n      this.__header.setPointerOverColumn(null);\n\n      // in case the focus follows the pointer, it should be remove on pointerout\n      if (this.getFocusCellOnPointerMove()) {\n        this.__table.setFocusedCell();\n      }\n    },\n\n\n    /**\n     * Shows the resize line.\n     *\n     * @param x {Integer} the position where to show the line (in pixels, relative to\n     *      the left side of the pane).\n     */\n    _showResizeLine : function(x)\n    {\n      var resizeLine = this._showChildControl(\"resize-line\");\n\n      var width = resizeLine.getWidth();\n      var paneBounds = this._paneClipper.getBounds();\n      resizeLine.setUserBounds(\n        x - Math.round(width/2), 0, width, paneBounds.height\n      );\n    },\n\n\n    /**\n     * Hides the resize line.\n     */\n    _hideResizeLine : function() {\n      this._excludeChildControl(\"resize-line\");\n    },\n\n\n    /**\n     * Shows the feedback shown while a column is moved by the user.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the visible x position of the column in the whole table.\n     */\n    showColumnMoveFeedback : function(pageX)\n    {\n      var paneModel = this.getTablePaneModel();\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneLeft = this.__tablePane.getContentLocation().left;\n      var colCount = paneModel.getColumnCount();\n\n      var targetXPos = 0;\n      var targetX = 0;\n      var currX = paneLeft;\n\n      for (var xPos=0; xPos<colCount; xPos++)\n      {\n        var col = paneModel.getColumnAtX(xPos);\n        var colWidth = columnModel.getColumnWidth(col);\n\n        if (pageX < currX + colWidth / 2) {\n          break;\n        }\n\n        currX += colWidth;\n        targetXPos = xPos + 1;\n        targetX = currX - paneLeft;\n      }\n\n      // Ensure targetX is visible\n      var scrollerLeft = this._paneClipper.getContentLocation().left;\n      var scrollerWidth = this._paneClipper.getBounds().width;\n      var scrollX = scrollerLeft - paneLeft;\n\n      // NOTE: +2/-1 because of feedback width\n      targetX = qx.lang.Number.limit(targetX, scrollX + 2, scrollX + scrollerWidth - 1);\n\n      this._showResizeLine(targetX);\n\n      // Return the overall target x position\n      return paneModel.getFirstColumnX() + targetXPos;\n    },\n\n\n    /**\n     * Hides the feedback shown while a column is moved by the user.\n     */\n    hideColumnMoveFeedback : function() {\n      this._hideResizeLine();\n    },\n\n\n    /**\n     * Sets the focus to the cell that's located at the page position\n     * <code>pageX</code>/<code>pageY</code>. If there is no cell at that position,\n     * nothing happens.\n     *\n     * @param pageX {Integer} the x position in the page (in pixels).\n     * @param pageY {Integer} the y position in the page (in pixels).\n     */\n    _focusCellAtPagePos : function(pageX, pageY)\n    {\n      var row = this._getRowForPagePos(pageX, pageY);\n\n      if (row != -1 && row != null)\n      {\n        // The pointer is over the data -> update the focus\n        var col = this._getColumnForPageX(pageX);\n        this.__table.setFocusedCell(col, row);\n      }\n    },\n\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer} the model index of the focused cell's column.\n     * @param row {Integer} the model index of the focused cell's row.\n     */\n    setFocusedCell : function(col, row)\n    {\n      if (!this.isEditing())\n      {\n        this.__tablePane.setFocusedCell(col, row, this.__updateContentPlanned);\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        this._updateFocusIndicator();\n      }\n    },\n\n\n    /**\n     * Returns the column of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn : function() {\n      return this.__focusedCol;\n    },\n\n\n    /**\n     * Returns the row of currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow : function() {\n      return this.__focusedRow;\n    },\n\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible : function(col, row)\n    {\n      var paneModel = this.getTablePaneModel();\n      var xPos = paneModel.getX(col);\n\n      if (xPos != -1)\n      {\n        var clipperSize = this._paneClipper.getInnerSize();\n        if (!clipperSize) {\n          return;\n        }\n\n        var columnModel = this.getTable().getTableColumnModel();\n\n        var colLeft = paneModel.getColumnLeft(col);\n        var colWidth = columnModel.getColumnWidth(col);\n        var rowHeight = this.getTable().getRowHeight();\n        var rowTop = row * rowHeight;\n\n        var scrollX = this.getScrollX();\n        var scrollY = this.getScrollY();\n\n        // NOTE: We don't use qx.lang.Number.limit, because min should win if max < min\n        var minScrollX = Math.min(colLeft, colLeft + colWidth - clipperSize.width);\n        var maxScrollX = colLeft;\n        this.setScrollX(Math.max(minScrollX, Math.min(maxScrollX, scrollX)));\n\n        var minScrollY = rowTop + rowHeight - clipperSize.height;\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          minScrollY += rowHeight;\n        }\n\n        var maxScrollY = rowTop;\n        this.setScrollY(Math.max(minScrollY, Math.min(maxScrollY, scrollY)), true);\n      }\n    },\n\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing : function() {\n      return this._cellEditor != null;\n    },\n\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already\n     * editing, if the column is not editable, or if the cell editor for the\n     * column ascertains that the particular cell is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing : function()\n    {\n      var table = this.getTable();\n      var tableModel = table.getTableModel();\n      var col = this.__focusedCol;\n\n      if (\n        !this.isEditing() &&\n        (col != null) &&\n        tableModel.isColumnEditable(col)\n      ) {\n        var row = this.__focusedRow;\n        var xPos = this.getTablePaneModel().getX(col);\n        var value = tableModel.getValue(col, row);\n\n        // scroll cell into view\n        this.scrollCellVisible(col, row);\n\n        this.__cellEditorFactory = table.getTableColumnModel().getCellEditorFactory(col);\n\n        var cellInfo =\n        {\n          col   : col,\n          row   : row,\n          xPos  : xPos,\n          value : value,\n          table : table\n        };\n\n        // Get a cell editor\n        this._cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\n\n        // We handle two types of cell editors: the traditional in-place\n        // editor, where the cell editor returned by the factory must fit in\n        // the space of the table cell; and a modal window in which the\n        // editing takes place.  Additionally, if the cell editor determines\n        // that it does not want to edit the particular cell being requested,\n        // it may return null to indicate that that cell is not editable.\n        if (this._cellEditor === null)\n        {\n          // This cell is not editable even though its column is.\n          return false;\n        }\n        else if (this._cellEditor instanceof qx.ui.window.Window)\n        {\n          // It's a window.  Ensure that it's modal.\n          this._cellEditor.setModal(true);\n\n          // At least for the time being, we disallow the close button.  It\n          // acts differently than a cellEditor.close(), and invokes a bug\n          // someplace.  Modal window cell editors should provide their own\n          // buttons or means to activate a cellEditor.close() or equivalently\n          // cellEditor.hide().\n          this._cellEditor.setShowClose(false);\n\n          // Arrange to be notified when it is closed.\n          this._cellEditor.addListener(\n            \"close\",\n            this._onCellEditorModalWindowClose,\n            this);\n\n          // If there's a pre-open function defined for the table...\n          var f = table.getModalCellEditorPreOpenFunction();\n          if (f != null) {\n            f(this._cellEditor, cellInfo);\n          }\n\n          // Open it now.\n          this._cellEditor.open();\n        }\n        else\n        {\n          // prevent tap event from bubbling up to the table\n          this.__focusIndicatorPointerDownListener = this.__focusIndicator.addListener(\"pointerdown\", function(e)\n          {\n            this.__lastPointerDownCell = {\n              row : this.__focusedRow,\n              col : this.__focusedCol\n            };\n            e.stopPropagation();\n          }, this);\n\n          this.__focusIndicator.add(this._cellEditor);\n          this.__focusIndicator.addState(\"editing\");\n          this.__focusIndicator.setKeepActive(false);\n\n          // Make the focus indicator visible during editing\n          this.__focusIndicator.setDecorator(\"table-scroller-focus-indicator\");\n\n          this._cellEditor.focus();\n          this._cellEditor.activate();\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing : function()\n    {\n      // If the focus indicator is not being shown normally...\n      if (! this.getShowCellFocusIndicator())\n      {\n        // ... then hide it again\n        this.__focusIndicator.setDecorator(null);\n      }\n\n      this.flushEditor();\n      this.cancelEditing();\n    },\n\n\n    /**\n     * Writes the editor's value to the model.\n     */\n    flushEditor : function()\n    {\n      if (this.isEditing())\n      {\n        var value = this.__cellEditorFactory.getCellEditorValue(this._cellEditor);\n        var oldValue = this.getTable().getTableModel().getValue(this.__focusedCol, this.__focusedRow);\n        this.getTable().getTableModel().setValue(this.__focusedCol, this.__focusedRow, value);\n\n        this.__table.focus();\n\n        // Fire an event containing the value change.\n        this.__table.fireDataEvent(\"dataEdited\",\n                                   {\n                                     row      : this.__focusedRow,\n                                     col      : this.__focusedCol,\n                                     oldValue : oldValue,\n                                     value    : value\n                                   });\n      }\n    },\n\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing : function()\n    {\n      if (this.isEditing())\n      {\n        if (!(this._cellEditor instanceof qx.ui.window.Window))\n        {\n          this.__focusIndicator.removeState(\"editing\");\n          this.__focusIndicator.setKeepActive(true);\n\n\t\t\t\t\tif (this.__focusIndicatorPointerDownListener !== null) {\n\t\t\t\t\t\tthis.__focusIndicator.removeListenerById(this.__focusIndicatorPointerDownListener);\n\t\t\t\t\t\tthis.__focusIndicatorPointerDownListener = null;\n\t\t\t\t\t}\n        }\n        this._cellEditor.destroy();\n        this._cellEditor = null;\n        this.__cellEditorFactory = null;\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the modal window of the cell editor closes.\n     *\n     * @param e {Map} the event.\n     */\n    _onCellEditorModalWindowClose : function(e) {\n      this.stopEditing();\n    },\n\n\n    /**\n     * Returns the model index of the column the pointer is over or null if the pointer\n     * is not over a column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the model index of the column the pointer is over.\n     */\n    _getColumnForPageX : function(pageX)\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n      var colCount = paneModel.getColumnCount();\n      var currX = this.__tablePane.getContentLocation().left;\n\n      for (var x=0; x<colCount; x++)\n      {\n        var col = paneModel.getColumnAtX(x);\n        var colWidth = columnModel.getColumnWidth(col);\n        currX += colWidth;\n\n        if (pageX < currX) {\n          return col;\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Returns the model index of the column that should be resized when dragging\n     * starts here. Returns -1 if the pointer is in no resize region of any column.\n     *\n     * @param pageX {Integer} the x position of the pointer in the page (in pixels).\n     * @return {Integer} the column index.\n     */\n    _getResizeColumnForPageX : function(pageX)\n    {\n      var columnModel = this.getTable().getTableColumnModel();\n      var paneModel = this.getTablePaneModel();\n      var colCount = paneModel.getColumnCount();\n      var currX = this.__header.getContentLocation().left;\n      var regionRadius = qx.ui.table.pane.Scroller.RESIZE_REGION_RADIUS;\n\n      for (var x=0; x<colCount; x++)\n      {\n        var col = paneModel.getColumnAtX(x);\n        var colWidth = columnModel.getColumnWidth(col);\n        currX += colWidth;\n\n        if (pageX >= (currX - regionRadius) && pageX <= (currX + regionRadius)) {\n          return col;\n        }\n      }\n\n      return -1;\n    },\n\n\n    /**\n     * Returns the model index of the row the pointer is currently over. Returns -1 if\n     * the pointer is over the header. Returns null if the pointer is not over any\n     * column.\n     *\n     * @param pageX {Integer} the pointer x position in the page.\n     * @param pageY {Integer} the pointer y position in the page.\n     * @return {Integer} the model index of the row the pointer is currently over.\n     */\n    _getRowForPagePos : function(pageX, pageY)\n    {\n      var panePos = this.__tablePane.getContentLocation();\n\n      if (pageX < panePos.left || pageX > panePos.right)\n      {\n        // There was no cell or header cell hit\n        return null;\n      }\n\n      if (pageY >= panePos.top && pageY <= panePos.bottom)\n      {\n        // This event is in the pane -> Get the row\n        var rowHeight = this.getTable().getRowHeight();\n\n        var scrollY = this.__verScrollBar.getPosition();\n\n        if (this.getTable().getKeepFirstVisibleRowComplete()) {\n          scrollY = Math.floor(scrollY / rowHeight) * rowHeight;\n        }\n\n        var tableY = scrollY + pageY - panePos.top;\n        var row = Math.floor(tableY / rowHeight);\n\n        var tableModel = this.getTable().getTableModel();\n        var rowCount = tableModel.getRowCount();\n\n        return (row < rowCount) ? row : null;\n      }\n\n      var headerPos = this.__header.getContentLocation();\n\n      if (\n        pageY >= headerPos.top &&\n        pageY <= headerPos.bottom &&\n        pageX <= headerPos.right)\n      {\n        // This event is in the pane -> Return -1 for the header\n        return -1;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Sets the widget that should be shown in the top right corner.\n     *\n     * The widget will not be disposed, when this table scroller is disposed. So the\n     * caller has to dispose it.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to set. May be null.\n     */\n    setTopRightWidget : function(widget)\n    {\n      var oldWidget = this.__topRightWidget;\n\n      if (oldWidget != null) {\n        this.__top.remove(oldWidget);\n      }\n\n      if (widget != null) {\n        this.__top.add(widget);\n      }\n\n      this.__topRightWidget = widget;\n    },\n\n\n    /**\n     * Get the top right widget\n     *\n     * @return {qx.ui.core.Widget} The top right widget.\n     */\n    getTopRightWidget : function() {\n      return this.__topRightWidget;\n    },\n\n\n    /**\n     * Returns the header.\n     *\n     * @return {qx.ui.table.pane.Header} the header.\n     */\n    getHeader : function() {\n      return this.__header;\n    },\n\n\n    /**\n     * Returns the table pane.\n     *\n     * @return {qx.ui.table.pane.Pane} the table pane.\n     */\n    getTablePane : function() {\n      return this.__tablePane;\n    },\n\n\n    /**\n     * Get the rendered width of the vertical scroll bar. The return value is\n     * <code>0</code> if the scroll bar is invisible or not yet rendered.\n     *\n     * @internal\n     * @return {Integer} The width of the vertical scroll bar\n     */\n    getVerticalScrollBarWidth : function()\n    {\n      var scrollBar = this.__verScrollBar;\n      return scrollBar.isVisible() ? (scrollBar.getSizeHint().width || 0) : 0;\n    },\n\n\n    /**\n     * Returns which scrollbars are needed.\n     *\n     * @param forceHorizontal {Boolean ? false} Whether to show the horizontal\n     *      scrollbar always.\n     * @param preventVertical {Boolean ? false} Whether to show the vertical scrollbar\n     *      never.\n     * @return {Integer} which scrollbars are needed. This may be any combination of\n     *      {@link #HORIZONTAL_SCROLLBAR} or {@link #VERTICAL_SCROLLBAR}\n     *      (combined by OR).\n     */\n    getNeededScrollBars : function(forceHorizontal, preventVertical)\n    {\n      var verScrollBar = this.__verScrollBar;\n      var verBarWidth = verScrollBar.getSizeHint().width\n        + verScrollBar.getMarginLeft() + verScrollBar.getMarginRight();\n\n      var horScrollBar = this.__horScrollBar;\n      var horBarHeight = horScrollBar.getSizeHint().height\n        + horScrollBar.getMarginTop() + horScrollBar.getMarginBottom();\n\n      // Get the width and height of the view (without scroll bars)\n      var clipperSize = this._paneClipper.getInnerSize();\n      var viewWidth = clipperSize ? clipperSize.width : 0;\n\n      if (this.getVerticalScrollBarVisible()) {\n        viewWidth += verBarWidth;\n      }\n\n      var viewHeight = clipperSize ? clipperSize.height : 0;\n\n      if (this.getHorizontalScrollBarVisible()) {\n        viewHeight += horBarHeight;\n      }\n\n      var tableModel = this.getTable().getTableModel();\n      var rowCount = tableModel.getRowCount();\n\n      // Get the (virtual) width and height of the pane\n      var paneWidth = this.getTablePaneModel().getTotalWidth();\n      var paneHeight = this.getTable().getRowHeight() * rowCount;\n\n      // Check which scrollbars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n\n      if (paneWidth > viewWidth) {\n        horNeeded = true;\n\n        if (paneHeight > viewHeight - horBarHeight) {\n          verNeeded = true;\n        }\n      } else if (paneHeight > viewHeight) {\n        verNeeded = true;\n\n        if (!preventVertical && (paneWidth > viewWidth - verBarWidth)) {\n          horNeeded = true;\n        }\n      }\n\n      // Create the mask\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      return ((forceHorizontal || horNeeded) ? horBar : 0) | ((preventVertical || !verNeeded) ? 0 : verBar);\n    },\n\n\n    /**\n     * Return the pane clipper. It is sometimes required for special activities\n     * such as tracking events for drag&drop.\n     *\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getPaneClipper : function()\n    {\n      return this._paneClipper;\n    },\n\n\n    /**\n     * Returns the scroll area container widget (which enables more precise\n     * operations e.g. bounds retrieval for drag session scrolling).\n     *\n     * @see qx.ui.core.MDragDropScrolling#_getBounds\n     * @return {qx.ui.table.pane.Clipper}\n     *   The pane clipper for this scroller.\n     */\n    getScrollAreaContainer : function() {\n      return this.getPaneClipper();\n    },\n\n\n    // property apply method\n    _applyScrollTimeout : function(value, old) {\n      this._startInterval(value);\n    },\n\n\n    /**\n     * Starts the current running interval\n     *\n     * @param timeout {Integer} The timeout between two table updates\n     */\n    _startInterval : function (timeout)\n    {\n      this.__timer.setInterval(timeout);\n      this.__timer.start();\n    },\n\n\n    /**\n     * stops the current running interval\n     */\n    _stopInterval : function ()\n    {\n      this.__timer.stop();\n    },\n\n\n    /**\n     * Does a postponed update of the content.\n     *\n     * @see #_updateContent\n     */\n    _postponedUpdateContent : function()\n    {\n      //this.__updateContentPlanned = true;\n      this._updateContent();\n    },\n\n\n    /**\n     * Timer event handler. Periodically checks whether a table update is\n     * required. The update interval is controlled by the {@link #scrollTimeout}\n     * property.\n     *\n     * @signature function()\n     */\n    _oninterval : qx.event.GlobalError.observeMethod(function()\n    {\n      if (this.__updateContentPlanned && !this.__tablePane._layoutPending)\n      {\n        this.__updateContentPlanned = false;\n        this._updateContent();\n      }\n    }),\n\n\n    /**\n     * Updates the content. Sets the right section the table pane should show and\n     * does the scrolling.\n     */\n    _updateContent : function()\n    {\n      var paneSize = this._paneClipper.getInnerSize();\n      if (!paneSize) {\n        return;\n      }\n      var paneHeight = paneSize.height;\n\n      var scrollX = this.__horScrollBar.getPosition();\n      var scrollY = this.__verScrollBar.getPosition();\n      var rowHeight = this.getTable().getRowHeight();\n\n      var firstRow = Math.floor(scrollY / rowHeight);\n      var oldFirstRow = this.__tablePane.getFirstVisibleRow();\n      this.__tablePane.setFirstVisibleRow(firstRow);\n\n      var visibleRowCount = Math.ceil(paneHeight / rowHeight);\n      var paneOffset = 0;\n      var firstVisibleRowComplete = this.getTable().getKeepFirstVisibleRowComplete();\n\n      if (!firstVisibleRowComplete)\n      {\n\n        // NOTE: We don't consider paneOffset, because this may cause alternating\n        //       adding and deleting of one row when scrolling. Instead we add one row\n        //       in every case.\n        visibleRowCount++;\n\n        paneOffset = scrollY % rowHeight;\n      }\n\n      this.__tablePane.setVisibleRowCount(visibleRowCount);\n\n      if (firstRow != oldFirstRow) {\n        this._updateFocusIndicator();\n      }\n\n      this._paneClipper.scrollToX(scrollX);\n\n      // Avoid expensive calls to setScrollTop if\n      // scrolling is not needed\n      if (! firstVisibleRowComplete ) {\n        this._paneClipper.scrollToY(paneOffset);\n      }\n    },\n\n    /**\n     * Updates the location and the visibility of the focus indicator.\n     *\n     */\n    _updateFocusIndicator : function()\n    {\n      var table = this.getTable();\n\n      if (!table.getEnabled()) {\n        return;\n      }\n\n      this.__focusIndicator.moveToCell(this.__focusedCol, this.__focusedRow);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._stopInterval();\n\n    // this object was created by the table on init so we have to clean it up.\n    var tablePaneModel = this.getTablePaneModel();\n    if (tablePaneModel)\n    {\n      tablePaneModel.dispose();\n    }\n\n    this.__lastPointerDownCell = this.__topRightWidget = this.__table = null;\n    this._disposeObjects(\"__horScrollBar\", \"__verScrollBar\",\n                         \"_headerClipper\", \"_paneClipper\", \"__focusIndicator\",\n                         \"__header\", \"__tablePane\", \"__top\", \"__timer\",\n                         \"__clipperContainer\");\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * The model of a table pane. This model works as proxy to a\n * {@link qx.ui.table.columnmodel.Basic} and manages the visual order of the columns shown in\n * a {@link Pane}.\n */\nqx.Class.define(\"qx.ui.table.pane.Model\",\n{\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   *\n   * @param tableColumnModel {qx.ui.table.columnmodel.Basic} The TableColumnModel of which this\n   *    model is the proxy.\n   */\n  construct : function(tableColumnModel)\n  {\n    this.base(arguments);\n\n    this.setTableColumnModel(tableColumnModel);\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fired when the model changed. */\n    \"modelChanged\" : \"qx.event.type.Event\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n\n    /** @type {string} The type of the event fired when the model changed. */\n    EVENT_TYPE_MODEL_CHANGED : \"modelChanged\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /** The visible x position of the first column this model should contain. */\n    firstColumnX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyFirstColumnX\"\n    },\n\n\n    /**\n     * The maximum number of columns this model should contain. If -1 this model will\n     * contain all remaining columns.\n     */\n    maxColumnCount :\n    {\n      check : \"Number\",\n      init : -1,\n      apply : \"_applyMaxColumnCount\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __columnCount : null,\n    __tableColumnModel : null,\n\n\n    // property modifier\n    _applyFirstColumnX : function(value, old)\n    {\n      this.__columnCount = null;\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n    // property modifier\n    _applyMaxColumnCount : function(value, old)\n    {\n      this.__columnCount = null;\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n\n    /**\n     * Connects the table model to the column model\n     *\n     * @param tableColumnModel {qx.ui.table.columnmodel.Basic} the column model\n     */\n    setTableColumnModel : function(tableColumnModel)\n    {\n      if (this.__tableColumnModel) {\n        this.__tableColumnModel.removeListener(\"visibilityChangedPre\", this._onColVisibilityChanged, this);\n        this.__tableColumnModel.removeListener(\"headerCellRendererChanged\", this._onHeaderCellRendererChanged, this);\n      }\n      this.__tableColumnModel = tableColumnModel;\n      this.__tableColumnModel.addListener(\"visibilityChangedPre\", this._onColVisibilityChanged, this);\n      this.__tableColumnModel.addListener(\"headerCellRendererChanged\", this._onHeaderCellRendererChanged, this);\n      this.__columnCount = null;\n    },\n\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColVisibilityChanged : function(evt)\n    {\n      this.__columnCount = null;\n\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n\n    /**\n     * Event handler. Called when the cell renderer of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onHeaderCellRendererChanged : function(evt)\n    {\n      this.fireEvent(qx.ui.table.pane.Model.EVENT_TYPE_MODEL_CHANGED);\n    },\n\n\n    /**\n     * Returns the number of columns in this model.\n     *\n     * @return {Integer} the number of columns in this model.\n     */\n    getColumnCount : function()\n    {\n      if (this.__columnCount == null)\n      {\n        var firstX = this.getFirstColumnX();\n        var maxColCount = this.getMaxColumnCount();\n        var totalColCount = this.__tableColumnModel.getVisibleColumnCount();\n\n        if (maxColCount == -1 || (firstX + maxColCount) > totalColCount) {\n          this.__columnCount = totalColCount - firstX;\n        } else {\n          this.__columnCount = maxColCount;\n        }\n      }\n\n      return this.__columnCount;\n    },\n\n\n    /**\n     * Returns the model index of the column at the position <code>xPos</code>.\n     *\n     * @param xPos {Integer} the x position in the table pane of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getColumnAtX : function(xPos)\n    {\n      var firstX = this.getFirstColumnX();\n      return this.__tableColumnModel.getVisibleColumnAtX(firstX + xPos);\n    },\n\n\n    /**\n     * Returns the x position of the column <code>col</code>.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the x position in the table pane of the column.\n     */\n    getX : function(col)\n    {\n      var firstX = this.getFirstColumnX();\n      var maxColCount = this.getMaxColumnCount();\n\n      var x = this.__tableColumnModel.getVisibleX(col) - firstX;\n\n      if (x >= 0 && (maxColCount == -1 || x < maxColCount)) {\n        return x;\n      } else {\n        return -1;\n      }\n    },\n\n\n    /**\n     * Gets the position of the left side of a column (in pixels, relative to the\n     * left side of the table pane).\n     *\n     * This value corresponds to the sum of the widths of all columns left of the\n     * column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {var} the position of the left side of the column.\n     */\n    getColumnLeft : function(col)\n    {\n      var left = 0;\n      var colCount = this.getColumnCount();\n\n      for (var x=0; x<colCount; x++)\n      {\n        var currCol = this.getColumnAtX(x);\n\n        if (currCol == col) {\n          return left;\n        }\n\n        left += this.__tableColumnModel.getColumnWidth(currCol);\n      }\n\n      return -1;\n    },\n\n\n    /**\n     * Returns the total width of all columns in the model.\n     *\n     * @return {Integer} the total width of all columns in the model.\n     */\n    getTotalWidth : function()\n    {\n      var totalWidth = 0;\n      var colCount = this.getColumnCount();\n\n      for (var x=0; x<colCount; x++)\n      {\n        var col = this.getColumnAtX(x);\n        totalWidth += this.__tableColumnModel.getColumnWidth(col);\n      }\n\n      return totalWidth;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    if (this.__tableColumnModel)\n    {\n      this.__tableColumnModel.removeListener(\"visibilityChangedPre\", this._onColVisibilityChanged, this);\n      this.__tableColumnModel.removeListener(\"headerCellRendererChanged\", this._onHeaderCellRendererChanged, this);\n    }\n    this.__tableColumnModel = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A simple table model that provides an API for changing the model data.\n */\nqx.Class.define(\"qx.ui.table.model.Simple\",\n{\n  extend : qx.ui.table.model.Abstract,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this._rowArr = [];\n    this.__sortColumnIndex = -1;\n\n    // Array of objects, each with property \"ascending\" and \"descending\"\n    this.__sortMethods = [];\n\n    this.__editableColArr = null;\n  },\n\n  properties :\n  {\n    /**\n     * Whether sorting should be case sensitive\n     */\n    caseSensitiveSorting :\n    {\n      check : \"Boolean\",\n      init : true\n    }\n  },\n\n\n  statics :\n  {\n    /**\n     * Default ascending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorAscending : function(row1, row2, columnIndex)\n    {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 > obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    },\n\n\n    /**\n     * Same as the Default ascending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveAscending : function(row1, row2, columnIndex)\n    {\n      var obj1 = (row1[columnIndex].toLowerCase ?\n            row1[columnIndex].toLowerCase() : row1[columnIndex]);\n      var obj2 = (row2[columnIndex].toLowerCase ?\n            row2[columnIndex].toLowerCase() : row2[columnIndex]);\n\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 > obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    },\n\n\n    /**\n     * Default descending sort method to use if no custom method has been\n     * provided.\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorDescending : function(row1, row2, columnIndex)\n    {\n      var obj1 = row1[columnIndex];\n      var obj2 = row2[columnIndex];\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 < obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    },\n\n\n    /**\n     * Same as the Default descending sort method but using case insensitivity\n     *\n     * @param row1 {var} first row\n     * @param row2 {var} second row\n     * @param columnIndex {Integer} the column to be sorted\n     * @return {Integer} 1 of row1 is > row2, -1 if row1 is < row2, 0 if row1 == row2\n     */\n    _defaultSortComparatorInsensitiveDescending : function(row1, row2, columnIndex)\n    {\n      var obj1 = (row1[columnIndex].toLowerCase ?\n          row1[columnIndex].toLowerCase() : row1[columnIndex]);\n      var obj2 = (row2[columnIndex].toLowerCase ?\n          row2[columnIndex].toLowerCase() : row2[columnIndex]);\n      if (qx.lang.Type.isNumber(obj1) && qx.lang.Type.isNumber(obj2)) {\n        var result = isNaN(obj1) ? isNaN(obj2) ?  0 : 1 : isNaN(obj2) ? -1 : null;\n        if (result != null) {\n          return result;\n        }\n      }\n      return (obj1 < obj2) ? 1 : ((obj1 == obj2) ? 0 : -1);\n    }\n\n  },\n\n\n  members :\n  {\n    _rowArr : null,\n    __editableColArr : null,\n    __sortableColArr : null,\n    __sortMethods : null,\n    __sortColumnIndex : null,\n    __sortAscending : null,\n\n\n    // overridden\n    getRowData : function(rowIndex)\n    {\n      var rowData = this._rowArr[rowIndex];\n      if (rowData == null || rowData.originalData == null) {\n        return rowData;\n      } else {\n        return rowData.originalData;\n      }\n    },\n\n\n    /**\n     * Returns the data of one row as map containing the column IDs as key and\n     * the cell values as value. Also the meta data is included.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Map} a Map containing the column values.\n     */\n    getRowDataAsMap : function(rowIndex)\n    {\n      var rowData = this._rowArr[rowIndex];\n\n      if (rowData != null) {\n        var map = {};\n        // get the current set data\n        for (var col = 0; col < this.getColumnCount(); col++) {\n          map[this.getColumnId(col)] = rowData[col];\n        }\n\n        if (rowData.originalData != null) {\n          // merge in the meta data\n          for (var key in rowData.originalData) {\n            if (map[key] == undefined) {\n              map[key] = rowData.originalData[key];\n            }\n          }\n        }\n\n        return map;\n      }\n      // may be null, which is ok\n      return (rowData && rowData.originalData) ? rowData.originalData : null;\n    },\n\n\n    /**\n     * Gets the whole data as an array of maps.\n     *\n     * Note: Individual items are retrieved by {@link #getRowDataAsMap}.\n     * @return {Map[]} Array of row data maps\n     */\n    getDataAsMapArray: function() {\n      var len = this.getRowCount();\n      var data = [];\n\n      for (var i = 0; i < len; i++)\n      {\n        data.push(this.getRowDataAsMap(i));\n      }\n\n      return data;\n    },\n\n\n    /**\n     * Sets all columns editable or not editable.\n     *\n     * @param editable {Boolean} whether all columns are editable.\n     */\n    setEditable : function(editable)\n    {\n      this.__editableColArr = [];\n\n      for (var col=0; col<this.getColumnCount(); col++) {\n        this.__editableColArr[col] = editable;\n      }\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Sets whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column of which to set the editable state.\n     * @param editable {Boolean} whether the column should be editable.\n     */\n    setColumnEditable : function(columnIndex, editable)\n    {\n      if (editable != this.isColumnEditable(columnIndex))\n      {\n        if (this.__editableColArr == null) {\n          this.__editableColArr = [];\n        }\n\n        this.__editableColArr[columnIndex] = editable;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    isColumnEditable : function(columnIndex) {\n      return this.__editableColArr ? (this.__editableColArr[columnIndex] == true) : false;\n    },\n\n\n    /**\n     * Sets whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column of which to set the sortable state.\n     * @param sortable {Boolean} whether the column should be sortable.\n     */\n    setColumnSortable : function(columnIndex, sortable)\n    {\n      if (sortable != this.isColumnSortable(columnIndex))\n      {\n        if (this.__sortableColArr == null) {\n          this.__sortableColArr = [];\n        }\n\n        this.__sortableColArr[columnIndex] = sortable;\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n\n    // overridden\n    isColumnSortable : function(columnIndex) {\n      return (\n        this.__sortableColArr\n        ? (this.__sortableColArr[columnIndex] !== false)\n        : true\n      );\n    },\n\n    // overridden\n    sortByColumn : function(columnIndex, ascending)\n    {\n      // NOTE: We use different comparators for ascending and descending,\n      //     because comparators should be really fast.\n      var comparator;\n\n      var sortMethods = this.__sortMethods[columnIndex];\n      if (sortMethods)\n      {\n        comparator =\n          (ascending\n           ? sortMethods.ascending\n           : sortMethods.descending);\n      }\n      else\n      {\n        if (this.getCaseSensitiveSorting())\n        {\n          comparator =\n            (ascending\n             ? qx.ui.table.model.Simple._defaultSortComparatorAscending\n             : qx.ui.table.model.Simple._defaultSortComparatorDescending);\n        }\n        else\n        {\n          comparator =\n            (ascending\n             ? qx.ui.table.model.Simple._defaultSortComparatorInsensitiveAscending\n             : qx.ui.table.model.Simple._defaultSortComparatorInsensitiveDescending);\n        }\n      }\n\n      comparator.columnIndex = columnIndex;\n      this._rowArr.sort(function(row1, row2) {\n        return comparator(row1, row2, columnIndex);\n      });\n\n      this.__sortColumnIndex = columnIndex;\n      this.__sortAscending = ascending;\n\n      var data =\n        {\n          columnIndex : columnIndex,\n          ascending   : ascending\n        };\n      this.fireDataEvent(\"sorted\", data);\n\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n\n    /**\n     * Specify the methods to use for ascending and descending sorts of a\n     * particular column.\n     *\n     * @param columnIndex {Integer}\n     *   The index of the column for which the sort methods are being\n     *   provided.\n     *\n     * @param compare {Function|Map}\n     *   If provided as a Function, this is the comparator function to sort in\n     *   ascending order. It takes three parameters: the two arrays of row data,\n     *   row1 and row2, being compared and the column index sorting was requested \n     *   for. \n     *\n     *   For backwards compatability, user-supplied compare functions may still \n     *   take only two parameters, the two arrays of row data, row1 and row2, \n     *   being compared and obtain the column index as arguments.callee.columnIndex. \n     *   This is deprecated, however, as arguments.callee is disallowed in ES5 strict\n     *   mode and ES6.\n     *\n     *   The comparator function must return 1, 0 or -1, when the column in row1\n     *   is greater than, equal to, or less than, respectively, the column in\n     *   row2.\n     *\n     *   If this parameter is a Map, it shall have two properties: \"ascending\"\n     *   and \"descending\". The property value of each is a comparator\n     *   function, as described above.\n     *\n     *   If only the \"ascending\" function is provided (i.e. this parameter is\n     *   a Function, not a Map), then the \"descending\" function is built\n     *   dynamically by passing the two parameters to the \"ascending\" function\n     *   in reversed order. <i>Use of a dynamically-built \"descending\" function\n     *   generates at least one extra function call for each row in the table,\n     *   and possibly many more. If the table is expected to have more than\n     *   about 1000 rows, you will likely want to provide a map with a custom\n     *   \"descending\" sort function as well as the \"ascending\" one.</i>\n     *\n     */\n    setSortMethods : function(columnIndex, compare)\n    {\n      var methods;\n      if (qx.lang.Type.isFunction(compare))\n      {\n        methods =\n          {\n            ascending  : compare,\n            descending : function(row1, row2, columnIndex)\n            {\n              /* assure backwards compatibility for sort functions using\n               * arguments.callee.columnIndex and fix a bug where retreiveing\n               * column index via this way did not work for the case where a \n               * single comparator function was used. \n               * Note that arguments.callee is not available in ES5 strict mode and ES6. \n               * See discussion in \n               * https://github.com/qooxdoo/qooxdoo/pull/9499#pullrequestreview-99655182\n               */ \n              compare.columnIndex = columnIndex;\n\n              return compare(row2, row1, columnIndex);\n            }\n          };\n      }\n      else\n      {\n        methods = compare;\n      }\n      this.__sortMethods[columnIndex] = methods;\n    },\n\n\n    /**\n     * Returns the sortMethod(s) for a table column.\n     *\n     * @param columnIndex {Integer} The index of the column for which the sort\n     *   methods are being  provided.\n     *\n     * @return {Map} a map with the two properties \"ascending\"\n     *   and \"descending\" for the specified column.\n     *   The property value of each is a comparator function, as described\n     *   in {@link #setSortMethods}.\n     */\n    getSortMethods : function(columnIndex) {\n      return this.__sortMethods[columnIndex];\n    },\n\n\n    /**\n     * Clears the sorting.\n     */\n    clearSorting : function()\n    {\n      if (this.__sortColumnIndex != -1)\n      {\n        this.__sortColumnIndex = -1;\n        this.__sortAscending = true;\n\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    // overridden\n    getSortColumnIndex : function() {\n      return this.__sortColumnIndex;\n    },\n\n    /**\n     * Set the sort column index\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param columnIndex {Integer} index of the column\n     */\n    _setSortColumnIndex : function(columnIndex)\n    {\n      this.__sortColumnIndex = columnIndex;\n    },\n\n    // overridden\n    isSortAscending : function() {\n      return this.__sortAscending;\n    },\n\n    /**\n     * Set whether to sort in ascending order or not.\n     *\n     * WARNING: This should be called only by subclasses with intimate\n     *          knowledge of what they are doing!\n     *\n     * @param ascending {Boolean}\n     *   <i>true</i> for an ascending sort;\n     *   <i> false</i> for a descending sort.\n     */\n    _setSortAscending : function(ascending)\n    {\n      this.__sortAscending = ascending;\n    },\n\n    // overridden\n    getRowCount : function() {\n      return this._rowArr.length;\n    },\n\n    // overridden\n    getValue : function(columnIndex, rowIndex)\n    {\n      if (rowIndex < 0 || rowIndex >= this._rowArr.length) {\n        throw new Error(\"this._rowArr out of bounds: \" + rowIndex + \" (0..\" + this._rowArr.length + \")\");\n      }\n\n      return this._rowArr[rowIndex][columnIndex];\n    },\n\n    // overridden\n    setValue : function(columnIndex, rowIndex, value)\n    {\n      if (this._rowArr[rowIndex][columnIndex] != value)\n      {\n        this._rowArr[rowIndex][columnIndex] = value;\n\n        // Inform the listeners\n        if (this.hasListener(\"dataChanged\"))\n        {\n          var data =\n          {\n            firstRow    : rowIndex,\n            lastRow     : rowIndex,\n            firstColumn : columnIndex,\n            lastColumn  : columnIndex\n          };\n\n          this.fireDataEvent(\"dataChanged\", data);\n        }\n\n        if (columnIndex == this.__sortColumnIndex) {\n          this.clearSorting();\n        }\n      }\n    },\n\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setData : function(rowArr, clearSorting)\n    {\n      this._rowArr = rowArr;\n\n      // Inform the listeners\n      if (this.hasListener(\"dataChanged\"))\n      {\n        var data =\n        {\n          firstRow    : 0,\n          lastRow     : rowArr.length - 1,\n          firstColumn : 0,\n          lastColumn  : this.getColumnCount() - 1\n        };\n\n        this.fireDataEvent(\"dataChanged\", data);\n      }\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Returns the data of this model.\n     *\n     * Warning: Do not alter this array! If you want to change the data use\n     * {@link #setData}, {@link #setDataAsMapArray} or {@link #setValue} instead.\n     *\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    getData : function() {\n      return this._rowArr;\n    },\n\n\n    /**\n     * Sets the whole data in a bulk.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setDataAsMapArray : function(mapArr, rememberMaps, clearSorting) {\n      this.setData(this._mapArray2RowArr(mapArr, rememberMaps), clearSorting);\n    },\n\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are appended to the end.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRows : function(rowArr, startIndex, clearSorting)\n    {\n      if (startIndex == null) {\n        startIndex = this._rowArr.length;\n      }\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, 0);\n\n      // Insert the new rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : startIndex,\n        lastRow     : this._rowArr.length - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Adds some rows to the model.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    addRowsAsMapArray : function(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.addRows(this._mapArray2RowArr(mapArr, rememberMaps), startIndex, clearSorting);\n    },\n\n\n    /**\n     * Sets rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array will be altered!\n     *\n     * @param rowArr {var[][]} An array containing an array for each row. Each\n     *          row-array contains the values in that row in the order of the columns\n     *          in this model.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *          the rows are set from the beginning (0).\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRows : function(rowArr, startIndex, clearSorting)\n    {\n      if (startIndex == null) {\n        startIndex = 0;\n      }\n\n      // Prepare the rowArr so it can be used for apply\n      rowArr.splice(0, 0, startIndex, rowArr.length);\n\n      // Replace rows\n      Array.prototype.splice.apply(this._rowArr, rowArr);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : startIndex,\n        lastRow     : this._rowArr.length - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1\n      };\n      this.fireDataEvent(\"dataChanged\", data);\n\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Set rows in the model. The rows overwrite the old rows starting at\n     * <code>startIndex</code> to <code>startIndex+rowArr.length</code>.\n     *\n     * Warning: The given array (mapArr) will be altered!\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *        row-map contains the column IDs as key and the cell values as value.\n     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,\n     *        the rows are appended to the end.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    setRowsAsMapArray : function(mapArr, startIndex, rememberMaps, clearSorting) {\n      this.setRows(this._mapArray2RowArr(mapArr, rememberMaps), startIndex, clearSorting);\n    },\n\n\n    /**\n     * Removes some rows from the model.\n     *\n     * @param startIndex {Integer} the index of the first row to remove.\n     * @param howMany {Integer} the number of rows to remove.\n     * @param clearSorting {Boolean ? true} Whether to clear the sort state.\n     */\n    removeRows : function(startIndex, howMany, clearSorting)\n    {\n      this._rowArr.splice(startIndex, howMany);\n\n      // Inform the listeners\n      var data =\n      {\n        firstRow    : startIndex,\n        lastRow     : this._rowArr.length - 1,\n        firstColumn : 0,\n        lastColumn  : this.getColumnCount() - 1,\n        removeStart : startIndex,\n        removeCount : howMany\n      };\n\n      this.fireDataEvent(\"dataChanged\", data);\n      if (clearSorting !== false) {\n        this.clearSorting();\n      }\n    },\n\n\n    /**\n     * Creates an array of maps to an array of arrays.\n     *\n     * @param mapArr {Map[]} An array containing a map for each row. Each\n     *          row-map contains the column IDs as key and the cell values as value.\n     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.\n     *        If true {@link #getRowData} will return the original map.\n     * @return {var[][]} An array containing an array for each row. Each\n     *           row-array contains the values in that row in the order of the columns\n     *           in this model.\n     */\n    _mapArray2RowArr : function(mapArr, rememberMaps)\n    {\n      var rowCount = mapArr.length;\n      var columnCount = this.getColumnCount();\n      var dataArr = new Array(rowCount);\n      var columnArr;\n\n      for (var i=0; i<rowCount; ++i)\n      {\n      columnArr = [];\n      if (rememberMaps) {\n        columnArr.originalData = mapArr[i];\n      }\n\n        for (var j=0; j<columnCount; ++j) {\n          columnArr[j] = mapArr[i][this.getColumnId(j)];\n        }\n\n        dataArr[i] = columnArr;\n      }\n\n      return dataArr;\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._rowArr = this.__editableColArr = this.__sortMethods =\n      this.__sortableColArr = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The focus indicator widget\n */\nqx.Class.define(\"qx.ui.table.pane.FocusIndicator\",\n{\n  extend : qx.ui.container.Composite,\n\n  /**\n   * @param scroller {qx.ui.table.pane.Scroller} The scroller, which contains this focus indicator\n   */\n  construct : function(scroller)\n  {\n    // use the grow layout to make sure that the editing control\n    // always fills the focus indicator box.\n    this.base(arguments, new qx.ui.layout.Grow());\n    this.__scroller = scroller;\n\n    this.setKeepActive(true);\n    this.addListener(\"keypress\", this._onKeyPress, this);\n  },\n\n  properties :\n  {\n    // overridden\n    visibility :\n    {\n      refine : true,\n      init : \"excluded\"\n    },\n\n    /** Table row, where the indicator is placed. */\n    row : {\n      check : \"Integer\",\n      nullable : true\n    },\n\n    /** Table column, where the indicator is placed. */\n    column : {\n      check : \"Integer\",\n      nullable : true\n    }\n  },\n\n  members :\n  {\n    __scroller : null,\n\n\n    /**\n     * Keypress handler. Suppress all key events but \"Enter\" and \"Escape\"\n     *\n     * @param e {qx.event.type.KeySequence} key event\n     */\n    _onKeyPress : function(e)\n    {\n      var iden = e.getKeyIdentifier();\n      if (iden !== \"Escape\" && iden !== \"Enter\") {\n        e.stopPropagation();\n      }\n    },\n\n\n    /**\n     * Move the focus indicator to the given table cell.\n     *\n     * @param col {Integer?null} The table column\n     * @param row {Integer?null} The table row\n     */\n    moveToCell : function(col, row)\n    {\n      // check if the focus indicator is shown and if the new column is\n      // editable. if not, just exclude the indicator because the pointer events\n      // should go to the cell itself linked with HTML links [BUG #4250]\n      if (\n        !this.__scroller.getShowCellFocusIndicator() &&\n        !this.__scroller.getTable().getTableModel().isColumnEditable(col)\n      ) {\n        this.exclude();\n        return;\n      } else {\n        this.show();\n      }\n\n      if (col == null)\n      {\n        this.hide();\n        this.setRow(null);\n        this.setColumn(null);\n      }\n      else\n      {\n        var xPos = this.__scroller.getTablePaneModel().getX(col);\n\n        if (xPos == -1)\n        {\n          this.hide();\n          this.setRow(null);\n          this.setColumn(null);\n        }\n        else\n        {\n          var table = this.__scroller.getTable();\n          var columnModel = table.getTableColumnModel();\n          var paneModel = this.__scroller.getTablePaneModel();\n\n          var firstRow = this.__scroller.getTablePane().getFirstVisibleRow();\n          var rowHeight = table.getRowHeight();\n\n          this.setUserBounds(\n              paneModel.getColumnLeft(col) - 2,\n              (row - firstRow) * rowHeight - 2,\n              columnModel.getColumnWidth(col) + 3,\n              rowHeight + 3\n          );\n          this.show();\n\n          this.setRow(row);\n          this.setColumn(col);\n        }\n      }\n    }\n  },\n\n  destruct : function () {\n     this.__scroller = null;\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Interface for a column menu item corresponding to a table column.\n */\nqx.Interface.define(\"qx.ui.table.IColumnMenuItem\",\n{\n  properties :\n  {\n    /**\n     * Whether the table column associated with this menu item is visible\n     * Should be of type {Boolean}!\n     */\n    columnVisible : { }\n  },\n\n  events :\n  {\n    /**\n     * Dispatched when a column changes visibility state. The event data is a\n     * boolean indicating whether the table column associated with this menu\n     * item is now visible.\n     */\n    changeColumnVisible : \"qx.event.type.Data\"\n  }\n});\n",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Provides information about locale-dependent number formatting (like the decimal\n * separator).\n *\n * @cldr()\n */\n\nqx.Class.define(\"qx.locale.Number\",\n{\n  statics :\n  {\n    /**\n     * Get decimal separator for number formatting\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} decimal separator.\n     */\n    getDecimalSeparator : function(locale) {\n      return qx.locale.Manager.getInstance().localize(\"cldr_number_decimal_separator\", [], locale);\n    },\n\n\n    /**\n     * Get thousand grouping separator for number formatting\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} group separator.\n     */\n    getGroupSeparator : function(locale) {\n      return qx.locale.Manager.getInstance().localize(\"cldr_number_group_separator\", [], locale);\n    },\n\n\n    /**\n     * Get percent format string\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} percent format string.\n     */\n    getPercentFormat : function(locale) {\n      return qx.locale.Manager.getInstance().localize(\"cldr_number_percent_format\", [], locale);\n    }\n  }\n});\n"
  ]
}