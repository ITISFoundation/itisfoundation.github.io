{
  "version": 3,
  "sources": [
    "../transpiled/qx/ui/tree/selection/SelectionManager.js",
    "../transpiled/qx/ui/tree/Tree.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/apiviewer/part-boot-bundle-58.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Responsible for the selection management of the {@link qx.ui.tree.Tree}.\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.tree.selection.SelectionManager\",\n{\n  extend : qx.ui.core.selection.ScrollArea,\n\n  members :\n  {\n    // overridden\n    _getSelectableLocationY : function(item)\n    {\n      var computed = item.getBounds();\n      if (computed)\n      {\n        var top = this._getWidget().getItemTop(item);\n        return {\n          top: top,\n          bottom: top+computed.height\n        };\n      }\n    },\n\n\n    // overridden\n    _isSelectable : function(item) {\n      return this._isItemSelectable(item)\n      && item instanceof qx.ui.tree.core.AbstractTreeItem;\n    },\n\n\n    // overridden\n    _getSelectableFromPointerEvent : function(event)\n    {\n      return this._getWidget().getTreeItem(event.getTarget());\n    },\n\n\n    // overridden\n    getSelectables : function(all)\n    {\n      // if only the user selectables should be returned\n      var oldUserInteraction = false;\n      if (!all) {\n        oldUserInteraction = this._userInteraction;\n        this._userInteraction = true;\n      }\n\n      var widget = this._getWidget();\n      var result = [];\n\n      if (widget.getRoot() != null)\n      {\n        var items = widget.getRoot().getItems(true, !!all, widget.getHideRoot());\n\n        for (var i = 0; i < items.length; i++)\n        {\n          if (this._isSelectable(items[i])) {\n            result.push(items[i]);\n          }\n        }\n      }\n\n      // reset to the former user interaction state\n      this._userInteraction = oldUserInteraction;\n\n      return result;\n    },\n\n\n    // overridden\n    _getSelectableRange : function(item1, item2)\n    {\n      // Fast path for identical items\n      if (item1 === item2) {\n        return [item1];\n      }\n\n      var selectables = this.getSelectables();\n\n      var item1Index = selectables.indexOf(item1);\n      var item2Index = selectables.indexOf(item2);\n\n      if (item1Index < 0 || item2Index < 0) {\n        return [];\n      }\n\n      if (item1Index < item2Index) {\n        return selectables.slice(item1Index, item2Index+1);\n      } else {\n        return selectables.slice(item2Index, item1Index+1);\n      }\n    },\n\n\n    // overridden\n    _getFirstSelectable : function() {\n      return this.getSelectables()[0] || null;\n    },\n\n\n    // overridden\n    _getLastSelectable : function()\n    {\n      var selectables = this.getSelectables();\n      if (selectables.length > 0) {\n        return selectables[selectables.length-1];\n      } else {\n        return null;\n      }\n    },\n\n    // overridden\n    _getRelatedSelectable : function(item, relation)\n    {\n      var widget = this._getWidget();\n      var related = null;\n\n      switch (relation)\n      {\n        case \"above\":\n          related = widget.getPreviousNodeOf(item, false);\n          break;\n\n        case \"under\":\n          related = widget.getNextNodeOf(item, false);\n          break;\n\n        case \"left\":\n        case \"right\":\n          break;\n      }\n\n      if (!related) {\n        return null;\n      }\n\n      if (this._isSelectable(related)) {\n        return related;\n      } else {\n        return this._getRelatedSelectable(related, relation);\n      }\n    }\n  }\n});",
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n     * Christian Hagendorn (chris_schmidt)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * The Tree class implements a tree widget, with collapsible and expandable\n * container nodes and terminal leaf nodes. You instantiate a Tree object and\n * then assign the tree a root folder using the {@link #root} property.\n *\n * If you don't want to show the root item, you can hide it with the\n * {@link #hideRoot} property.\n *\n * The handling of <b>selections</b> within a tree is somewhat distributed\n * between the root tree object and the attached {@link qx.ui.tree.selection.SelectionManager}.\n * To get the currently selected element of a tree use the tree {@link #getSelection}\n * method and tree {@link #setSelection} to set it. The TreeSelectionManager\n * handles more coarse-grained issues like providing {@link #selectAll} and\n * {@link #resetSelection} methods.\n */\nqx.Class.define(\"qx.ui.tree.Tree\",\n{\n  extend : qx.ui.core.scroll.AbstractScrollArea,\n  implement : [\n    qx.ui.core.IMultiSelection,\n    qx.ui.form.IModelSelection,\n    qx.ui.form.IField,\n    qx.ui.form.IForm\n  ],\n  include : [\n    qx.ui.core.MMultiSelectionHandling,\n    qx.ui.core.MContentPadding,\n    qx.ui.form.MModelSelection,\n    qx.ui.form.MForm\n  ],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__content = new qx.ui.container.Composite(new qx.ui.layout.VBox()).set({\n      allowShrinkY: false,\n      allowGrowX: true\n    });\n\n    this.getChildControl(\"pane\").add(this.__content);\n\n    this.initOpenMode();\n    this.initRootOpenClose();\n\n    this.addListener(\"changeSelection\", this._onChangeSelection, this);\n    this.addListener(\"keypress\", this._onKeyPress, this);\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n\n  events :\n  {\n    /**\n     * This event is fired after a tree item was added to the tree. The\n     * {@link qx.event.type.Data#getData} method of the event returns the\n     * added item.\n     */\n    addItem : \"qx.event.type.Data\",\n\n    /**\n     * This event is fired after a tree item has been removed from the tree.\n     * The {@link qx.event.type.Data#getData} method of the event returns the\n     * removed item.\n     */\n    removeItem : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Control whether tap or double tap should open or close the tapped\n     * folder.\n     */\n    openMode :\n    {\n      check : [\"tap\", \"dbltap\", \"none\"],\n      init : \"dbltap\",\n      apply : \"_applyOpenMode\",\n      event : \"changeOpenMode\",\n      themeable : true\n    },\n\n    /**\n     * The root tree item of the tree to display\n     */\n    root :\n    {\n      check : \"qx.ui.tree.core.AbstractTreeItem\",\n      init : null,\n      nullable : true,\n      event : \"changeRoot\",\n      apply : \"_applyRoot\"\n    },\n\n    /**\n     * Hide the root (Tree) node.  This differs from the visibility property in\n     * that this property hides *only* the root node, not the node's children.\n     */\n    hideRoot :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply :\"_applyHideRoot\"\n    },\n\n    /**\n     * Whether the Root should have an open/close button.  This may also be\n     * used in conjunction with the hideNode property to provide for virtual root\n     * nodes.  In the latter case, be very sure that the virtual root nodes are\n     * expanded programmatically, since there will be no open/close button for the\n     * user to open them.\n     */\n    rootOpenClose :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyRootOpenClose\"\n    },\n\n    // overridden\n    appearance :\n    {\n      refine: true,\n      init: \"tree\"\n    },\n\n    // overridden\n    focusable :\n    {\n      refine : true,\n      init : true\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __content : null,\n\n    /** @type {Class} Pointer to the selection manager to use */\n    SELECTION_MANAGER : qx.ui.tree.selection.SelectionManager,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Get the widget, which contains the root tree item. This widget must\n     * have a vertical box layout.\n     *\n     * @return {qx.ui.core.Widget} the children container\n     */\n    getChildrenContainer : function() {\n      return this.__content;\n    },\n\n\n    // property apply\n    _applyRoot : function(value, old)\n    {\n      var container = this.getChildrenContainer();\n\n      if (old && !old.isDisposed())\n      {\n        container.remove(old);\n        if (old.hasChildren()) {\n          container.remove(old.getChildrenContainer());\n        }\n      }\n\n      if (value)\n      {\n        container.add(value);\n        if (value.hasChildren()) {\n          container.add(value.getChildrenContainer());\n        }\n\n        value.setVisibility(this.getHideRoot() ? \"excluded\" : \"visible\");\n        value.recursiveAddToWidgetQueue();\n      }\n    },\n\n\n    // property apply\n    _applyHideRoot : function(value, old)\n    {\n      var root = this.getRoot();\n      if (!root) {\n        return;\n      }\n\n      root.setVisibility(value ? \"excluded\" : \"visible\");\n      root.recursiveAddToWidgetQueue();\n    },\n\n\n    // property apply\n    _applyRootOpenClose : function(value, old)\n    {\n      var root = this.getRoot();\n      if (!root) {\n        return;\n      }\n      root.recursiveAddToWidgetQueue();\n    },\n\n\n    /**\n     * Returns the element, to which the content padding should be applied.\n     *\n     * @return {qx.ui.core.Widget} The content padding target.\n     */\n    _getContentPaddingTarget : function() {\n      return this.__content;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION MANAGER API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Get the tree item following the given item in the tree hierarchy.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the item after\n     * @param invisible {Boolean?true} Whether invisible/closed tree items\n     *     should be returned as well.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item after the given item. May be\n     *     <code>null</code> if the item is the last item.\n     */\n    getNextNodeOf : function(treeItem, invisible)\n    {\n      if ((invisible !== false || treeItem.isOpen()) && treeItem.hasChildren()) {\n        return treeItem.getChildren()[0];\n      }\n\n      while (treeItem)\n      {\n        var parent = treeItem.getParent();\n        if (!parent) {\n          return null;\n        }\n\n\n        var parentChildren = parent.getChildren();\n        var index = parentChildren.indexOf(treeItem);\n        if (index > -1 && index < parentChildren.length-1) {\n          return parentChildren[index+1];\n        }\n\n        treeItem = parent;\n      }\n      return null;\n    },\n\n\n    /**\n     * Get the tree item preceding the given item in the tree hierarchy.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the item before\n     * @param invisible {Boolean?true} Whether invisible/closed tree items\n     *     should be returned as well.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item before the given item. May be\n     *     <code>null</code> if the given item is the tree's root.\n     */\n    getPreviousNodeOf : function(treeItem, invisible)\n    {\n      var parent = treeItem.getParent();\n      if (!parent) {\n        return null;\n      }\n\n      if (this.getHideRoot())\n      {\n        if (parent == this.getRoot())\n        {\n          if (parent.getChildren()[0] == treeItem) {\n            return null;\n          }\n        }\n      }\n      else\n      {\n        if (treeItem == this.getRoot()) {\n          return null;\n        }\n      }\n\n      var parentChildren = parent.getChildren();\n      var index = parentChildren.indexOf(treeItem);\n      if (index > 0)\n      {\n        var folder = parentChildren[index-1];\n        while ((invisible !== false || folder.isOpen()) && folder.hasChildren())\n        {\n          var children = folder.getChildren();\n          folder = children[children.length-1];\n        }\n        return folder;\n      }\n      else\n      {\n        return parent;\n      }\n    },\n\n\n    /**\n     * Get the tree item's next sibling.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the following\n     * sibling of.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item following the given item. May be\n     *     <code>null</code> if the given item is the last in it's nesting\n     *     level.\n     */\n    getNextSiblingOf : function(treeItem)\n    {\n      if (treeItem == this.getRoot()) {\n        return null;\n      }\n\n      var parent = treeItem.getParent();\n      var siblings = parent.getChildren();\n      var index = siblings.indexOf(treeItem);\n\n      if (index < siblings.length-1) {\n        return siblings[index+1];\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Get the tree item's previous sibling.\n     *\n     * @param treeItem {qx.ui.tree.core.AbstractTreeItem} The tree item to get the previous\n     * sibling of.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem?null} The item preceding the given item. May be\n     *     <code>null</code> if the given item is the first in it's nesting\n     *     level.\n     */\n    getPreviousSiblingOf : function(treeItem)\n    {\n      if (treeItem == this.getRoot()) {\n        return null;\n      }\n\n      var parent = treeItem.getParent();\n      var siblings = parent.getChildren();\n      var index = siblings.indexOf(treeItem);\n\n      if (index > 0) {\n        return siblings[index-1];\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Returns all children of the tree.\n     *\n     * @param recursive {Boolean ? false} whether children of subfolder should be\n     *     included\n     * @param invisible {Boolean ? true} whether invisible children should be\n     *     included\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} list of children\n     */\n    getItems : function(recursive, invisible) {\n      if (this.getRoot() != null) {\n        return this.getRoot().getItems(recursive, invisible, this.getHideRoot());\n      }\n      else {\n        return [];\n      }\n    },\n\n\n    /**\n     * Returns the tree's only \"external\" child, namely the root node.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem[]} Array containing the root node\n     */\n    getChildren : function() {\n      if (this.getRoot() != null) {\n        return [this.getRoot()];\n      }\n      else {\n        return [];\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Returns the tree item, which contains the given widget.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to get the containing tree\n     *   item for.\n     * @return {qx.ui.tree.core.AbstractTreeItem|null} The tree item containing the widget. If the\n     *     widget is not inside of any tree item <code>null</code> is returned.\n     */\n    getTreeItem : function(widget)\n    {\n      while (widget)\n      {\n        if (widget == this) {\n          return null;\n        }\n\n        if (widget instanceof qx.ui.tree.core.AbstractTreeItem) {\n          return widget;\n        }\n\n        widget = widget.getLayoutParent();\n      }\n\n      return null;\n    },\n\n\n    // property apply\n    _applyOpenMode : function(value, old)\n    {\n      if (old == \"tap\") {\n        this.removeListener(\"tap\", this._onOpen, this);\n      } else if (old == \"dbltap\") {\n        this.removeListener(\"dbltap\", this._onOpen, this);\n      }\n\n      if (value == \"tap\") {\n        this.addListener(\"tap\", this._onOpen, this);\n      } else if (value == \"dbltap\") {\n        this.addListener(\"dbltap\", this._onOpen, this);\n      }\n    },\n\n\n    /**\n     * Event handler for tap events, which could change a tree item's open\n     * state.\n     *\n     * @param e {qx.event.type.Pointer} The tap event object\n     */\n    _onOpen : function(e)\n    {\n      var treeItem = this.getTreeItem(e.getTarget());\n      if (!treeItem ||!treeItem.isOpenable()) {\n        return;\n      }\n\n      treeItem.setOpen(!treeItem.isOpen());\n      e.stopPropagation();\n    },\n\n\n    /**\n     * Event handler for changeSelection events, which opens all parent folders\n     * of the selected folders.\n     *\n     * @param e {qx.event.type.Data} The selection data event.\n     */\n    _onChangeSelection : function(e) {\n      var selection = e.getData();\n      // for every selected folder\n      for (var i = 0; i < selection.length; i++) {\n        var folder = selection[i];\n        // go up all parents and open them\n        while (folder.getParent() != null) {\n          folder = folder.getParent();\n          folder.setOpen(true);\n        }\n      }\n    },\n\n\n    /**\n     * Event handler for key press events. Open and close the current selected\n     * item on key left and right press. Jump to parent on key left if already\n     * closed.\n     *\n     * @param e {qx.event.type.KeySequence} key event.\n     */\n    _onKeyPress : function(e)\n    {\n      var item = this._getLeadItem();\n\n      if (item !== null)\n      {\n        switch(e.getKeyIdentifier())\n        {\n          case \"Left\":\n            if (item.isOpenable() && item.isOpen()) {\n              item.setOpen(false);\n            } else if (item.getParent()) {\n              this.setSelection([item.getParent()]);\n            }\n            break;\n\n          case \"Right\":\n            if (item.isOpenable() && !item.isOpen()) {\n              item.setOpen(true);\n            }\n            break;\n\n          case \"Enter\":\n          case \"Space\":\n            if (item.isOpenable()) {\n              item.toggleOpen();\n            }\n            break;\n        }\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n\n  destruct : function() {\n    this._disposeObjects(\"__content\");\n  }\n});\n"
  ]
}