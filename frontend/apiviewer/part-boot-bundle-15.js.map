{
  "version": 3,
  "sources": [
    "../transpiled/qx/util/DynamicScriptLoader.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/apiviewer/part-boot-bundle-15.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2016 Visionet GmbH, http://www.visionet.de\n     2016 OETIKER+PARTNER AG, https://www.oetiker.ch\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Dietrich Streifert (level420)\n     * Tobias Oetiker (oetiker)\n\n************************************************************************ */\n\n\n/**\n * Dynamically load non qx scripts. This class is aware of all scripts that have\n * been loaded using its instances, so if two instances load jquery, it will only\n * be loaded once, and the second instance will wait for the jquery to be loaded\n * before continuing to load additional scripts.\n *\n * Usage example:\n *\n * <pre>\n *  ... assets ...\n * /**\n *  * @asset(myapp/jquery/*)\n *  * @asset(myapp/highcharts/*)\n *  *\n *  * @ignore(jQuery.*)\n *  * @ignore(Highcharts.*)\n *  ...\n *\n *\n *    // in debug mode load the uncompressed unobfuscated scripts\n *    var src = '';\n *    var min = '.min';\n *    if (qx.core.Environment.get(\"qx.debug\")) {\n *      src = '.src';\n *      min = '';\n *    }\n *\n *    // initialize the script loading\n *    var dynLoader = new qx.util.DynamicScriptLoader([\n *        \"myapp/jquery/jquery\"+min+\".js\",\n *        \"myapp/highcharts/highcharts\"+src+\".js\",\n *        \"myapp/highcharts/highcharts-more\"+src+\".js\",\n *        \"myapp/highcharts/highcharts-modifications.js\"\n *    ]);\n *\n *\n *    dynLoader.addListenerOnce('ready',function(e){\n *      console.log(\"all scripts have been loaded!\");\n *    });\n *\n *    dynLoader.addListener('failed',function(e){\n *      var data = e.getData();\n *      console.log(\"failed to load \"+data.script);\n *    });\n *\n *    dynLoader.start();\n *    \n * </pre>\n */\nqx.Class.define(\"qx.util.DynamicScriptLoader\", {\n  extend: qx.core.Object,\n\n  /**\n   * Create a loader for the given scripts.\n   *\n   * @param scriptArr {Array|String} the uri name(s) of the script(s) to load \n   */\n\n  construct: function (scriptArr) {\n    this.base(arguments);\n    this.__started = false;\n    this.__QUEUE = (qx.lang.Type.isString(scriptArr)\n                ? [ scriptArr ]\n                : qx.lang.Array.clone(scriptArr));\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * fired when a script is loaded successfully. The data contains 'script' and 'status' keys.\n     */\n    loaded: 'qx.event.type.Data',\n\n    /**\n     * fired when a specific script fails loading.  The data contains 'script' and 'status' keys.\n     */\n    failed: 'qx.event.type.Data',\n\n    /**\n     * fired when all given scripts are loaded, each time loadScriptsDynamic is called.\n     */\n    ready: 'qx.event.type.Event'\n  },\n\n  statics: {\n    /**\n     * Map of scripts being added at the present time. Key is script name; value is instance of this class which\n     * is loading it.\n     */\n    __IN_PROGRESS: {},\n     /**\n      * Map of scripts that have fully loaded. Key is script name; value is true\n      */\n    __LOADED: {}\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members: {\n\n    /**\n     * Array of the scripts to be loaded\n     */\n    __QUEUE: null,\n\n    /**\n     * True if start has been called.\n     */\n    __started: null,\n\n\n\n    /**\n     * Start loading scripts. This may only be called once!\n     * @return {Promise?} a promise which will be resolved after load of all scripts if promise support is enabled; nothing (undefined) if promises are not enabled.\n     */\n    start: qx.core.Environment.select('qx.promise', {\n      \"true\": function() {\n        return new qx.Promise(function (resolve, reject) {\n          this.addListenerOnce(\"ready\", resolve, this);\n          this.addListenerOnce(\"failed\", function (e) {\n            reject(new Error(e.getData()));\n          }, this);\n          if (this.isDisposed()) {\n            reject(new Error('disposed'));\n          }\n          if (this.__started) {\n            reject(new Error('you can only call start once per instance'));\n          }\n          this.__started = true;\n          this.__loadScripts();\n        }, this);\n      },\n      \"false\": function () {\n        if (this.isDisposed()) {\n          return;\n        }\n        if (this.__started) {\n          throw new Error('you can only call start once per instance');\n        }\n        this.__started = true;\n        this.__loadScripts();\n      }\n    }),\n\n\n    /**\n     * Chain loading scripts.\n     *\n     * Recursively called until the array of scripts is consumed\n     *\n     */\n    __loadScripts: function () {\n      var DynamicScriptLoader = qx.util.DynamicScriptLoader;\n      var script;\n      var dynLoader;\n      var id1, id2;\n      var uri;\n      var loader;\n\n      script = this.__QUEUE.shift();\n      if (!script){\n        this.fireEvent(\"ready\")\n        return;\n      }\n\n      if (DynamicScriptLoader.__LOADED[script]){\n        this.fireDataEvent('loaded',{\n          script: script,\n          status: 'preloaded'\n        });\n        this.__loadScripts();\n        return;\n      }           \n\n      dynLoader = DynamicScriptLoader.__IN_PROGRESS[script];\n      if (dynLoader){\n\n          id1 = dynLoader.addListener('loaded',function (e) {\n            if (this.isDisposed()) {\n              return;\n            }\n            var data = e.getData();\n            if (data.script === script){\n              dynLoader.removeListenerById(id2);\n              dynLoader.removeListenerById(id1);\n              this.fireDataEvent('loaded',data);\n              this.__loadScripts();\n            }\n          },this);\n\n          id2 = dynLoader.addListener('failed',function (e) {\n            if (this.isDisposed()) {\n              return;\n            }\n            var data = e.getData();\n            dynLoader.removeListenerById(id1);\n            dynLoader.removeListenerById(id2);              \n            this.fireDataEvent('failed',{\n              script: script,\n              status: 'loading of ' + data.script + ' failed while waiting for ' + script\n            });\n          },this);\n\n          return;\n      }\n\n      uri = qx.util.ResourceManager.getInstance().toUri(script);\n\n      loader = new qx.bom.request.Script();\n\n      loader.on(\"load\", function(request) {\n        if (this.isDisposed()) {\n           return;\n        }\n        DynamicScriptLoader.__LOADED[script] = true;\n        delete DynamicScriptLoader.__IN_PROGRESS[script];\n        this.fireDataEvent('loaded', {\n          script: script,\n          status: request.status\n        });\n        this.__loadScripts();\n      },this);\n\n      var onError = function(request) {\n        if (this.isDisposed()) {\n           return;\n        }\n        delete DynamicScriptLoader.__IN_PROGRESS[script];\n        this.fireDataEvent('failed', {\n          script: script,\n          status: request.status\n        });\n      };\n\n      loader.on(\"error\", onError,this);\n      loader.on(\"timeout\", onError,this);\n\n      // this.debug(\"Loading \" + script + \" started\");\n      loader.open(\"GET\", uri);\n      DynamicScriptLoader.__IN_PROGRESS[script] = this;\n      loader.send();\n    }\n  },\n  destruct : function() {\n    var DynamicScriptLoader = qx.util.DynamicScriptLoader;\n    for (var key in DynamicScriptLoader.__IN_PROGRESS){\n      if (DynamicScriptLoader.__IN_PROGRESS[key] === this) {\n        delete DynamicScriptLoader.__IN_PROGRESS[key];\n      }\n    }\n    this.__QUEUE = undefined;\n  }\n});\n"
  ]
}