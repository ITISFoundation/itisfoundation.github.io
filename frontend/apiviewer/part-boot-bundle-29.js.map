{
  "version": 3,
  "sources": [
    "../transpiled/qx/ui/splitpane/Pane.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "build-output/apiviewer/part-boot-bundle-29.js.map",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A split panes divides an area into two panes. The ratio between the two\n * panes is configurable by the user using the splitter.\n *\n * @childControl slider {qx.ui.splitpane.Slider} shown during resizing the splitpane\n * @childControl splitter {qx.ui.splitpane.Splitter} splitter to resize the splitpane\n */\nqx.Class.define(\"qx.ui.splitpane.Pane\",\n{\n  extend : qx.ui.core.Widget,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new instance of a SplitPane. It allows the user to dynamically\n   * resize the areas dropping the border between.\n   *\n   * @param orientation {String} The orientation of the split pane control.\n   * Allowed values are \"horizontal\" (default) and \"vertical\".\n   */\n  construct : function(orientation)\n  {\n    this.base(arguments);\n\n    this.__children = [];\n\n    // Initialize orientation\n    if (orientation) {\n      this.setOrientation(orientation);\n    } else {\n      this.initOrientation();\n    }\n\n    // add all pointer listener to the blocker\n    this.__blocker.addListener(\"pointerdown\", this._onPointerDown, this);\n    this.__blocker.addListener(\"pointerup\", this._onPointerUp, this);\n    this.__blocker.addListener(\"pointermove\", this._onPointerMove, this);\n    this.__blocker.addListener(\"pointerout\", this._onPointerOut, this);\n    this.__blocker.addListener(\"losecapture\", this._onPointerUp, this);\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"splitpane\"\n    },\n\n    /**\n     * Distance between pointer and splitter when the cursor should change\n     * and enable resizing.\n     */\n    offset :\n    {\n      check : \"Integer\",\n      init : 6,\n      apply : \"_applyOffset\"\n    },\n\n    /**\n     * The orientation of the splitpane control.\n     */\n    orientation :\n    {\n      init  : \"horizontal\",\n      check : [ \"horizontal\", \"vertical\" ],\n      apply : \"_applyOrientation\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    __splitterOffset : null,\n    __activeDragSession : false,\n    __lastPointerX : null,\n    __lastPointerY : null,\n    __isHorizontal : null,\n    __beginSize : null,\n    __endSize : null,\n    __children : null,\n    __blocker : null,\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        // Create and add slider\n        case \"slider\":\n          control = new qx.ui.splitpane.Slider(this);\n          control.exclude();\n          this._add(control, {type : id});\n          break;\n\n        // Create splitter\n        case \"splitter\":\n          control = new qx.ui.splitpane.Splitter(this);\n          this._add(control, {type : id});\n          control.addListener(\"move\", this.__onSplitterMove, this);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n    /**\n     * Move handler for the splitter which takes care of the external\n     * triggered resize of children.\n     *\n     * @param e {qx.event.type.Data} The data even of move.\n     */\n    __onSplitterMove : function(e) {\n      this.__setBlockerPosition(e.getData());\n    },\n\n\n    /**\n     * Creates a blocker for the splitter which takes all bouse events and\n     * also handles the offset and cursor.\n     *\n     * @param orientation {String} The orientation of the pane.\n     */\n    __createBlocker : function(orientation) {\n      this.__blocker = new qx.ui.splitpane.Blocker(orientation);\n      this.getContentElement().add(this.__blocker);\n\n      var splitter = this.getChildControl(\"splitter\");\n      var splitterWidth = splitter.getWidth();\n      if (!splitterWidth) {\n        splitter.addListenerOnce(\"appear\", function() {\n          this.__setBlockerPosition();\n        }, this);\n      }\n\n      // resize listener to remove the blocker in case the splitter\n      // is removed.\n      splitter.addListener(\"resize\", function(e) {\n        var bounds = e.getData();\n        if (this.getChildControl(\"splitter\").getVisible() && (bounds.height == 0 || bounds.width == 0)) {\n          this.__blocker.hide();\n        } else {\n          this.__blocker.show();\n        }\n      }, this);\n    },\n\n\n    /**\n     * Returns the blocker used over the splitter. this could be used for\n     * adding event listeners like tap or dbltap.\n     *\n     * @return {qx.ui.splitpane.Blocker} The used blocker element.\n     *\n     * @internal\n     */\n    getBlocker : function() {\n      return this.__blocker;\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply routine for the orientation property.\n     *\n     * Sets the pane's layout to vertical or horizontal split layout.\n     *\n     * @param value {String} The new value of the orientation property\n     * @param old {String} The old value of the orientation property\n     */\n    _applyOrientation : function(value, old)\n    {\n      var slider = this.getChildControl(\"slider\");\n      var splitter = this.getChildControl(\"splitter\");\n\n      // Store boolean flag for faster access\n      this.__isHorizontal = value === \"horizontal\";\n\n      if (!this.__blocker) {\n        this.__createBlocker(value);\n      }\n\n      // update the blocker\n      this.__blocker.setOrientation(value);\n\n      // Dispose old layout\n      var oldLayout = this._getLayout();\n      if (oldLayout) {\n        oldLayout.dispose();\n      }\n\n      // Create new layout\n      var newLayout = value === \"vertical\" ?\n        new qx.ui.splitpane.VLayout : new qx.ui.splitpane.HLayout;\n      this._setLayout(newLayout);\n\n      // Update states for splitter and slider\n      splitter.removeState(old);\n      splitter.addState(value);\n      splitter.getChildControl(\"knob\").removeState(old);\n      splitter.getChildControl(\"knob\").addState(value);\n      slider.removeState(old);\n      slider.addState(value);\n\n      // flush (needs to be done for the blocker update) and update the blocker\n      qx.ui.core.queue.Manager.flush();\n      this.__setBlockerPosition();\n    },\n\n\n    // property apply\n    _applyOffset : function(value, old) {\n      this.__setBlockerPosition();\n    },\n\n    /**\n     * Helper for setting the blocker to the right position, which depends on\n     * the offset, orientation and the current position of the splitter.\n     *\n     * @param bounds {Map?null} If the bounds of the splitter are known,\n     *   they can be added.\n     */\n    __setBlockerPosition : function(bounds) {\n      var splitter = this.getChildControl(\"splitter\");\n      var offset = this.getOffset();\n      var splitterBounds = splitter.getBounds();\n      var splitterElem = splitter.getContentElement().getDomElement();\n\n      // do nothing if the splitter is not ready\n      if (!splitterElem) {\n        return;\n      }\n\n      // recalculate the dimensions of the blocker\n      if (this.__isHorizontal) {\n        // get the width either of the given bounds or of the read bounds\n        var width = null;\n        if (bounds) {\n          width = bounds.width;\n        } else if (splitterBounds) {\n          width = splitterBounds.width;\n        }\n        var left = bounds && bounds.left;\n\n        if (width || !this.getChildControl(\"splitter\").getVisible()) {\n          if (isNaN(left)) {\n            left = qx.bom.element.Location.getPosition(splitterElem).left;\n          }\n          this.__blocker.setWidth(offset, width || 6);\n          this.__blocker.setLeft(offset, left);\n        }\n\n      // vertical case\n      } else {\n        // get the height either of the given bounds or of the read bounds\n        var height = null;\n        if (bounds) {\n          height = bounds.height;\n        } else if (splitterBounds) {\n          height = splitterBounds.height;\n        }\n        var top =  bounds && bounds.top;\n\n        if (height || !this.getChildControl(\"splitter\").getVisible()) {\n          if (isNaN(top)) {\n            top = qx.bom.element.Location.getPosition(splitterElem).top;\n          }\n          this.__blocker.setHeight(offset, height || 6);\n          this.__blocker.setTop(offset, top);\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds a widget to the pane.\n     *\n     * Sets the pane's layout to vertical or horizontal split layout. Depending on the\n     * pane's layout the first widget will be the left or top widget, the second one\n     * the bottom or right widget. Adding more than two widgets will overwrite the\n     * existing ones.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to be inserted into pane.\n     * @param flex {Number} The (optional) layout property for the widget's flex value.\n     */\n    add : function(widget, flex)\n    {\n      if (flex == null) {\n        this._add(widget);\n      } else {\n        this._add(widget, {flex : flex});\n      }\n      this.__children.push(widget);\n    },\n\n\n    /**\n     * Removes the given widget from the pane.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to be removed.\n     */\n    remove : function(widget)\n    {\n      this._remove(widget);\n      qx.lang.Array.remove(this.__children, widget);\n    },\n\n\n    /**\n     * Returns an array containing the pane's content.\n     *\n     * @return {qx.ui.core.Widget[]} The pane's child widgets\n     */\n    getChildren : function() {\n      return this.__children;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for pointerdown event.\n     *\n     * Shows slider widget and starts drag session if pointer is near/on splitter widget.\n     *\n     * @param e {qx.event.type.Pointer} pointerdown event\n     */\n    _onPointerDown : function(e)\n    {\n      // Only proceed if left pointer button is pressed and the splitter is active\n      if (!e.isLeftPressed()) {\n        return;\n      }\n\n      var splitter = this.getChildControl(\"splitter\");\n\n      // Store offset between pointer event coordinates and splitter\n      var splitterLocation = splitter.getContentLocation();\n      var paneLocation = this.getContentLocation();\n      this.__splitterOffset = this.__isHorizontal ?\n        e.getDocumentLeft() - splitterLocation.left + paneLocation.left :\n        e.getDocumentTop() - splitterLocation.top + paneLocation.top ;\n\n      // Synchronize slider to splitter size and show it\n      var slider = this.getChildControl(\"slider\");\n      var splitterBounds = splitter.getBounds();\n      slider.setUserBounds(\n        splitterBounds.left, splitterBounds.top,\n        splitterBounds.width || 6, splitterBounds.height || 6\n      );\n\n      slider.setZIndex(splitter.getZIndex() + 1);\n      slider.show();\n\n      // Enable session\n      this.__activeDragSession = true;\n      this.__blocker.capture();\n\n      e.stop();\n    },\n\n\n    /**\n     * Handler for pointermove event.\n     *\n     * @param e {qx.event.type.Pointer} pointermove event\n     */\n    _onPointerMove : function(e)\n    {\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\n\n      // Check if slider is already being dragged\n      if (this.__activeDragSession)\n      {\n        // Compute new children sizes\n        this.__computeSizes();\n\n        // Update slider position\n        var slider = this.getChildControl(\"slider\");\n        var pos = this.__beginSize;\n\n        if(this.__isHorizontal) {\n          slider.setDomLeft(pos);\n          this.__blocker.setStyle(\"left\", (pos - this.getOffset()) + \"px\");\n        } else {\n          slider.setDomTop(pos);\n          this.__blocker.setStyle(\"top\", (pos - this.getOffset()) + \"px\");\n        }\n\n        e.stop();\n      }\n    },\n\n\n    /**\n     * Handler for pointerout event\n     *\n     * @param e {qx.event.type.Pointer} pointerout event\n     */\n    _onPointerOut : function(e)\n    {\n      this._setLastPointerPosition(e.getDocumentLeft(), e.getDocumentTop());\n    },\n\n\n    /**\n     * Handler for pointerup event\n     *\n     * Sets widget sizes if dragging session has been active.\n     *\n     * @param e {qx.event.type.Pointer} pointerup event\n     */\n    _onPointerUp : function(e)\n    {\n      if (!this.__activeDragSession) {\n        return;\n      }\n\n      // Set sizes to both widgets\n      this._finalizeSizes();\n\n      // Hide the slider\n      var slider = this.getChildControl(\"slider\");\n      slider.exclude();\n\n      // Cleanup\n      this.__activeDragSession = false;\n      this.releaseCapture();\n\n      e.stop();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERVAL HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Updates widgets' sizes based on the slider position.\n     */\n    _finalizeSizes : function()\n    {\n      var beginSize = this.__beginSize;\n      var endSize = this.__endSize;\n\n      if (beginSize == null) {\n        return;\n      }\n\n      var children = this._getChildren();\n      var firstWidget = children[2];\n      var secondWidget = children[3];\n\n      // Read widgets' flex values\n      var firstFlexValue = firstWidget.getLayoutProperties().flex;\n      var secondFlexValue = secondWidget.getLayoutProperties().flex;\n\n      // Both widgets have flex values\n      if((firstFlexValue != 0) && (secondFlexValue != 0))\n      {\n        firstWidget.setLayoutProperties({ flex : beginSize });\n        secondWidget.setLayoutProperties({ flex : endSize });\n      }\n\n      // Update both sizes\n      else\n      {\n        // Set widths to static widgets\n        if (this.__isHorizontal)\n        {\n          firstWidget.setWidth(beginSize);\n          secondWidget.setWidth(endSize);\n        }\n        else\n        {\n          firstWidget.setHeight(beginSize);\n          secondWidget.setHeight(endSize);\n        }\n      }\n    },\n\n\n    /**\n     * Computes widgets' sizes based on the pointer coordinate.\n     */\n    __computeSizes : function()\n    {\n      if (this.__isHorizontal) {\n        var min=\"minWidth\", size=\"width\", max=\"maxWidth\", pointer=this.__lastPointerX;\n      } else {\n        var min=\"minHeight\", size=\"height\", max=\"maxHeight\", pointer=this.__lastPointerY;\n      }\n\n      var children = this._getChildren();\n      var beginHint = children[2].getSizeHint();\n      var endHint = children[3].getSizeHint();\n\n      // Area given to both widgets\n      var allocatedSize = children[2].getBounds()[size] + children[3].getBounds()[size];\n\n      // Calculate widget sizes\n      var beginSize = pointer - this.__splitterOffset;\n      var endSize = allocatedSize - beginSize;\n\n      // Respect minimum limits\n      if (beginSize < beginHint[min])\n      {\n        endSize -= beginHint[min] - beginSize;\n        beginSize = beginHint[min];\n      }\n      else if (endSize < endHint[min])\n      {\n        beginSize -= endHint[min] - endSize;\n        endSize = endHint[min];\n      }\n\n      // Respect maximum limits\n      if (beginSize > beginHint[max])\n      {\n        endSize += beginSize - beginHint[max];\n        beginSize = beginHint[max];\n      }\n      else if (endSize > endHint[max])\n      {\n        beginSize += endSize - endHint[max];\n        endSize = endHint[max];\n      }\n\n      // Store sizes\n      this.__beginSize = beginSize;\n      this.__endSize = endSize;\n    },\n\n\n    /**\n     * Determines whether this is an active drag session\n     *\n     * @return {Boolean} True if active drag session, otherwise false.\n     */\n    _isActiveDragSession : function() {\n      return this.__activeDragSession;\n    },\n\n\n    /**\n     * Sets the last pointer position.\n     *\n     * @param x {Integer} the x position of the pointer.\n     * @param y {Integer} the y position of the pointer.\n     */\n     _setLastPointerPosition : function(x, y)\n     {\n       this.__lastPointerX = x;\n       this.__lastPointerY = y;\n     }\n  },\n\n\n  destruct : function() {\n    this.__children = null;\n  }\n});\n"
  ]
}